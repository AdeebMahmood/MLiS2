                                     Part II  Deep Networks: Modern  Practices  166    This part of the book summarizes the state of modern deep learning as it is used to solve practical applications.
This part focuses only on those approaches that are essentially working tech- nologies that are already used heavily in industry.
By adding more layers and more units within a layer, a deep network can represent functions of increasing complexity.
Most tasks that consist of mapping an input vector to an output vector, and that are easy for a person to do rapidly, can be accomplished via deep learning, given sufficiently large models and sufficiently large datasets of labeled training examples.
Other tasks, that can not be described as associating one vector to another, or that are difficult enough that a person would require time to think and reflect in order to accomplish the task, remain beyond the scope of deep learning for now.
This part of the book describes the core parametric function approximation technology that is behind nearly all modern practical applications of deep learning.
Scaling these models to large inputs such as high resolution images or long temporal sequences requires specialization.
We introduce the convolutional network for scaling to large images and the recurrent neural network for processing temporal sequences.
Finally, we present general guidelines for the practical methodology involved in designing, building, and configuring an application involving deep learning, and review some of the applications of deep learning.
These chapters are the most important for a practitioner—someone who wants to begin implementing and using deep learning algorithms to solve real-world  problems today.
                                     Chapter 6  Deep Feedforward Networks  Deep feedforward networks, also often called feedforward neural networks, or multilayer perceptrons (MLPs), are the quintessential deep learning models.
A feedforward network defines a mapping y = f (x; θ) and learns the value of the parameters θ that result in the best function approximation.
These models are called feedforward because information flows through the function being evaluated from x, through the intermediate computations used to define f , and finally to the output y.
When feedforward neural networks are extended to include feedback connections, they are called recurrent neural networks, presented in chapter .10  Feedforward networks are of extreme importance to machine learning practi- tioners.
For example, the convolutional networks used for object recognition from photos are a  specialized kind of feedforward network.
Feedforward networks are a conceptual stepping stone on the path to recurrent networks, which power many natural language applications.
Feedforward neural networks are called networks because they are typically represented by composing together many different functions.
The model is asso- ciated with a directed acyclic graph describing how the functions are composed together.
For example, we might have three functions f(1), f (2), and f(3) connected in a chain, to form f(x) = f(3)(f (2)(f(1)(x))).
In this case, f (1) is called the first layer of the network, f (2) is called the second layer, and so on.
The training data provides us with noisy, approximate examples of f ∗(x) evaluated at different training points.
The training examples specify directly what the output layer must do at each point x; it must produce a value that is close to y.
The learning algorithm must decide  how to use those layers to produce the desired output, but the training data does not say what each individual layer should do.
Instead, the learning algorithm must decide how to use these layers to best implement an approximation of f ∗.
Because the training data does not show the desired output for each of these layers, these layers are called hidden layers.
Rather than thinking of the layer as representing a single vector-to-vector function, we can also think of the layer as consisting of many units that act in parallel,  each representing a vector-to-scalar function.
Each unit resembles a neuron in the sense that it receives input from many other units and computes its own activation value.
The choice of the functions f ( )i (x) used to compute these representations is also loosely guided by neuroscientific observations about the functions that biological neurons compute.
However, modern neural network research is guided by many mathematical and engineering disciplines, and the goal of neural networks is not to perfectly model the brain.
It is best to think of feedforward networks as function approximation machines that are designed to achieve statistical generalization, occasionally drawing some insights from what we know about the brain, rather than as models of brain function.
One way to understand feedforward networks is to begin with linear models  and consider how to overcome their limitations.
Linear models, such as logistic regression and linear regression, are appealing because they may be fit efficiently and reliably, either in closed form or with convex optimization.
Linear models also have the obvious defect that the model capacity is limited to linear functions, so the model cannot understand the interaction between any two input variables.
To extend linear models to represent nonlinear functions of x, we can apply the linear model not to x itself but to a transformed input φ(x), where φ is a  169    CHAPTER 6.
Equivalently, we can apply the kernel trick described in section , to obtain a nonlinear learning algorithm based on implicitly applying5.7.2 the φ mapping.
We can think of φ as providing a set of features describing x, or as providing a new representation for .x  The question is then how to choose the mapping .φ  1.
One option is to use a very generic φ, such as the infinite-dimensional φ that is implicitly used by kernel machines based on the RBF kernel.
If φ(x) is of high enough dimension, we can always have enough capacity to fit the training set, but generalization to the test set often remains poor.
Very generic feature mappings are usually based only on the principle of local smoothness and do not encode enough prior information to solve advanced problems.
This approach requires decades of human effort for each separate task, with practitioners specializing in different domains such as speech recognition or computer vision, and with little transfer between domains.
We now have parameters θ that we use to learn φ from a broad class of functions, and parameters w that map from φ(x) to the desired output.
This approach is the only one of the three that gives up on the convexity of the training problem, but the benefits outweigh the harms.
In this approach, we parametrize the representation as φ(x; θ) and use the optimization algorithm to find the θ that corresponds to a good representation.
If we wish, this approach can capture the benefit of the first approach by being highly generic—we do so by using a very broad family φ(x;θ).
Human practitioners can encode their knowledge to help generalization by designing families φ(x; θ) that they expect will perform well.
The advantage  is that the human designer only needs to find the right general function family rather than finding precisely the right function.
This general principle of improving models by learning features extends beyond the feedforward networks described in this chapter.
It is a recurring theme of deep learning that applies to all of the kinds of models described throughout this book.
Feedforward networks are the application of this principle to learning deterministic  170    CHAPTER 6.
Other models presented later will apply these principles to learning stochastic mappings, learning functions with feedback, and learning probability distributions over a single vector.
First, training a feedforward network requires making many of the same design decisions as are necessary for a linear model: choosing the optimizer, the cost function, and the form of the output units.
We review these basics of gradient-based  learning, then proceed to confront some of the design decisions that are unique to feedforward networks.
Feedforward networks have introduced the concept of a hidden layer, and this requires us to choose the activation functions that will be used to compute the hidden layer values.
We must also design the architecture of the network, including how many layers the network should contain, how these layers should be connected to each other, and how many units should be in each layer.
We present the back-propagation algorithm and its modern generalizations, which can be used to efficiently compute these gradients.
6.1 Example: Learning XOR  To make the idea of a feedforward network more concrete, we begin with an example of a fully functioning feedforward network on a very simple task: learning the XOR function.
Our model provides a function y = f(x;θ) and our learning algorithm will adapt the parameters θ to make f as similar as possible to f∗.
We want our network to perform correctly on the four points X = {[0, 0], [0,1], [1,0], and [1, 1]}.
More appropriate approaches are described in section .6.2.2.2  Evaluated on our whole training set, the MSE loss function is  J( ) =θ 1  4    x∈X (f∗( ) ( ; ))x − f x θ 2 .
One way to solve  this problem is to use a model that learns a different feature space in which a linear model is able to represent the solution.
Specifically, we will introduce a very simple feedforward network with one hidden layer containing two hidden units.
This feedforward network has a vector of hidden units h that are computed by a function f (1)(x;W c, ).
The output layer is still just a linear regression model, but now it is applied to h rather than to x .
The network now contains two functions chained together: h = f(1)(x;W c, ) and y = f(2)(h;w, b), with the complete model being  f , , , b f( ;x W c w ) = (2)(f (1)( ))x .
Unfortunately, if f(1) were linear, then the feedforward network as a whole would remain a linear function of its input.
Most neural networks do so using an affine transformation controlled by learned parameters, followed by a fixed, nonlinear function called an activation function.
We use that strategy here, by defining h = g(Wx+ c), where W provides the weights of a linear transformation and c the biases.
DEEP FEEDFORWARD NETWORKS  0 1  x1  0  1  x 2  Original spacex  0 1 2  h1  0  1  h 2  Learned spaceh  Figure 6.1: Solving the XOR problem by learning a representation.
The bold numbers printed on the plot indicate the value that the learned function must output at each point.
The linear model therefore cannot use the value of x1 to change the coefficient on x2 and cannot solve this problem.
(Right)In the transformed space represented by the features extracted by a neural network, a linear model can now solve the problem.
In our example solution, the two points that must have output have been1 collapsed into a single point in feature space.
In other words, the nonlinear features have mapped both x = [1, 0] and x = [0,1] to a single point in feature space, h = [1 ,0].
In this example, the motivation for learning the feature space is only to make the model capacity greater so that it can fit the training set.
DEEP FEEDFORWARD NETWORKS  yy  hh  xx  W  w  yy  h1h1  x1x1  h2h2  x2x2  Figure 6.2: An example of a feedforward network, drawn in two different styles.
This style is very explicit and unambiguous but for networks larger than this example it can consume too much space.
In this style, we draw a node in the graph for(Right) each entire vector representing a layer’s activations.
Sometimes we annotate the edges in this graph with the name of the parameters that describe the relationship between two layers.
Here, we indicate that a matrixW describes the mapping from x to h, and a vector w describes the mapping from h to y.
We typically omit the intercept parameters associated with each layer when labeling this kind of drawing.
model, we used a vector of weights and a scalar bias parameter to describe an  affine transformation from an input vector to an output scalar.
Now, we describe an affine transformation from a vector x to a vector h, so an entire vector of bias parameters is needed.
The activation function g is typically chosen to be a function that is applied element-wise, with hi = g(xW:,i+ ci).
In modern neural networks, the default recommendation is to use the rectified linear unit or ReLU (Jarrett et al.
et al., ; , ;2009 Nair and Hinton 2010 Glorot , ) defined by the activation2011a function depicted in figure .g z , z( ) = max 0{ } 6.3  We can now specify our complete network as  f , , , b( ;x W c w ) = w max 0{ ,W x c+ } + b.
DEEP FEEDFORWARD NETWORKS  0  z  0  g z( ) = m a x 0{ ,z  }  Figure 6.3: The rectified linear activation function.
This activation function is the default activation function recommended for use with most feedforward neural networks.
However, the function remains very close to linear, in the sense that is a piecewise linear function with two linear pieces.
Because rectified linear units are nearly linear, they preserve many of the properties that make linear models easy to optimize with gradient- based methods.
A common principle throughout computer science is that we can build complicated systems from minimal components.
Much as a Turing machine’s memory needs only to be able to store 0 or 1 states, we can build a universal function approximator from rectified linear functions.
DEEP FEEDFORWARD NETWORKS  w =   1  −2   , (6.6)  and .b = 0  We can now walk through the way that the model processes a batch of inputs.
Let X be the design matrix containing all four points in the binary input space, with one example per row:  X =      0 0 0 1 1 0 1 1     .
(6.7)  The first step in the neural network is to multiply the input matrix by the first layer’s weight matrix:  XW =      0 0 1 1 1 1 2 2     .
As we move along1 this line, the output needs to begin at , then rise to , then drop back down to .0 1 0 A linear model cannot implement such a function.
To finish computing the value of for each example, we apply the rectified linear transformation:h      0 0  1 0 1 0 2 1     .
DEEP FEEDFORWARD NETWORKS  The neural network has obtained the correct answer for every example in the batch.
In a real situation, there might be billions of model parameters and billions of training examples, so one cannot simply guess the solution as we did here.
The solution we described to the XOR problem is at a global minimum of the loss function, so gradient descent could converge to this point.
In practice, gradient descent would usually not find clean, easily understood, integer-valued solutions like the one we presented here.
6.2 Gradient-Based Learning  Designing and training a neural network is not much different from training any other machine learning model with gradient descent.
In section , we described5.10 how to build a machine learning algorithm by specifying an optimization procedure,  a cost function, and a model family.
The largest difference between the linear models we have seen so far and neural networks is that the nonlinearity of a neural network causes most interesting loss functions to become non-convex.
This means that neural networks are usually trained by using iterative, gradient-based optimizers that merely drive the cost function to a very low value, rather than the linear equation solvers used to train linear regression models or the convex optimization algorithms with global conver- gence guarantees used to train logistic regression or SVMs.
Convex optimization converges starting from any initial parameters (in theory—in practice it is very robust but can encounter numerical problems).
Stochastic gradient descent applied to non-convex loss functions has no such convergence guarantee, and is sensitive to the values of the initial parameters.
The iterative gradient-based opti- mization algorithms used to train feedforward networks and almost all other deep models will be described in detail in chapter , with parameter initialization in8 particular discussed in section .
For the moment, it suffices to understand that8.4 the training algorithm is almost always based on using the gradient to descend the cost function in one way or another.
The specific algorithms are improvements and refinements on the ideas of gradient descent, introduced in section , and,4.3  177    CHAPTER 6.
DEEP FEEDFORWARD NETWORKS  more specifically, are most often improvements of the stochastic gradient descent algorithm, introduced in section .5.9  We can of course, train models such as linear regression and support vector machines with gradient descent too, and in fact this is common when the training set is extremely large.
From this point of view, training a neural network is not much different from training any other model.
Computing the gradient is slightly more complicated for a neural network, but can still be done efficiently and exactly.
Section will describe how to obtain the gradient using the back-propagation6.5  algorithm and modern generalizations of the back-propagation algorithm.
As with other machine learning models, to apply gradient-based learning we must choose a cost function, and we must choose how to represent the output of the model.
6.2.1 Cost Functions  An important aspect of the design of a deep neural network is the choice of the cost function.
Fortunately, the cost functions for neural networks are more or less the same as those for other parametric models, such as linear models.
In most cases, our parametric model defines a distribution p(y x| ;θ ) and we simply use the principle of maximum likelihood.
This means we use the cross-entropy between the training data and the model’s predictions as the cost function.
Sometimes, we take a simpler approach, where rather than predicting a complete probability distribution over y, we merely predict some statistic of y conditioned on .
Specialized loss functions allow us to train a predictor of these estimates.x  The total cost function used to train a neural network will often combine one  of the primary cost functions described here with a regularization term.
The weight decay approach used for linear models is also directly5.2.2 applicable to deep neural networks and is among the most popular regularization strategies.
More advanced regularization strategies for neural networks will be described in chapter .7  6.2.1.1 Learning Conditional Distributions with Maximum Likelihood  Most modern neural networks are trained using maximum likelihood.
This means that the cost function is simply the negative log-likelihood, equivalently described  178    CHAPTER 6.
DEEP FEEDFORWARD NETWORKS  as the cross-entropy between the training data and the model distribution.
(6.12)  The specific form of the cost function changes from model to model, depending  on the specific form of log pmodel.
The expansion of the above equation typically yields some terms that do not depend on the model parameters and may be dis- carded.
For example, as we saw in section , if5.5.1 pmodel(y x| ) = N (y ; f(x; θ), I ), then we recover the mean squared error cost,  J θ( ) = 1  2 Ex y, ∼p̂data || − ||y f( ; )x θ 2 + const, (6.13)  up to a scaling factor of 12 and a term that does not depend on .
The discardedθ constant is based on the variance of the Gaussian distribution, which in this case we chose not to parametrize.
Previously, we saw that the equivalence between maximum likelihood estimation with an output distribution and minimization of  mean squared error holds for a linear model, but in fact, the equivalence holds regardless of the used to predict the mean of the Gaussian.f( ; )x θ  An advantage of this approach of deriving the cost function from maximum likelihood is that it removes the burden of designing cost functions for each model.
One recurring theme throughout neural network design is that the gradient of the cost function must be large and predictable enough to serve as a good guide for the learning algorithm.
Functions that saturate (become very flat) undermine this objective because they make the gradient become very small.
In many cases this happens because the activation functions used to produce the output of the hidden units or the output units saturate.
We will discuss the interaction between the cost function and the choice of output unit in section .6.2.2  One unusual property of the cross-entropy cost used to perform maximum likelihood estimation is that it usually does not have a minimum value when applied to the models commonly used in practice.
For discrete output variables, most models are parametrized in such a way that they cannot represent a probability of zero or one, but can come arbitrarily close to doing so.
DEEP FEEDFORWARD NETWORKS  can control the density of the output distribution (for example, by learning the variance parameter of a Gaussian output distribution) then it becomes possible to assign extremely high density to the correct training set outputs, resulting in cross-entropy approaching negative infinity.
Regularization techniques described in chapter provide several different ways of modifying the learning problem so7 that the model cannot reap unlimited reward in this way.
6.2.1.2 Learning Conditional Statistics  Instead of learning a full probability distribution p(y x| ; θ) we often want to learn just one conditional statistic of given .y x  For example, we may have a predictor f(x; θ) that we wish to predict the mean of .y  If we use a sufficiently powerful neural network, we can think of the neural network as being able to represent any function f from a wide class of functions, with this class being limited only by features such as continuity and boundedness rather than by having a specific parametric form.
From this point of view, we can view the cost function as being a functional rather than just a function.
We can thus think of learning as choosing a function rather than merely choosing a set of parameters.
For example, we can design the cost functional to have its minimum lie on the function that maps x to the expected value of y given x.
Solving an optimization problem with respect to a function requires a mathematical tool called calculus of variations, described in section .
It is not necessary19.4.2  to understand calculus of variations to understand the content of this chapter.
At the moment, it is only necessary to understand that calculus of variations may be used to derive the following two results.
Our first result derived using calculus of variations is that solving the optimiza- tion problem  f ∗ = arg min f  Ex y, ∼pdata || − ||y f( )x 2 (6.14)  yields f∗ ( ) = x Ey∼pdata( )y x| [ ]y , (6.15)  so long as this function lies within the class we optimize over.
In other words, if we could train on infinitely many samples from the true data generating distribution, minimizing the mean squared error cost function gives a function that predicts the mean of for each value of .y x  180    CHAPTER 6.
A second result derived using calculus of variations is that  f ∗ = arg min f  Ex y, ∼pdata || − ||y f( )x 1 (6.16)  yields a function that predicts the median value of y for each x, so long as such a function may be described by the family of functions we optimize over.
This cost function is commonly called .mean absolute error  Unfortunately, mean squared error and mean absolute error often lead to poor results when used with gradient-based optimization.
Some output units that saturate produce very small gradients when combined with these cost functions.
This is one reason that the cross-entropy cost function is more popular than mean squared error or mean absolute error, even when it is not necessary to estimate an entire distribution .p( )y x|  6.2.2 Output Units  The choice of cost function is tightly coupled with the choice of output unit.
Most of the time, we simply use the cross-entropy between the data distribution and the model distribution.
Here, we focus on the use of these units as outputs of the model, but in principle they can be used internally as well.
We revisit these units with additional detail about their use as hidden units in section .6.3  Throughout this section, we suppose that the feedforward network provides a set of hidden features defined by h = f (x ;θ).
The role of the output layer is then to provide some additional transformation from the features to complete the task that the network must perform.
6.2.2.1 Linear Units for Gaussian Output Distributions  One simple kind of output unit is an output unit based on an affine transformation with no nonlinearity.
Linear output layers are often used to produce the mean of a conditional Gaussian distribution:  p( ) = ( ;y x| N y ŷ I, ).
DEEP FEEDFORWARD NETWORKS  Maximizing the log-likelihood is then equivalent to minimizing the mean squared error.
The maximum likelihood framework makes it straightforward to learn the covariance of the Gaussian too, or to make the covariance of the Gaussian be a function of the input.
It is difficult to satisfy such constraints with a linear output layer, so typically other output units are used to parametrize the covariance.
Approaches to modeling the covariance are described shortly, in section .6.2.2.4  Because linear units do not saturate, they pose little difficulty for gradient- based optimization algorithms and may be used with a wide variety of optimization algorithms.
6.2.2.2 Sigmoid Units for Bernoulli Output Distributions  Many tasks require predicting the value of a binary variable y .
The maximum-likelihood approach is to define a Bernoulli distribution over y conditioned on .x  A Bernoulli distribution is defined by just a single number.
Suppose we were to use a linear unit, and threshold its value to obtain a valid probability:  P y( = 1 ) = max| x   0 min,   1,wh+ b  .
(6.18)  This would indeed define a valid conditional distribution, but we would not be able  to train it very effectively with gradient descent.
Any time that wh +b strayed outside the unit interval, the gradient of the output of the model with respect to its parameters would be 0.
A gradient of 0 is typically problematic because the learning algorithm no longer has a guide for how to improve the corresponding parameters.
Instead, it is better to use a different approach that ensures there is always a strong gradient whenever the model has the wrong answer.
DEEP FEEDFORWARD NETWORKS  where is the logistic sigmoid function described in section .σ 3.10  We can think of the sigmoid output unit as having two components.
Next, it uses the sigmoid activation function to convert into a probability.z  We omit the dependence on x for the moment to discuss how to define a probability distribution over y using the value z .
The sigmoid can be motivated by constructing an unnormalized probability distribution P̃(y), which does not sum to 1.
If we begin with the assumption that the unnormalized log probabilities are linear in y and z, we can exponentiate to obtain the unnormalized probabilities.
We then normalize to see that this yields a Bernoulli distribution controlled by a sigmoidal transformation of :z  log P̃ y yz( ) = (6.20)  P̃ y yz( ) = exp( ) (6.21)  P y( ) = exp( )yz  1 y=0 exp(y   z) (6.22)  P y σ y z .
( ) = ((2 − 1) ) (6.23)  Probability distributions based on exponentiation and normalization are common throughout the statistical modeling literature.
The z variable defining such a distribution over binary variables is called a .logit  This approach to predicting the probabilities in log-space is natural to use with maximum likelihood learning.
Because the cost function used with maximum likelihood is − logP(y | x), the log in the cost function undoes the exp of the sigmoid.
Without this effect, the saturation of the sigmoid could prevent gradient-  based learning from making good progress.
The loss function for maximum likelihood learning of a Bernoulli parametrized by a sigmoid is  J P y( ) = logθ − ( | x) (6.24) = log ((2 1) )− σ y − z (6.25) = ((1 2 ) )ζ − y z .
By rewriting3.10 the loss in terms of the softplus function, we can see that it saturates only when (1 − 2y)z is very negative.
Saturation thus occurs only when the model already has the right answer—when y = 1 and z is very positive, or y= 0 and z is very negative.
As | |z becomes large while z has the wrong sign, the softplus function asymptotes toward simply returning its argument | |z .
The derivative with respect to z asymptotes to sign(z), so, in the limit of extremely incorrect z , the softplus function does not shrink the gradient at all.
This property is very useful because it means that gradient-based learning can act to quickly correct a mistaken .z  When we use other loss functions, such as mean squared error, the loss can saturate anytime σ(z) saturates.
The sigmoid activation function saturates to 0  when z becomes very negative and saturates to when1 z becomes very positive.
The gradient can shrink too small to be useful for learning whenever this happens, whether the model has the correct answer or the incorrect answer.
For this reason, maximum likelihood is almost always the preferred approach to training sigmoid output units.
Analytically, the logarithm of the sigmoid is always defined and finite, because the sigmoid returns values restricted to the open interval (0,1), rather than using the entire closed interval of valid probabilities [0,1].
In software implementations, to avoid numerical problems, it is best to write the negative log-likelihood as a function of z, rather than as a function of ŷ = σ(z).
If the sigmoid function underflows to zero, then taking the logarithm of ŷ yields negative infinity.
6.2.2.3 Softmax Units for Multinoulli Output Distributions  Any time we wish to represent a probability distribution over a discrete variable with n possible values, we may use the softmax function.
This can be seen as a generalization of the sigmoid function which was used to represent a probability distribution over a binary variable.
Softmax functions are most often used as the output of a classifier, to represent  the probability distribution over n different classes.
More rarely, softmax functions can be used inside the model itself, if we wish the model to choose between one of n different options for some internal variable.
In the case of binary variables, we wished to produce a single number  ŷ P y .= ( = 1 )| x (6.27)  Because this number needed to lie between and , and because we wanted the0 1 logarithm of the number to be well-behaved for gradient-based optimization of the log-likelihood, we chose to instead predict a number z = log P̃(y = 1 | x).
DEEP FEEDFORWARD NETWORKS  To generalize to the case of a discrete variable with n values, we now need to produce a vector ŷ, with ŷi = P (y = i | x).
We require not only that each element of ŷi be between and , but also that the entire vector sums to so that0 1 1 it represents a valid probability distribution.
The same approach that worked for the Bernoulli distribution generalizes to the multinoulli distribution.
First, a linear layer predicts unnormalized log probabilities:  z W= h b+ , (6.28)  where zi = log P̃ (y = i | x).
(6.29)  As with the logistic sigmoid, the use of the exp function works very well when training the softmax to output a target value y using maximum log-likelihood.
Defining the softmax in terms of exp is natural because the log in the log-likelihood can undo the of the softmax:exp  log softmax( )z i = zi − log   j  exp(zj ).
(6.30)  The first term of equation shows that the input6.30 z i always has a direct contribution to the cost function.
Because this term cannot saturate, we know that learning can proceed, even if the contribution of zi to the second term of equation becomes very small.
When maximizing the log-likelihood, the first6.30 term encourages z i to be pushed up, while the second term encourages all of z to be pushed down.
To gain some intuition for the second term, log   j exp(zj), observe  that this term can be roughly approximated by maxj zj.
This approximation is  based on the idea that exp(zk) is insignificant for any zk that is noticeably less than maxj zj.
The intuition we can gain from this approximation is that the negative log-likelihood cost function always strongly penalizes the most active incorrect prediction.
If the correct answer already has the largest input to the softmax, then the −zi term and the log   j exp(zj) ≈ maxj zj = zi terms will roughly cancel.
This example will then contribute little to the overall training cost, which will be dominated by other examples that are not yet correctly classified.
Overall, unregularized maximum likelihood will drive the model to learn parameters that drive the softmax to predict  185    CHAPTER 6.
DEEP FEEDFORWARD NETWORKS  the fraction of counts of each outcome observed in the training set:  softmax( ( ; ))z x θ i ≈ m j=1 1y( )j =i,x ( )j =xm j=1 1x( )j =x  .
(6.31)  Because maximum likelihood is a consistent estimator, this is guaranteed to happen  so long as the model family is capable of representing the training distribution.
In practice, limited model capacity and imperfect optimization will mean that the model is only able to approximate these fractions.
Many objective functions other than the log-likelihood do not work as well with the softmax function.
Specifically, objective functions that do not use a log to undo the exp of the softmax fail to learn when the argument to the exp becomes very negative, causing the gradient to vanish.
In particular, squared error is a poor loss function for softmax units, and can fail to train the model to change its output, even when the model makes highly confident incorrect predictions ( ,Bridle 1990).
To understand why these other loss functions can fail, we need to examine the softmax function itself.
The sigmoid function has a single output that saturates when its input is extremely negative or extremely positive.
When the softmax saturates, many cost functions based on the softmax also saturate, unless they are able to invert the saturating activating function.
To see that the softmax function responds to the difference between its inputs, observe that the softmax output is invariant to adding the same scalar to all of its inputs:  softmax( ) = softmax( + )z z c .
(6.32)  Using this property, we can derive a numerically stable variant of the softmax:  softmax( ) = softmax( maxz z − i zi).
(6.33)  The reformulated version allows us to evaluate softmax with only small numerical errors even when z contains extremely large or extremely negative numbers.
Ex- amining the numerically stable variant, we see that the softmax function is driven by the amount that its arguments deviate from maxi zi .
An output softmax(z)i saturates to when the corresponding input is maximal1 (zi = maxi zi ) and zi is much greater than all of the other inputs.
DEEP FEEDFORWARD NETWORKS  can cause similar difficulties for learning if the loss function is not designed to compensate for it.
The most common is simply to have an earlier layer of the neural network output every element of z, as described above using the linear layer z = W h+ b.
The constraint that the n outputs must sum to means that only1 n− 1 parameters are necessary; the probability of the n-th value may be obtained by subtracting the  first n− 1 1probabilities from .
Defining P (y= 1 | x) = σ(z) is equivalent to defining P (y = 1 | x) = softmax(z)1 with a two-dimensional z and z1 = 0.
Both the n− 1 argument and the n argument approaches to the softmax can describe the same set of probability distributions, but have different learning dynamics.
In practice, there is rarely much difference between using the overparametrized version or the restricted version, and it is simpler to implement the overparametrized version.
From a neuroscientific point of view, it is interesting to think of the softmax as a way to create a form of competition between the units that participate in it: the softmax outputs always sum to 1 so an increase in the value of one unit necessarily  corresponds to a decrease in the value of others.
This is analogous to the lateral inhibition that is believed to exist between nearby neurons in the cortex.
At the extreme (when the difference between the maximal ai and the others is large in magnitude) it becomes a form of winner-take-all (one of the outputs is nearly 1 and the others are nearly 0).
The arg max function, with its result represented as a one-hot vector, is not continuous or differentiable.
It would perhaps be better to call the softmax function “softargmax,” but the current name is an entrenched convention.
6.2.2.4 Other Output Types  The linear, sigmoid, and softmax output units described above are the most  common.
In general, if we define a conditional distribution p(y x| ; θ), the principle of maximum likelihood suggests we use as our cost function.− |log (p y x θ; )  In general, we can think of the neural network as representing a function f(x;θ).
Our loss function  can then be interpreted as .− log ( ; ( ))p y ω x For example, we may wish to learn the variance of a conditional Gaussian for y,  given x.
In the simple case, where the variance σ2 is a constant, there is a closed form expression because the maximum likelihood estimator of variance is simply the empirical mean of the squared difference between observations y and their expected value.
A computationally more expensive approach that does not require writing special-case code is to simply include the variance as one of the properties of the distribution p(y | x) that is controlled by ω = f(x; θ).
The negative log-likelihood − log p(y;ω(x)) will then provide a cost function with the appropriate terms necessary to make our optimization procedure incrementally learn the variance.
In the simple case where the standard deviation does not depend on the input, we can make a new parameter in the network that is copied directly into ω .
This new parameter might be σ itself or could be a parameter v representing σ2 or it could  be a parameter β representing 1σ 2, depending on how we choose to parametrize the distribution.
In the heteroscedastic case, we simply make the specification of the variance be one of the values output by f(x;θ).
A typical way to do this is to formulate the Gaussian distribution using precision, rather than variance, as described in equation .3.22 In the multivariate case it is most common to use a diagonal precision matrix  diag (6.34)( )β .
This formulation works well with gradient descent because the formula for the log-likelihood of the Gaussian distribution parametrized by β involves only mul- tiplication by βi and addition of logβi .
If we parametrized the output in terms of standard deviation, the log-likelihood would still involve division, and would also involve squaring.
The gradient through the squaring operation can vanish near zero, making it difficult to learn parameters that are squared.
DEEP FEEDFORWARD NETWORKS  Regardless of whether we use standard deviation, variance, or precision, we must ensure that the covariance matrix of the Gaussian is positive definite.
Because the eigenvalues of the precision matrix are the reciprocals of the eigenvalues of the covariance matrix, this is equivalent to ensuring that the precision matrix is positive definite.
If we use a diagonal matrix, or a scalar times the diagonal matrix, then the only condition we need to enforce on the output of the model is positivity.
If we suppose that a is the raw activation of the model used to determine the diagonal precision, we can use the softplus function to obtain a positive precision  vector: β = ζ(a).
This same strategy applies equally if using variance or standard deviation rather than precision or if using a scalar times identity rather than diagonal matrix.
If the covariance is full and conditional, then a parametrization must be chosen that guarantees positive-definiteness of the predicted covariance matrix.
One practical issue if the matrix is full rank is that computing the likelihood is expensive, with a d d× matrix requiring O(d3 ) computation for the determinant and inverse of Σ(x) (or equivalently, and more commonly done, its eigendecomposition or that of ).B x( )  We often want to perform multimodal regression, that is, to predict real values that come from a conditional distribution p(y x| ) that can have several different peaks in y space for the same value of x.
1991 Bishop 1994 Neural networks with Gaussian mixtures as their output are often called mixture density networks.
A Gaussian mixture output with n components is defined by the conditional probability distribution  p( ) =y x| n  i=1  p i( = c | Nx) ( ;y µ( )i ( )x ,Σ( )i ( ))x .
(6.35)  The neural network must have three outputs: a vector defining p(c = i | x), a matrix providing µ( )i (x) for all i, and a tensor providing Σ( )i (x) for all i.
Mixture components p(c = i | x): these form a multinoulli distribution over the n different components associated with latent variable1 c, and can  1 We consider c to be latent because we do not observe it in the data: given input x and target  y , it is not possible to know with certainty which Gaussian component was responsible for y, but  we can imagine that y was generated by picking one of them, and make that unobserved choice a  random variable.
DEEP FEEDFORWARD NETWORKS  typically be obtained by a softmax over an n-dimensional vector, to guarantee that these outputs are positive and sum to 1.
Means µ( )i (x): these indicate the center or mean associated with the i-th Gaussian component, and are unconstrained (typically with no nonlinearity  at all for these output units).
If y is a d-vector, then the network must output an n d× matrix containing all n of these d-dimensional vectors.
Learning these means with maximum likelihood is slightly more complicated than learning the means of a distribution with only one output mode.
The expression for the negative log-likelihood naturally weights each example’s contribution to the loss for each component by the probability that the component produced the example.
As when learning a single Gaussian component, we typically use a diagonal matrix to avoid needing to compute determinants.
As with learning the means of the mixture, maximum likelihood is complicated by needing to assign partial responsibility for each point to each mixture component.
Gradient descent will automatically follow the correct process if given the correct specification of the negative log-likelihood under the mixture model.
It has been reported that gradient-based optimization of conditional Gaussian mixtures (on the output of neural networks) can be unreliable, in part because one gets divisions (by the variance) which can be numerically unstable (when some variance gets to be small for a particular example, yielding very large gradients).
One solution is to clip gradients (see section ) while another is to scale10.11.1 the gradients heuristically ( , ).Murray and Larochelle 2014  Gaussian mixture outputs are particularly effective in generative models of speech (Schuster 1999, ) or movements of physical objects (Graves 2013, ).
The mixture density strategy gives a way for the network to represent multiple output modes and to control the variance of its output, which is crucial for obtaining a high degree of quality in these real-valued domains.
An example of a mixture density network is shown in figure .6.4  In general, we may wish to continue to model larger vectors y containing more variables, and to impose richer and richer structures on these output variables.
For example, we may wish for our neural network to output a sequence of characters that forms a sentence.
In these cases, we may continue to use the principle of maximum likelihood applied to our model p(y;ω(x)), but the model we use  190    CHAPTER 6.
DEEP FEEDFORWARD NETWORKS  x  y  Figure 6.4: Samples drawn from a neural network with a mixture density output layer.
The neural network is able to learn nonlinear mappings from the input to the parameters of the output distribution.
These parameters include the probabilities governing which of three mixture components will generate the output as well as the parameters for each mixture component.
All of these aspects of the output distribution are able to vary with respect to the input , and to do so in nonlinear ways.x  to describe y becomes complex enough to be beyond the scope of this chapter.
Chapter describes how to use recurrent neural networks to define such models10 over sequences, and part describes advanced techniques for modeling arbitraryIII  probability distributions.
6.3 Hidden Units  So far we have focused our discussion on design choices for neural networks that are common to most parametric machine learning models trained with gradient- based optimization.
Now we turn to an issue that is unique to feedforward neural networks: how to choose the type of hidden unit to use in the hidden layers of the model.
The design of hidden units is an extremely active area of research and does not  yet have many definitive guiding theoretical principles.
It can be difficult to determine when to use which kind (though rectified linear units are usually an acceptable choice).
DEEP FEEDFORWARD NETWORKS  describe here some of the basic intuitions motivating each type of hidden units.
The design process consists of trial and error, intuiting that a kind of hidden unit may work well, and then training a network with that kind of hidden unit and evaluating its performance on a validation set.
In practice, gradient descent still performs well enough for these models to be used for machine learning tasks.
This is in part because neural network training algorithms do not usually arrive at a local minimum of the cost function, but instead merely reduce its value significantly, as shown in figure .
Because we do not4.3 8 expect training to actually reach a point where the gradient is 0 , it is acceptable for the minima of the cost function to correspond to points with undefined gradient.
Hidden units that are not differentiable are usually non-differentiable at only a small number of points.
In general, a function g(z) has a left derivative defined by the slope of the function immediately to the left of z and a right derivative  defined by the slope of the function immediately to the right of z.
A function is differentiable at z only if both the left derivative and the right derivative are defined and equal to each other.
The functions used in the context of neural networks usually have defined left derivatives and defined right derivatives.
Software implementations of neural network training usually return one of1 the one-sided derivatives rather than reporting that the derivative is undefined or raising an error.
This may be heuristically justified by observing that gradient- based optimization on a digital computer is subject to numerical error anyway.
In some contexts, more theoretically pleasing justifications are available, but0  these usually do not apply to neural network training.
The important point is that in practice one can safely disregard the non-differentiability of the hidden unit activation functions described below.
Unless indicated otherwise, most hidden units can be described as accepting a vector of inputs x, computing an affine transformation z = W x+ b, and then applying an element-wise nonlinear function g(z).
Most hidden units are distinguished from each other only by the choice of the form of the activation function .g( )z  192    CHAPTER 6.
DEEP FEEDFORWARD NETWORKS  6.3.1 Rectified Linear Units and Their Generalizations  Rectified linear units use the activation function .g z , z( ) = max 0{ } Rectified linear units are easy to optimize because they are so similar to linear  units.
The only difference between a linear unit and a rectified linear unit is that a rectified linear unit outputs zero across half its domain.
The second derivative of the rectifying operation is almost everywhere, and the derivative of the rectifying0 operation is everywhere that the unit is active.
This means that the gradient1 direction is far more useful for learning than it would be with activation functions that introduce second-order effects.
(6.36)  When initializing the parameters of the affine transformation, it can be a good practice to set all elements of b to a small, positive value, such as 0 .1.
This makes it very likely that the rectified linear units will be initially active for most inputs in the training set and allow the derivatives to pass through.
Most of these general- izations perform comparably to rectified linear units and occasionally perform better.
One drawback to rectified linear units is that they cannot learn via gradient- based methods on examples for which their activation is zero.
A variety of generalizations of rectified linear units guarantee that they receive gradient every- where.
Three generalizations of rectified linear units are based on using a non-zero slope αi when zi < 0: hi = g(z α, )i = max(0, zi) + αi min(0, zi ).
It is used for object recognition from images ( , ), where it makes sense to seek features that areJarrett et al.
2013) fixes αi to a small value like 0.01 while a parametric ReLU or PReLU treats αi as a learnable parameter ( , ).He et al.
DEEP FEEDFORWARD NETWORKS  one of these groups: g( )z i = max  j∈G( )i zj (6.37)  where G( )i is the set of indices into the inputs for group i, {(i− 1)k+ 1, .
This provides a way of learning a piecewise linear function that responds to multiple directions in the input space.x  A maxout unit can learn a piecewise linear, convex function with up to k pieces.
Maxout units can thus be seen as learning the activation function itself rather than just the relationship between units.
With large enough k, a maxout unit can learn to approximate any convex function with arbitrary fidelity.
In particular,  a maxout layer with two pieces can learn to implement the same function of the input x as a traditional layer using the rectified linear activation function, absolute value rectification function, or the leaky or parametric ReLU, or can learn to implement a totally different function altogether.
The maxout layer will of course be parametrized differently from any of these other layer types, so the learning dynamics will be different even in the cases where maxout learns to implement the same function of as one of the other layer types.x  Each maxout unit is now parametrized by k weight vectors instead of just one, so maxout units typically need more regularization than rectified linear units.
They can work well without regularization if the training set is large and the number of pieces per unit is kept low ( , ).Cai et al.
In some cases, one can gain some sta- tistical and computational advantages by requiring fewer parameters.
Specifically, if the features captured by n different linear filters can be summarized without losing information by taking the max over each group of k features, then the next layer can get by with times fewer weights.k  Because each unit is driven by multiple filters, maxout units have some redun- dancy that helps them to resist a phenomenon called catastrophic forgetting in which neural networks forget how to perform tasks that they were trained on in the past ( , ).Goodfellow et al.
2014a  Rectified linear units and all of these generalizations of them are based on the  principle that models are easier to optimize if their behavior is closer to linear.
This same general principle of using linear behavior to obtain easier optimization also applies in other contexts besides deep linear networks.
When training them, one needs to propagate information through several time steps, which is much easier when some linear computations (with some directional derivatives being of magnitude near 1) are involved.
DEEP FEEDFORWARD NETWORKS  architectures, the LSTM, propagates information through time via summation—a particular straightforward kind of such linear activation.
This is discussed further in section .10.10  6.3.2 Logistic Sigmoid and Hyperbolic Tangent  Prior to the introduction of rectified linear units, most neural networks used the logistic sigmoid activation function  g z σ z( ) = ( ) (6.38)  or the hyperbolic tangent activation function  g z z .
( ) = tanh( ) (6.39)  These activation functions are closely related because .tanh( ) = 2 (2 ) 1z σ z − We have already seen sigmoid units as output units, used to predict the  probability that a binary variable is .
Unlike piecewise linear units, sigmoidal1 units saturate across most of their domain—they saturate to a high value when z is very positive, saturate to a low value when z is very negative, and are only strongly sensitive to their input when z is near 0.
Their use as output units is compatible with the use of gradient-based learning when an appropriate cost function can undo the saturation of the sigmoid in the output layer.
When a sigmoidal activation function must be used, the hyperbolic tangent activation function typically performs better than the logistic sigmoid.
Because tanh is similar to the identity function near , training a deep neural0 network ŷ = w tanh(U tanh(Vx)) resembles training a linear model ŷ = wUV x so long as the activations of the network can be kept small.
This makes training the network easier.tanh  Sigmoidal activation functions are more common in settings other than feed- forward networks.
Recurrent networks, many probabilistic models, and some autoencoders have additional requirements that rule out the use of piecewise linear activation functions and make sigmoidal units more appealing despite the drawbacks of saturation.
DEEP FEEDFORWARD NETWORKS  6.3.3 Other Hidden Units  Many other types of hidden units are possible, but are used less frequently.
To provide a concrete example, the authors tested a feedforward network using h = cos(Wx+ b) on the MNIST dataset and obtained an error rate of less than 1%, which is competitive with results obtained using more conventional activation functions.
During research and development of new techniques, it is common to test many different activation functions and find that several variations on standard practice perform comparably.
This means that usually new hidden unit types are published only if they are clearly demonstrated to provide a significant improvement.
New hidden unit types that perform roughly comparably to known types are so common as to be uninteresting.
If every layer of the neural network consists of only linear transformations, then the network as a whole will be linear.
We may replace this with two layers, with one layer using weight matrix U and the other using weight matrix V .
If the first layer has no activation function, then we have  essentially factored the weight matrix of the original layer based on W .
If U produces q outputs, then U and V together contain only (n+ p)q parameters, while W contains np parameters.
It comes at the cost of constraining the linear transformation to be low-rank, but these low-rank relationships are often sufficient.
Softmax units are another kind of unit that is usually used as an output (as described in section ) but may sometimes be used as a hidden unit.
Softmax6.2.2.3 units naturally represent a probability distribution over a discrete variable with k possible values, so they may be used as a kind of switch.
These kinds of hidden  units are usually only used in more advanced architectures that explicitly learn to manipulate memory, described in section .10.12  196    CHAPTER 6.
DEEP FEEDFORWARD NETWORKS  A few other reasonably common hidden unit types include:  • Radial basis function or RBF unit: hi = exp   − 1 σ 2i  ||W:,i − ||x 2  .
Because it saturates to for most , it can be difficult to optimize.0 x  • Softplus: g(a) = ζ(a) = log(1+ea).
This is a smooth version of the rectifier, introduced by ( ) for function approximation and byDugas et al.
The softplus demonstrates that the performance of hidden unit types can be very counterintuitive—one might expect it to have an advantage over the rectifier due to being differentiable everywhere or due to saturating less completely, but empirically it does not.
• Hard tanh: this is shaped similarly to the tanh and the rectifier but unlike the latter, it is bounded, g(a) = max(−1,min(1 , a)).
It was introduced by ( ).Collobert 2004  Hidden unit design remains an active area of research and many useful hidden unit types remain to be discovered.
6.4 Architecture Design  Another key design consideration for neural networks is determining the architecture.
The word architecture refers to the overall structure of the network: how many units it should have and how these units should be connected to each other.
Most neural network architectures arrange these layers in a chain structure, with each  layer being a function of the layer that preceded it.
In this structure, the first layer is given by  h(1) = g(1)  W(1)x b+ (1)   , (6.40)  the second layer is given by  h (2) = g(2)  W (2)h(1) + b(2)   , (6.41)  and so on.
DEEP FEEDFORWARD NETWORKS  In these chain-based architectures, the main architectural considerations are to choose the depth of the network and the width of each layer.
Deeper networks often are able to use far fewer units per layer and far fewer parameters and often generalize to the test set, but are also often harder to optimize.
The ideal network architecture for a task must be found via experimentation guided by monitoring the validation set error.
6.4.1 Universal Approximation Properties and Depth  A linear model, mapping from features to outputs via matrix multiplication, can by definition represent only linear functions.
It has the advantage of being easy to train because many loss functions result in convex optimization problems when applied to linear models.
At first glance, we might presume that learning a nonlinear function requires designing a specialized model family for the kind of nonlinearity we want to learn.
Specifically, the universal approximation theorem (Hornik et al., ; , ) states that a feedforward network with a linear output1989 Cybenko 1989 layer and at least one hidden layer with any “squashing” activation function (such as the logistic sigmoid activation function) can approximate any Borel measurable function from one finite-dimensional space to another with any desired non-zero amount of error, provided that the network is given enough hidden units.
The derivatives of the feedforward network can also approximate the derivatives of the function arbitrarily well ( , ).
1990 is beyond the scope of this book; for our purposes it suffices to say that any continuous function on a closed and bounded subset of Rn is Borel measurable and therefore may be approximated by a neural network.
A neural network may  also approximate any function mapping from any finite dimensional discrete space to another.
While the original theorems were first stated in terms of units with activation functions that saturate both for very negative and for very positive arguments, universal approximation theorems have also been proved for a wider class of activation functions, which includes the now commonly used rectified linear unit ( , ).Leshno et al.
1993  The universal approximation theorem means that regardless of what function we are trying to learn, we know that a large MLP will be able to represent this function.
DEEP FEEDFORWARD NETWORKS  may not be able to find the value of the parameters that corresponds to the desired function.
Recall from section that the “no free lunch” theorem shows that5.2.1 there is no universally superior machine learning algorithm.
Feedforward networks provide a universal system for representing functions, in the sense that, given a function, there exists a feedforward network that approximates the function.
There is no universal procedure for examining a training set of specific examples and choosing a function that will generalize to points not in the training set.
The universal approximation theorem says that there exists a network large enough to achieve any degree of accuracy we desire, but the theorem does not say how large this network will be.
( ) provides some bounds on theBarron 1993 size of a single-layer network needed to approximate a broad class of functions.
Unfortunately, in the worse case, an exponential number of hidden units (possibly with one hidden unit corresponding to each input configuration that needs to be distinguished) may be required.
This is easiest to see in the binary case: the number of possible binary functions on vectors v ∈ {0, 1}n is 22n and selecting one such function requires 2n bits, which will in general require O(2n) degrees of freedom.
In summary, a feedforward network with a single layer is sufficient to represent  any function, but the layer may be infeasibly large and may fail to learn and generalize correctly.
In many circumstances, using deeper models can reduce the number of units required to represent the desired function and can reduce the amount of generalization error.
There exist families of functions which can be approximated efficiently by an architecture with depth greater than some value d, but which require a much larger model if depth is restricted to be less than or equal to d. In many cases, the number of hidden units required by the shallow model is exponential in n. Such results were first proved for models that do not resemble the continuous, differentiable neural networks used for machine learning, but have since been extended to these models.
LaterHåstad 1986  work extended these results to linear threshold units with non-negative weights ( , ; , ), and then to networks withHåstad and Goldmann 1991 Hajnal et al.
1993 that shallow networks with a broad family of non-polynomial activation functions, including rectified linear units, have universal approximation properties, but these results do not address the questions of depth or efficiency—they specify only that a sufficiently wide rectifier network could represent any function.
DEEP FEEDFORWARD NETWORKS  ( ) showed that functions representable with a deep rectifier net can require2014 an exponential number of hidden units with a shallow (one hidden layer) network.
More precisely, they showed that piecewise linear networks (which can be obtained from rectifier nonlinearities or maxout units) can represent functions with a number of regions that is exponential in the depth of the network.
Figure illustrates how6.5 a network with absolute value rectification creates mirror images of the function computed on top of some hidden unit, with respect to the input of that hidden unit.
Each hidden unit specifies where to fold the input space in order to create  mirror responses (on both sides of the absolute value nonlinearity).
By composing these folding operations, we obtain an exponentially large number of piecewise linear regions which can capture all kinds of regular (e.g., repeating) patterns.
Figure 6.5: An intuitive, geometric explanation of the exponential advantage of deeper rectifier networks formally by ( ).Montufar et al.
2014 (Left)An absolute value rectification unit has the same output for every pair of mirror points in its input.
A function computed on top of that unit (the green decision surface) will be a mirror image of a simpler pattern across that axis of symmetry.
Another repeating pattern can(Right) be folded on top of the first (by another downstream unit) to obtain another symmetry (which is now repeated four times, with two hidden layers).
2014 number of linear regions carved out by a deep rectifier network with d inputs, depth , and units per hidden layer, isl n  O   n  d  d l( −1) nd    , (6.42)  i.e., exponential in the depth .
In the case of maxout networks with filters perl k unit, the number of linear regions is  O  k( 1)+l− d   .
DEEP FEEDFORWARD NETWORKS  Of course, there is no guarantee that the kinds of functions we want to learn in applications of machine learning (and in particular for AI) share such a property.
Any time we choose a specific machine learning algorithm, we are implicitly stating some set of prior beliefs we have about what kind of function the algorithm should learn.
Choosing a deep model encodes a very general belief that the function we want to learn should involve composition of several simpler functions.
This can be interpreted from a representation learning point of view as saying that we believe  the learning problem consists of discovering a set of underlying factors of variation that can in turn be described in terms of other, simpler underlying factors of variation.
Alternately, we can interpret the use of a deep architecture as expressing a belief that the function we want to learn is a computer program consisting of multiple steps, where each step makes use of the previous step’s output.
These intermediate outputs are not necessarily factors of variation, but can instead be analogous to counters or pointers that the network uses to organize its internal processing.
Empirically, greater depth does seem to result in better generalization for a wide variety of tasks ( , ; , ; , ;Bengio et al.
2009 Bengio 2009 Mesnil 2011 Ciresan 2012 Krizhevsky 2012 Sermanetet al., ; et al., ; et al., ; et al., 2013 Farabet 2013 Couprie 2013 Kahou 2013 Goodfellow; et al., ; et al., ; et al., ;  et al.
This suggests that using deep architectures does indeed express a useful prior over the space of functions the model learns.
6.4.2 Other Architectural Considerations  So far we have described neural networks as being simple chains of layers, with the main considerations being the depth of the network and the width of each layer.
Specialized architectures for computer vision called convolutional networks are described in chapter .
Feedforward networks may also be generalized to the9 recurrent neural networks for sequence processing, described in chapter , which10 have their own architectural considerations.
In general, the layers need not be connected in a chain, even though this is the most common practice.
Many architectures build a main chain but then add extra architectural features to it, such as skip connections going from layer i to layer i+ 2 or higher.
These skip connections make it easier for the gradient to flow from output layers to layers nearer the input.
T es t a cc u ra cy (p er ce n t)  Figure 6.6: Empirical results showing that deeper networks generalize better when used to transcribe multi-digit numbers from photographs of addresses.
See2014d figure for a control experiment demonstrating that other increases to the model size6.7 do not yield the same effect.
Another key consideration of architecture design is exactly how to connect a pair of layers to each other.
In the default neural network layer described by a linear transformation via a matrix W , every input unit is connected to every output unit.
Many specialized networks in the chapters ahead have fewer connections, so that each unit in the input layer is connected to only a small subset of units in the output layer.
These strategies for reducing the number of connections reduce  the number of parameters and the amount of computation required to evaluate the network, but are often highly problem-dependent.
For example, convolutional networks, described in chapter , use specialized patterns of sparse connections9 that are very effective for computer vision problems.
In this chapter, it is difficult to give much more specific advice concerning the architecture of a generic neural network.
Subsequent chapters develop the particular architectural strategies that have been found to work well for different application domains.
Number of parameters ×108  91  92  93  94  95  96  97  T es t a cc u ra cy (p er ce n t) 3, convolutional  3, fully connected  11, convolutional  Figure 6.7: Deeper models tend to perform better.
( ) shows that increasing the number of parameters in layers of convolutional networks without increasing their depth is not nearly as effective at increasing test set performance.
The legend indicates the depth of network used to make each curve and whether the curve represents variation in the size of the convolutional or the fully connected layers.
We observe that shallow models in this context overfit at around 20 million parameters while deep ones can benefit from having over 60 million.
This suggests that using a deep model expresses a useful preference over the space of functions the model can learn.
Specifically, it expresses a belief that the function should consist of many simpler functions composed together.
This could result either in learning a representation that is composed in turn of simpler representations (e.g., corners defined in terms of edges) or in learning a program with sequentially dependent steps (e.g., first locate a set of objects, then segment them from each other, then recognize them).
DEEP FEEDFORWARD NETWORKS  6.5 Back-Propagation and Other Differentiation Algo-  rithms  When we use a feedforward neural network to accept an input x and produce an output ŷ, information flows forward through the network.
The inputs x provide the initial information that then propagates up to the hidden units at each layer and finally produces ŷ .
1986a  backprop, allows the information from the cost to then flow backwards through the network, in order to compute the gradient.
Computing an analytical expression for the gradient is straightforward, but numerically evaluating such an expression can be computationally expensive.
The term back-propagation is often misunderstood as meaning the whole learning algorithm for multi-layer neural networks.
Actually, back-propagation refers only to the method for computing the gradient, while another algorithm, such as stochastic gradient descent, is used to perform learning using this gradient.
Furthermore, back-propagation is often misunderstood as being specific to multi- layer neural networks, but in principle it can compute derivatives of any function  (for some functions, the correct response is to report that the derivative of the function is undefined).
Specifically, we will describe how to compute the gradient ∇xf(x y, ) for an arbitrary function f , wherex is a set of variables whose derivatives are desired, and y is an additional set of variables that are inputs to the function but whose derivatives are not required.
In learning algorithms, the gradient we most often require is the gradient of the cost function with respect to the parameters,  ∇θJ(θ).
Many machine learning tasks involve computing other derivatives, either as part of the learning process, or to analyze the learned model.
The back- propagation algorithm can be applied to these tasks as well, and is not restricted to computing the gradient of the cost function with respect to the parameters.
The idea of computing derivatives by propagating information through a network is  very general, and can be used to compute values such as the Jacobian of a function f with multiple outputs.
We restrict our description here to the most commonly used case where has a single output.f  204    CHAPTER 6.
DEEP FEEDFORWARD NETWORKS  6.5.1 Computational Graphs  So far we have discussed neural networks with a relatively informal graph language.
To describe the back-propagation algorithm more precisely, it is helpful to have a more precise language.computational graph  Many ways of formalizing computation as graphs are possible.
Functions more complicated than the operations in this set may be described by composing many operations together.
This does not lose generality because the output variable can have multiple entries, such as a vector.
Software implementations of back-propagation usually support operations with multiple outputs, but we avoid this case in our description because it introduces many extra details that are not important to conceptual understanding.
If a variable y is computed by applying an operation to a variable x, then we draw a directed edge from x to y .
We sometimes annotate the output node with the name of the operation applied, and other times omit this label when the operation is clear from context.
Examples of computational graphs are shown in figure .6.8  6.5.2 Chain Rule of Calculus  The chain rule of calculus (not to be confused with the chain rule of probability) is used to compute the derivatives of functions formed by composing other functions whose derivatives are known.
Back-propagation is an algorithm that computes the chain rule, with a specific order of operations that is highly efficient.
Let x be a real number, and let f and g both be functions mapping from a real number to a real number.
DEEP FEEDFORWARD NETWORKS  zz  xx yy  (a)  ×  xx ww  (b)  u(1)u(1)  dot  bb  u(2)u(2)  +  ŷ̂y  σ  (c)  XX WW  U (1)U (1)  matmul  bb  U (2)U (2)  +  HH  relu  xx ww  (d)  ŷ̂y  dot  λλ  u(1)u(1)  sqr  u(2)u(2)  sum  u(3)u(3)  ×  Figure 6.8: Examples of computational graphs.
Some of the intermediate expressions do not have names in the algebraic expression but need names in the graph.
The(c) computational graph for the expression H = max{0,XW + b}, which computes a design matrix of rectified linear unit activations H given a design matrix containing a minibatch of inputs X .
Examples a–c applied at most one operation to each variable, but it(d) is possible to apply more than one operation.
Here we show a computation graph that applies more than one operation to the weights w of a linear regression model.
(6.45)  In vector notation, this may be equivalently written as  ∇xz =  ∂y  ∂x   ∇y z, (6.46)  where ∂y∂x is the Jacobian matrix of .n m× g From this we see that the gradient of a variable x can be obtained by multiplying  a Jacobian matrix ∂y∂x by a gradient ∇yz.
The back-propagation algorithm consists of performing such a Jacobian-gradient product for each operation in the graph.
Usually we do not apply the back-propagation algorithm merely to vectors, but rather to tensors of arbitrary dimensionality.
We could imagine flattening each tensor into a vector before we run back-propagation, computing a vector-valued gradient, and then reshaping the gradient back into a tensor.
To denote the gradient of a value z with respect to a tensor X , we write∇Xz, just as if X were a vector.
The indices intoX now have multiple coordinates—for example, a 3-D tensor is indexed by three coordinates.
This is exactly the same as how for all possible integer indices i into a vector, (∇xz)i gives ∂z∂x i .
(6.47)  6.5.3 Recursively Applying the Chain Rule to Obtain Backprop  Using the chain rule, it is straightforward to write down an algebraic expression for the gradient of a scalar with respect to any node in the computational graph that produced that scalar.
Specifically, many subexpressions may be repeated several times within the overall expression for the gradient.
DEEP FEEDFORWARD NETWORKS  will need to choose whether to store these subexpressions or to recompute them several times.
For complicated graphs, there can be exponentially many of these wasted computations, making a naive implementation of the chain rule infeasible.
In other cases, computing the same subexpression twice could be a valid way to reduce memory consumption at the cost of higher runtime.
We first begin by a version of the back-propagation algorithm that specifies the  actual gradient computation directly (algorithm along with algorithm for the6.2 6.1 associated forward computation), in the order it will actually be done and according to the recursive application of chain rule.
One could either directly perform these computations or view the description of the algorithm as a symbolic specification of the computational graph for computing the back-propagation.
However, this formulation does not make explicit the manipulation and the construction of the symbolic graph that performs the gradient computation.
Such a formulation is presented below in section , with algorithm , where we also generalize to6.5.6 6.5 nodes that contain arbitrary tensors.
First consider a computational graph describing how to compute a single scalar  u( )n (say the loss on a training example).
This scalar is the quantity whose  gradient we want to obtain, with respect to the ni input nodes u (1) to u(ni).
In the application  of back-propagation to computing gradients for gradient descent over parameters, u( )n will be the cost associated with an example or a minibatch, while u(1) to u(ni)  correspond to the parameters of the model.
We will assume that the nodes of the graph have been ordered in such a way that we can compute their output one after the other, starting at u(ni+1) and going up to u( )n .
As defined in algorithm , each node6.1 u( )i is associated with an operation f ( )i and is computed by evaluating the function  u( )i = (f A( )i ) (6.48)  where A( )i is the set of all nodes that are parents of u ( )i .
In order to perform back-propagation, we can construct a computational graph that depends on G and adds to it an extra set of nodes.
These form a subgraph B with one node per node of G. Computation in B proceeds in exactly the reverse of the order of computation in G, and each node of B computes the derivative ∂u  ( )n  ∂u( )i associated with the forward graph node u ( )i .
DEEP FEEDFORWARD NETWORKS  Algorithm 6.1 A procedure that performs the computations mapping ni inputs u(1) to u (ni) to an output u( )n .
This defines a computational graph where each node computes numerical value u( )i by applying a function f ( )i to the set of arguments A ( )i that comprises the values of previous nodes u( )j , j < i, with j Pa∈ (u( )i ).
The input to the computational graph is the vector x, and is set into the first ni nodes u(1) to u(ni) .
, n do A ( )i ← {u( )j | ∈j Pa u( ( )i )} u( )i ← f ( )i (A( )i ) end for return u( )n  using the chain rule with respect to scalar output u( )n :  ∂u( )n  ∂u( )j =    i j Pa u: ∈ ( ( )i )  ∂u( )n  ∂u ( )i ∂u( )i  ∂u( )j (6.49)  as specified by algorithm .
The subgraph6.2 B contains exactly one edge for each edge from node u( )j to node u( )i of G. The edge from u( )j to u( )i is associated with the computation of ∂u  ( )i  ∂u( )j .
In addition, a dot product is performed for each node,  between the gradient already computed with respect to nodes u( )i that are children  of u( )j and the vector containing the partial derivatives ∂u ( )i  ∂u( )j for the same children  nodes u( )i .
To summarize, the amount of computation required for performing the back-propagation scales linearly with the number of edges in G, where the computation for each edge corresponds to computing a partial derivative (of one node with respect to one of its parents) as well as performing one multiplication and one addition.
Below, we generalize this analysis to tensor-valued nodes, which is just a way to group multiple scalar values in the same node and enable more  efficient implementations.
The back-propagation algorithm is designed to reduce the number of common subexpressions without regard to memory.
This can be seen from the fact that backprop (algorithm ) visits each edge from node6.2 u ( )j to node u( )i of  the graph exactly once in order to obtain the associated partial derivative ∂u ( )i  ∂u( )j .
DEEP FEEDFORWARD NETWORKS  Algorithm 6.2 Simplified version of the back-propagation algorithm for computing the derivatives of u( )n with respect to the variables in the graph.
This example is intended to further understanding by showing a simplified case where all variables are scalars, and we wish to compute the derivatives with respect to u(1), .
The computational cost of this algorithm is proportional to the number of edges in the graph, assuming that the partial derivative associated with each edge requires a constant time.
Each ∂u ( )i  ∂u( )j is a function of the parents u( )j of u ( )i , thus  linking the nodes of the forward graph to those added for the back-propagation graph.
Run forward propagation (algorithm for this example) to obtain the activa-6.1 tions of the network Initialize grad_table, a data structure that will store the derivatives that have been computed.
grad table_ [u( )n ] 1← for doj n= − 1 down to 1 The next line computes ∂u  ( )n  ∂u( )j =  i j Pa u: ∈ ( ( )i )  ∂u( )n  ∂u( )i ∂u ( )i  ∂u( )j using stored values:  grad table_ [u( )j ] ←  i j Pa u: ∈ ( ( )i ) grad table_ [u  ( )i ] ∂u ( )i  ∂u( )j  end for return {grad table_ [u( )i ] = 1| i , .
However, other algorithms may be able to avoid more subexpressions by performing simplifications on the computational graph, or may be able to conserve memory by recomputing rather than storing some subexpressions.
6.5.4 Back-Propagation Computation in Fully-Connected MLP  To clarify the above definition of the back-propagation computation, let us consider the specific graph associated with a fully-connected multi-layer MLP.
Algorithm first shows the forward propagation, which maps parameters to6.3 the supervised loss L(ŷ y, ) associated with a single (input,target) training example ( )x y, , with ŷ the output of the neural network when is provided in input.x  Algorithm  then shows the corresponding computation to be done for6.4  210    CHAPTER 6.
DEEP FEEDFORWARD NETWORKS  zz  xx  yy  ww  f  f  f  Figure 6.9: A computational graph that results in repeated subexpressions when computing the gradient.
We use the same function f : R R→ as the operation that we apply at every step of a chain: x = f(w), y = f(x), z = f(y).
To compute ∂z  ∂w , we apply equation and obtain:6.44  ∂z  ∂w (6.50)  = ∂z  ∂y  ∂y  ∂x  ∂x  ∂w (6.51)  =f ( )y f ( )x f ( )w (6.52)  =f ( ( ( )))f f w f ( ( ))f w f( )w (6.53)  Equation suggests an implementation in which we compute the value of6.52 f (w) only once and store it in the variable x.
An alternative approach is suggested by equation , where the subexpression6.53 f(w) appears more than once.
When the memory required to store the value of these expressions is low, the back-propagation approach of equation is clearly preferable because of its reduced6.52 runtime.
However, equation is also a valid implementation of the chain rule, and is6.53 useful when memory is limited.
Algorithms and are demonstrations that are chosen to be simple and6.3 6.4 straightforward to understand.
Modern software implementations are based on the generalized form of back- propagation described in section below, which can accommodate any compu-6.5.6 tational graph by explicitly manipulating a data structure for representing symbolic computation.
Algorithm 6.3 Forward propagation through a typical deep neural network and the computation of the cost function.
The loss L(ŷ y, ) depends on the output ŷ and on the target y (see section for examples of loss functions).
To6.2.1.1 obtain the total cost J , the loss may be added to a regularizer Ω(θ ), where θ contains all the parameters (weights and biases).
See section for a more realistic demonstration.6.5.7  Require: Network depth, l Require: W ( )i , i , .
, l ,∈ {1 } the bias parameters of the model Require: x, the input to process Require: y, the target output h(0) = x for dok , .
, l= 1 a( )k = b( )k +W ( )k h( 1)k−  h( )k = (f a( )k ) end for  ŷ h= ( )l  J L= (ŷ y, ) + Ω( )λ θ  6.5.5 Symbol-to-Symbol Derivatives  Algebraic expressions and computational graphs both operate on symbols, or variables that do not have specific values.
DEEP FEEDFORWARD NETWORKS  Algorithm 6.4 Backward computation for the deep neural network of algo- rithm , which uses in addition to the input6.3 x a target y.
This computation yields the gradients on the activations a( )k for each layer k , starting from the output layer and going backwards to the first hidden layer.
From these gradients, which can be interpreted as an indication of how each layer’s output should change to reduce error, one can obtain the gradient on the parameters of each layer.
The gradients on weights and biases can be immediately used as part of a stochas- tic gradient update (performing the update right after the gradients have been computed) or used with other gradient-based optimization methods.
After the forward computation, compute the gradient on the output layer:  g ← ∇ŷJ = ∇ŷL(ŷ y, ) for dok l, l , .
,= − 1 1 Convert the gradient on the layer’s output into a gradient into the pre- nonlinearity activation (element-wise multiplication if is element-wise):f g ← ∇  a( )k J f= g  (a( )k )  Compute gradients on weights and biases (including the regularization term, where needed): ∇  b( )k J λ= +g ∇  b( )k Ω( )θ  ∇ W ( )k  J = g h( 1)k−  + λ∇ W ( )k  Ω( )θ Propagate the gradients w.r.t.
the next lower-level hidden layer’s activations:  g ← ∇ h( 1)k− J = W  ( )k  g end for  213    CHAPTER 6.
DEEP FEEDFORWARD NETWORKS  zz  xx  yy  ww  f  f  f  zz  xx  yy  ww  f  f  f  dz  dy  dz  dy  f   dy  dx  dy  dx  f  dz  dx  dz  dx  ×  dx  dw  dx  dw  f  dz  dw  dz  dw  ×  Figure 6.10: An example of the symbol-to-symbol approach to computing derivatives.
In this approach, the back-propagation algorithm does not need to ever access any actual specific numeric values.
We run the back-propagation algorithm, instructing(Right) it to construct the graph for the expression corresponding to dz  dw .
The purpose is only to illustrate what the desired result is: a computational graph with a symbolic description of the derivative.
Some approaches to back-propagation take a computational graph and a set of numerical values for the inputs to the graph, then return a set of numerical values describing the gradient at those input values.
2011b Jia 2013  Another approach is to take a computational graph and add additional nodes to the graph that provide a symbolic description of the desired derivatives.
The primary advantage of this approach is that6.10 the derivatives are described in the same language as the original expression.
Because the derivatives are just another computational graph, it is possible to run back-propagation again, differentiating the derivatives in order to obtain higher derivatives.
Computation of higher-order derivatives is described in section .6.5.10  We will use the latter approach and describe the back-propagation algorithm in  214    CHAPTER 6.
Instead, a generic graph evaluation engine can evaluate every node as soon as its parents’ values are available.
The symbol-to-number approach can be understood as performing exactly the same computations as are done in the graph built by the  symbol-to-symbol approach.
To compute the gradient of some scalar z with respect to one of its ancestors x in the graph, we begin by observing that the gradient with respect to z is given by dzdz = 1.
We can then compute the gradient with respect to each parent of z in the graph by multiplying the current gradient by the Jacobian of the operation that produced z.
We continue multiplying by Jacobians traveling backwards through the graph in this way until  we reach x.
For any node that may be reached by going backwards from z through two or more paths, we simply sum the gradients arriving from different paths at that node.
To achieve maximum generality, we describe this variable as being a tensor V. Tensor can in general have any number of dimensions.
We assume that each variable is associated with the following subroutines:V  • get operation_ (V): This returns the operation that computes V, repre- sented by the edges coming into V in the computational graph.
For example, there may be a Python or C++ class representing the matrix multiplication operation, and the get_operation function.
• get consumers_ (V,G ): This returns the list of variables that are children of V in the computational graph .G  • Gget inputs_ (V, ): This returns the list of variables that are parents of V in the computational graph .G  215    CHAPTER 6.
This bprop  operation can compute a Jacobian-vector product as described by equation .6.47 This is how the back-propagation algorithm is able to achieve great generality.
Each operation is responsible for knowing how to back-propagate through the edges in the graph that it participates in.
Suppose that the gradient of a scalar z with respect to C is given by G. The matrix multiplication operation is responsible for defining two back-propagation rules, one for each of its input  arguments.
If we call the bprop method to request the gradient with respect to A given that the gradient on the output is G, then the bprop method of the matrix multiplication operation must state that the gradient with respect to A is given by GB.
Likewise, if we call the bprop method to request the gradient with respect to B , then the matrix operation is responsible for implementing the bprop method and specifying that the desired gradient is given by AG.
( ) i) Gi, (6.54)  which is just an implementation of the chain rule as expressed in equation .6.47 Here, inputs is a list of inputs that are supplied to the operation, op.f is the mathematical function that the operation implements, X is the input whose gradient we wish to compute, and is the gradient on the output of the operation.G  The op.bprop method should always pretend that all of its inputs are distinct from each other, even if they are not.
For example, if the mul operator is passed two copies of x to compute x2, the op.bprop method should still return x as the derivative with respect to both inputs.
The back-propagation algorithm will later add both of these arguments together to obtain 2x, which is the correct total derivative on .x  Software implementations of back-propagation usually provide both the opera-  tions and their bprop methods, so that users of deep learning software libraries are able to back-propagate through graphs built using common operations like matrix multiplication, exponents, logarithms, and so on.
Software engineers who build a new implementation of back-propagation or advanced users who need to add their own operation to an existing library must usually derive the op.bprop method for any new operations manually.
Require: G, the computational graph Require: z, the variable to be differentiated Let G be G pruned to contain only nodes that are ancestors of z and descendents of nodes in .T Initialize , a data structure associating tensors to their gradientsgrad_table  grad table_ [ ] 1z ← for doV in T  build grad_ (V, ,G G , grad table_ ) end for Return restricted tograd_table T  In section , we explained that back-propagation was developed in order to6.5.2 avoid computing the same subexpression in the chain rule multiple times.
If we assume that each operation evaluation has roughly the same cost, then we may analyze the computational cost in terms of the number  of operations executed.
Keep in mind here that we refer to an operation as the fundamental unit of our computational graph, which might actually consist of very many arithmetic operations (for example, we might have a graph that treats matrix multiplication as a single operation).
Computing a gradient in a graph with n nodes will never execute more than O(n2) operations or store the output of more than O(n2) operations.
Here we are counting operations in the computational graph, not individual operations executed by the underlying hardware, so it is important to remember that the runtime of each operation may be highly variable.
For example, multiplying two matrices that each contain millions of entries might correspond to a single operation in the graph.
We can see that computing the gradient requires as most O(n2) operations because the forward propagation stage will at worst execute  all n nodes in the original graph (depending on which values we want to compute, we may not need to execute the entire graph).
The back-propagation algorithm adds one Jacobian-vector product, which should be expressed with O(1) nodes, per edge in the original graph.
DEEP FEEDFORWARD NETWORKS  Algorithm 6.6 The inner loop subroutine build grad_ (V, ,G G , grad table_ ) of the back-propagation algorithm, called by the back-propagation algorithm defined in algorithm .6.5  Require: V, the variable whose gradient should be added to and .G grad_table Require: G, the graph to modify.
Require: G , the restriction of to nodes that participate in the gradient.G Require: grad_table, a data structure mapping nodes to their gradients if thenV is in grad_table Return _grad table[ ]V end if i ← 1 for C Vin _get consumers( ,G) do op get operation← _ ( )C D C← build grad_ ( , ,G G  , grad table_ ) G ( )i ← Gop bprop get inputs.
( _ (C,  ) ), ,V D i i← + 1 end for  G ←  iG  ( )i  grad table_ [ ] = V G Insert and the operations creating it intoG G Return G  roughly chain-structured, causing back-propagation to have O(n) cost.
This potentially exponential cost can be seen by expanding and rewriting the recursive chain rule (equation ) non-recursively:6.49  ∂u( )n  ∂u( )j =    path (u(π1),u(π2),...,u(πt) ), fromπ1= toj πt=n  t  k=2  ∂u(πk)  ∂u(πk−1 ) .
(6.55)  Since the number of paths from node j to node n can grow exponentially in the length of these paths, the number of terms in the above sum, which is the number of such paths, can grow exponentially with the depth of the forward propagation graph.
This large cost would be incurred because the same computation for ∂u( )i  ∂u( )j would be redone many times.
To avoid such recomputation, we can think  of back-propagation as a table-filling algorithm that takes advantage of storing  intermediate results ∂u ( )n  ∂u( )i .
This table-filling strategy is sometimes called .dynamic programming  6.5.7 Example: Back-Propagation for MLP Training  As an example, we walk through the back-propagation algorithm as it is used to train a multilayer perceptron.
Specifically, we use a minibatch of examples from the training set formatted as a design matrix X and a vector of associated class labels y.
We assume that our graph language includes a cross_entropy  operation that computes the cross-entropy between the targets y and the probability distribution defined by these unnormalized log probabilities.
The total cost  J J= MLE + λ       i,j   W (1) i,j  2 +   i,j   W (2) i,j  2    (6.56)  consists of the cross-entropy and a weight decay term with coefficient λ .
The computational graph is illustrated in figure .6.11  The computational graph for the gradient of this example is large enough that it would be tedious to draw or to read.
This demonstrates one of the benefits of the back-propagation algorithm, which is that it can automatically generate gradients that would be straightforward but tedious for a software engineer to derive manually.
We can roughly trace out the behavior of the back-propagation algorithm by looking at the forward propagation graph in figure .
There are two different paths leading  backward from J to the weights: one through the cross-entropy cost, and one through the weight decay cost.
The weight decay cost is relatively simple; it will always contribute 2λW ( )i to the gradient on W ( )i .
DEEP FEEDFORWARD NETWORKS  XX W (1)W (1)  U (1)U (1)  matmul  HH  relu  U (3)U (3)  sqr u(4)u(4)  sum  λλu(7)u(7)W (2)W (2)  U (2)U (2)  matmul  yy  JMLEJMLE  cross_entropy  U (5)U (5)  sqr u(6)u(6)  sum  u(8)u(8)  JJ  +  ×  +  Figure 6.11: The computational graph used to compute the cost used to train our example of a single-layer MLP using the cross-entropy loss and weight decay.
Let G be the gradient on the unnormalized log probabilities U(2) provided by the cross_entropy operation.
On the shorter branch, it adds HG to the gradient on W (2) , using the back-propagation rule for the second argument to the matrix multiplication operation.
First, the back-propagation algorithm computes ∇HJ =GW (2) using the back-propagation rule for the first argument to the matrix multiplication operation.
Next, the relu operation uses its back- propagation rule to zero out components of the gradient corresponding to entries of U (1) that were less than .
The last step of the back-propagation algorithm is to use the back-propagation rule for the second argument of the operation to addmatmul XG to the gradient on W (1).
After these gradients have been computed, it is the responsibility of the gradient descent algorithm, or another optimization algorithm, to use these gradients to update the parameters.
DEEP FEEDFORWARD NETWORKS  matrix, resulting in O(w) multiply-adds, where w is the number of weights.
During the backward propagation stage, we multiply by the transpose of each weight matrix, which has the same computational cost.
The main memory cost of the algorithm is that we need to store the input to the nonlinearity of the hidden layer.
This value is stored from the time it is computed until the backward pass has returned to the same point.
The memory cost is thus O(mnh), where m is the number of examples in the minibatch and nh is the number of hidden units.
6.5.8 Complications  Our description of the back-propagation algorithm here is simpler than the imple- mentations actually used in practice.
As noted above, we have restricted the definition of an operation to be a function that returns a single tensor.
For example, if we wish to compute both the maximum value in a tensor and the index of that value, it is best to compute both in a single pass through memory, so it is most efficient to  implement this procedure as a single operation with two outputs.
In the naive approach, each of these tensors would be computed separately, then all of them would be added in a second step.
The naive approach has an overly high memory bottleneck that can be avoided by maintaining a single buffer and adding each value to that buffer as it is computed.
Real-world implementations of back-propagation also need to handle various data types, such as 32-bit floating point, 64-bit floating point, and integer values.
Some operations have undefined gradients, and it is important to track these cases and determine whether the gradient requested by the user is undefined.
These technicalities are not insurmountable, and this chapter has described the key intellectual tools needed to compute derivatives, but it is important to be aware that many more subtleties exist.
6.5.9 Differentiation outside the Deep Learning Community  The deep learning community has been somewhat isolated from the broader computer science community and has largely developed its own cultural attitudes  221    CHAPTER 6.
More generally, the field of automatic differentiation is concerned with how to compute derivatives algorithmically.
In general, determining the order of evaluation that results in the lowest computational cost is a difficult problem.
Finding the optimal sequence of operations to compute the gradient is NP-complete ( , ),Naumann 2008  in the sense that it may require simplifying algebraic expressions into their least expensive form.
Suppose we define  qi = exp(zi) i exp(zi)  , (6.57)  where we build the softmax function out of exponentiation, summation and division operations, and construct a cross-entropy loss J = −   i pi log qi.
A human  mathematician can observe that the derivative of J with respect to zi takes a very  simple form: qi − pi.
The back-propagation algorithm is not capable of simplifying the gradient this way, and will instead explicitly propagate gradients through all of the logarithm and exponentiation operations in the original graph.
2012 perform some kinds of algebraic substitution to improve over the graph proposed by the pure back-propagation algorithm.
When the forward graph G has a single output node and each partial derivative ∂u( )i  ∂u( )j can be computed with a constant amount of computation, back-propagation  guarantees that the number of computations for the gradient computation is of the same order as the number of computations for the forward computation: this  can be seen in algorithm because each local partial derivative6.2 ∂u ( )i  ∂u( )j needs to  be computed only once along with an associated multiplication and addition for the recursive chain-rule formulation (equation ).
However, it can potentially be reduced by simplifying the computational graph constructed by back-propagation, and this is an NP-complete task.
Implementations such as Theano and TensorFlow use heuristics based on matching known simplification patterns in order to iteratively attempt to simplify the graph.
We defined back-propagation only for the computation of a gradient of a scalar output but back-propagation can be extended to compute a Jacobian (either of k different scalar nodes in the graph, or of a tensor-valued node containing k values).
DEEP FEEDFORWARD NETWORKS  each scalar internal node in the original forward graph, the naive implementation computes k gradients instead of a single gradient.
When the number of outputs of the graph is larger than the number of inputs, it is sometimes preferable to use another form of automatic differentiation called forward mode accumulation.
Forward mode computation has been proposed for obtaining real-time computation of gradients in recurrent networks, for example ( , ).
ThisWilliams and Zipser 1989 also avoids the need to store the values and gradients for the whole graph, trading off computational efficiency for memory.
The relationship between forward mode  and backward mode is analogous to the relationship between left-multiplying versus right-multiplying a sequence of matrices, such as  ABCD, (6.58)  where the matrices can be thought of as Jacobian matrices.
For example, if D is a column vector while A has many rows, this corresponds to a graph with a single output and many inputs, and starting the multiplications from the end and going backwards only requires matrix-vector products.
Instead, starting to multiply from the left would involve a series of matrix-matrix products, which makes the whole computation much more expensive.
However, if A has fewer rows than D has columns, it is cheaper to run the multiplications left-to-right, corresponding to the forward mode.
In many communities outside of machine learning, it is more common to im-  plement differentiation software that acts directly on traditional programming language code, such as Python or C code, and automatically generates programs that differentiate functions written in these languages.
In the deep learning com- munity, computational graphs are usually represented by explicit data structures created by specialized libraries.
The specialized approach has the drawback of requiring the library developer to define the bprop methods for every operation and limiting the user of the library to only those operations that have been defined.
However, the specialized approach also has the benefit of allowing customized back-propagation rules to be developed for each operation, allowing the developer to improve speed or stability in non-obvious ways that an automatic procedure would presumably be unable to replicate.
Back-propagation is therefore not the only way or the optimal way of computing the gradient, but it is a very practical method that continues to serve the deep learning community very well.
In the future, differentiation technology for deep networks may improve as deep learning practitioners become more aware of advances in the broader field of automatic differentiation.
DEEP FEEDFORWARD NETWORKS  6.5.10 Higher-Order Derivatives  Some software frameworks support the use of higher-order derivatives.
These libraries use the same kind of data structure to describe the expressions for derivatives as they use to describe the original function being differentiated.
In the context of deep learning, it is rare to compute a single second derivative of a scalar function.
In typical deep learning applications, n will be the number of parameters in the model, which could easily number in the billions.
Instead of explicitly computing the Hessian, the typical deep learning approach  is to use Krylov methods.
Krylov methods are a set of iterative techniques for performing various operations like approximately inverting a matrix or finding approximations to its eigenvectors or eigenvalues, without using any operation other than matrix-vector products.
In order to use Krylov methods on the Hessian, we only need to be able to compute the product between the Hessian matrix H and an arbitrary vector v. A straightforward technique ( , ) for doing so is to computeChristianson 1992  Hv = ∇x  (∇xf x( )) v   .
(6.59)  Both of the gradient computations in this expression may be computed automati- cally by the appropriate software library.
Note that the outer gradient expression  takes the gradient of a function of the inner gradient expression.
If v is itself a vector produced by a computational graph, it is important to specify that the automatic differentiation software should not differentiate through the graph that produced .v  While computing the Hessian is usually not advisable, it is possible to do with Hessian vector products.
6.6 Historical Notes  Feedforward networks can be seen as efficient nonlinear function approximators based on using gradient descent to minimize the error in a function approximation.
DEEP FEEDFORWARD NETWORKS  From this point of view, the modern feedforward network is the culmination of centuries of progress on the general function approximation task.
The chain rule that underlies the back-propagation algorithm was invented in the 17th century ( , ; , ).
Calculus and algebra haveLeibniz 1676 L’Hôpital 1696 long been used to solve optimization problems in closed form, but gradient descent was not introduced as a technique for iteratively approximating the solution to optimization problems until the 19th century (Cauchy 1847, ).
Beginning in the 1940s, these function approximation techniques were used to  motivate machine learning models such as the perceptron.
Critics including Marvin Minsky pointed out several of the flaws of the linear model family, such as its inability to learn the XOR function, which led to a backlash against the entire neural network approach.
Learning nonlinear functions required the development of a multilayer per- ceptron and a means of computing the gradient through such a model.
Efficient applications of the chain rule based on dynamic programming began to appear in the 1960s and 1970s, mostly for control applications ( , ;Kelley 1960 Bryson and Denham 1961 Dreyfus 1962 Bryson and Ho 1969 Dreyfus 1973, ; , ; , ; , ) but also for sensitivity analysis ( , ).Linnainmaa 1976 Werbos 1981( ) proposed applying these techniques to training artificial neural networks.
The idea was finally developed  in practice after being independently rediscovered in different ways ( , ;LeCun 1985 Parker 1985 Rumelhart 1986a, ; et al., ).
The book Parallel Distributed Pro- cessing presented the results of some of the first successful experiments with back-propagation in a chapter ( , ) that contributed greatlyRumelhart et al.
1986b to the popularization of back-propagation and initiated a very active period of research in multi-layer neural networks.
However, the ideas put forward by the authors of that book and in particular by Rumelhart and Hinton go much beyond back-propagation.
They include crucial ideas about the possible computational implementation of several central aspects of cognition and learning, which came under the name of “connectionism” because of the importance this school of thought places on the connections between neurons as the locus of learning and memory.
In particular, these ideas include the notion of distributed representation (Hinton et al., ).1986  Following the success of back-propagation, neural network research gained pop- ularity and reached a peak in the early 1990s.
Afterwards, other machine learning techniques became more popular until the modern deep learning renaissance that began in 2006.
Most of the improvement in neural network performance from 1986 to 2015 can be attributed to two factors.
First, larger datasets have reduced the degree to which statistical generalization is a challenge for neural networks.
Second, neural networks have become much larger, due to more powerful computers, and better software infrastructure.
However, a small number of algorithmic changes have improved the performance of neural networks noticeably.
One of these algorithmic changes was the replacement of mean squared error  with the cross-entropy family of loss functions.
Mean squared error was popular in the 1980s and 1990s, but was gradually replaced by cross-entropy losses and the principle of maximum likelihood as ideas spread between the statistics community and the machine learning community.
The use of cross-entropy losses greatly improved the performance of models with sigmoid and softmax outputs, which had previously suffered from saturation and slow learning when using the mean squared error loss.
The other major algorithmic change that has greatly improved the performance of feedforward networks was the replacement of sigmoid hidden units with piecewise linear hidden units, such as rectified linear units.
Rectification using the max{0, z} function was introduced in early neural network models and dates back at least  as far as the Cognitron and Neocognitron (Fukushima 1975 1980, , ).
These early models did not use rectified linear units, but instead applied rectification to nonlinear functions.
Despite the early popularity of rectification, rectification was largely replaced by sigmoids in the 1980s, perhaps because sigmoids perform better when neural networks are very small.
As of the early 2000s, rectified linear units were avoided due to a somewhat superstitious belief that activation functions with non-differentiable points must be avoided.
( ) observed that “using a rectifying nonlinearity is the single most important factor in improving the performance of a recognition system” among several different factors of neural network architecture design.
Random weights are sufficient to propagate useful information through a rectified linear network, allowing the classifier layer at the top to learn how to map different feature vectors to class identities.
When more data is available, learning begins to extract enough useful knowledge to exceed the performance of randomly chosen parameters.
2011a showed that learning is far easier in deep rectified linear networks than in deep networks that have curvature or two-sided saturation in their activation functions.
DEEP FEEDFORWARD NETWORKS  Rectified linear units are also of historical interest because they show that neuroscience has continued to have an influence on the development of deep learning algorithms.
The half-rectifying nonlinearity was intended to capture these properties of biological neurons: 1) For some inputs, biological neurons are completely inactive.
3) Most of the time, biological neurons operate in the regime where they are inactive (i.e., they should have sparse activations).
When the modern resurgence of deep learning began in 2006, feedforward networks continued to have a bad reputation.
From about 2006-2012, it was widely believed that feedforward networks would not perform well unless they were assisted by other models, such as probabilistic models.
Today, it is now known that with the right resources and engineering practices, feedforward networks perform very well.
Today, gradient-based learning in feedforward networks is used as a tool to develop probabilistic models, such as the variational autoencoder and generative adversarial networks, described in chapter .
Rather than being viewed as an unreliable20 technology that must be supported by other techniques, gradient-based learning in feedforward networks has been viewed since 2012 as a powerful technology that may be applied to many other machine learning tasks.
In 2006, the community  used unsupervised learning to support supervised learning, and now, ironically, it is more common to use supervised learning to support unsupervised learning.
In the future, we expect they will be applied to many more tasks, and that advances in optimization algorithms and model design will improve their performance even further.
                                     Chapter 7  Regularization for Deep Learning  A central problem in machine learning is how to make an algorithm that will perform well not just on the training data, but also on new inputs.
Many strategies used in machine learning are explicitly designed to reduce the test error, possibly at the expense of increased training error.
As we will see there are a great many forms of regularization available to the deep learning practitioner.
In fact, developing more effective regularization strategies has been one of the major research efforts in the field.
Chapter introduced the basic concepts of generalization, underfitting, overfit-5 ting, bias, variance and regularization.
If you are not already familiar with these notions, please refer to that chapter before continuing with this one.
In this chapter, we describe regularization in more detail, focusing on regular- ization strategies for deep models or models that may be used as building blocks to form deep models.
However, most of this chapter is concerned with the extension of these basic concepts to the particular case of neural networks.
In section , we defined regularization as “any modification we make to5.2.2 a learning algorithm that is intended to reduce its generalization error but not its training error.” There are many regularization strategies.
Some put extra constraints on a machine learning model, such as adding restrictions on the parameter values.
Some add extra terms in the objective function that can be thought of as corresponding to a soft constraint on the parameter values.
If chosen carefully, these extra constraints and penalties can lead to improved performance  228    CHAPTER 7.
Other times, these constraints and penalties are designed to express a generic preference for a simpler model class in order to promote generalization.
Other forms of regularization, known as ensemble methods, combine multiple hypotheses that explain the training data.
In the context of deep learning, most regularization strategies are based on regularizing estimators.
An effective regularizer is one that makes a profitable trade, reducing variance significantly while not overly increasing the bias.
When we discussed generalization and overfitting in chapter , we focused on three situations,5 where the model family being trained either (1) excluded the true data generating process—corresponding to underfitting and inducing bias, or (2) matched the true data generating process, or (3) included the generating process but also many other possible generating processes—the overfitting regime where variance rather than bias dominates the estimation error.
In practice, an overly complex model family does not necessarily include the target function or the true data generating process, or even a close approximation  of either.
We almost never have access to the true data generating process so we can never know for sure if the model family being estimated includes the generating process or not.
However, most applications of deep learning algorithms are to domains where the true data generating process is almost certainly outside the model family.
Deep learning algorithms are typically applied to extremely complicated domains such as images, audio sequences and text, for which the true generation process essentially involves simulating the entire universe.
To some extent, we are always trying to fit a square peg (the data generating process) into a round hole (our model family).
What this means is that controlling the complexity of the model is not a simple matter of finding the model of the right size, with the right number of  parameters.
Instead, we might find—and indeed in practical deep learning scenarios, we almost always do find—that the best fitting model (in the sense of minimizing generalization error) is a large model that has been regularized appropriately.
REGULARIZATION FOR DEEP LEARNING  7.1 Parameter Norm Penalties  Regularization has been used for decades prior to the advent of deep learning.
Linear models such as linear regression and logistic regression allow simple, straightforward, and effective regularization strategies.
Many regularization approaches are based on limiting the capacity of models,  such as neural networks, linear regression, or logistic regression, by adding a pa- rameter norm penalty Ω(θ) to the objective function J .
We denote the regularized objective function by J̃ :  J̃ , J , α( ;θ X y) = ( ;θ X y) + Ω( )θ (7.1)  where α ∈ [0,∞) is a hyperparameter that weights the relative contribution of the norm penalty term, , relative to the standard objective functionΩ J .
When our training algorithm minimizes the regularized objective function J̃ it will decrease both the original objective J on the training data and some measure of the size of the parameters θ (or some subset of the parameters).
Different choices for the parameter norm can result in different solutions being preferred.Ω In this section, we discuss the effects of the various norms when used as penalties  on the model parameters.
Before delving into the regularization behavior of different norms, we note that for neural networks, we typically choose to use a parameter norm penalty thatΩ penalizes of the affine transformation at each layer and leavesonly the weights the biases unregularized.
We therefore use the vector w to indicate all of the weights that should be affected by a norm penalty, while the  vector θ denotes all of the parameters, including both w and the unregularized parameters.
In the context of neural networks, it is sometimes desirable to use a separate penalty with a different α coefficient for each layer of the network.
Because it can be expensive to search for the correct value of multiple hyperparameters, it is still reasonable to use the same weight decay at all layers just to reduce the size of search space.
REGULARIZATION FOR DEEP LEARNING  7.1.1 L2 Parameter Regularization  We have already seen, in section , one of the simplest and most common kinds5.2.2  of parameter norm penalty: the L2 parameter norm penalty commonly known as weight decay.
This regularization strategy drives the weights closer to the origin1  by adding a regularization term Ω(θ) = 12 w 22 to the objective function.
In other academic communities, L2 regularization is also known as ridge regression or Tikhonov regularization.
We can gain some insight into the behavior of weight decay regularization by studying the gradient of the regularized objective function.
To simplify the presentation, we assume no bias parameter, so θ is just w. Such a model has the following total objective function:  J̃ ,( ;w X y) = α  2 ww w X y+ (J ; , ), (7.2)  with the corresponding parameter gradient  ∇wJ̃ , α( ;w X y) = w + ∇wJ , .
( ;w X y) (7.3)  To take a single gradient step to update the weights, we perform this update:  w w w← −  α( + ∇wJ , .
( ;w X y) (7.5)  We can see that the addition of the weight decay term has modified the learning rule to multiplicatively shrink the weight vector by a constant factor on each step, just before performing the usual gradient update.
We will further simplify the analysis by making a quadratic approximation  to the objective function in the neighborhood of the value of the weights that obtains minimal unregularized training cost, w∗ = arg minw J(w).
If the objective function is truly quadratic, as in the case of fitting a linear regression model with  1 More generally, we could regularize the parameters to be near any specific point in space  and, surprisingly, still get a regularization effect, but better results will be obtained for a value  closer to the true one, with zero being a default value that makes sense when we do not know if  the correct value should be positive or negative.
Since it is far more common to regularize the  model parameters towards zero, we will focus on this special case in our exposition.
The approximation Ĵ is given by  Ĵ J( ) = θ (w∗) + 1  2 (w w− ∗)H w w( − ∗), (7.6)  where H is the Hessian matrix of J with respect to w evaluated at w∗.
There is no first-order term in this quadratic approximation, because w∗ is defined to be a minimum, where the gradient vanishes.
Likewise, because w∗ is the location of a minimum of , we can conclude that is positive semidefinite.J H  The minimum of Ĵ occurs where its gradient  ∇wĴ( ) = (w H w w− ∗) (7.7)  is equal to .0  To study the effect of weight decay, we modify equation by adding the7.7 weight decay gradient.
Because H is real and symmetric, we can decompose it into a diagonal matrix Λ and an orthonormal basis of eigenvectors, Q, such that H Q Q= Λ .
Applying the decomposition to equation , we obtain:7.10  w̃ Q Q= ( Λ  + )αI −1Q QΛ w∗ (7.11)  =  Q I Q( +Λ α )   −1 Q QΛ w∗ (7.12)  = ( + )Q Λ αI −1ΛQw∗.
(7.13)  We see that the effect of weight decay is to rescale w ∗ along the axes defined by the eigenvectors of H. Specifically, the component of w∗ that is aligned with the i-th eigenvector of H is rescaled by a factor of λiλi+α.
(You may wish to review how this kind of scaling works, first explained in figure ).2.3  Along the directions where the eigenvalues ofH are relatively large, for example, where λi  α, the effect of regularization is relatively small.
REGULARIZATION FOR DEEP LEARNING  w1  w 2  w∗  w̃  Figure 7.1: An illustration of the effect of L2 (or weight decay) regularization on the value of the optimal w. The solid ellipses represent contours of equal value of the unregularized objective.
Because the objective function does not express a strong preference along this direction, the regularizer has a strong effect on this axis.
Only directions along which the parameters contribute significantly to reducing the objective function are preserved relatively intact.
In directions that do not  contribute to reducing the objective function, a small eigenvalue of the Hessian tells us that movement in this direction will not significantly increase the gradient.
Components of the weight vector corresponding to such unimportant directions are decayed away through the use of the regularization throughout training.
So far we have discussed weight decay in terms of its effect on the optimization of an abstract, general, quadratic cost function.
We can find out by studying linear regression, a model for which the true cost function is quadratic and therefore amenable to the same kind of analysis we have used so far.
Applying the analysis again, we will be able to obtain a special case of the same results, but with the solution now phrased in terms of the training data.
(7.14)  When we add L2 regularization, the objective function changes to  ( )Xw y− ( ) +Xw y− 1 2 αww.
(7.15)  This changes the normal equations for the solution from  w X= ( X)−1Xy (7.16)  to w X= ( X I+ α )−1Xy.
Using L2 regularization replaces this matrix with  XX I+ α  −1 in equation .7.17  The new matrix is the same as the original one, but with the addition of α to the diagonal.
We can see that L2 regularization causes the learning algorithm to “perceive” the input X as having higher variance, which makes it shrink the weights on features whose covariance with the output target is low compared to  this added variance.
7.1.2 L1 Regularization  While L2 weight decay is the most common form of weight decay, there are other ways to penalize the size of the model parameters.
Formally, L1 regularization on the model parameter is defined as:w  Ω( ) = θ || ||w 1 =   i  |wi |, (7.18)  that is, as the sum of absolute values of the individual parameters.2 We will now discuss the effect of L1 regularization on the simple linear regression model,  with no bias parameter, that we studied in our analysis of L2 regularization.
In particular, we are interested in delineating the differences between L1 and L2 forms  2 As with L2 regularization, we could regularize the parameters towards a value that is not  zero, but instead towards some parameter value w ( )o .
In that case the L1 regularization would  introduce the term Ω( ) = θ || −w w( )o ||1 =  i |wi −w  ( )o i |.
As with L2 weight decay, L1 weight decay controls the strength of the regularization by scaling the penalty using a positive hyperparameterΩ α.
Thus, the regularized objective function J̃ ,( ;w X y) is given by  J̃ , α( ;w X y) = || ||w 1 + ( ; )J w X y, , (7.19)  with the corresponding gradient (actually, sub-gradient):  ∇wJ̃ , α( ;w X y) = sign( ) +w ∇wJ ,(X y w; ) (7.20)  where is simply the sign of applied element-wise.sign( )w w  By inspecting equation , we can see immediately that the effect of7.20 L1  regularization is quite different from that of L2 regularization.
Specifically, we can see that the regularization contribution to the gradient no longer scales linearly with each wi; instead it is a constant factor with a sign equal to sign(wi).
One  consequence of this form of the gradient is that we will not necessarily see clean algebraic solutions to quadratic approximations of J(X y, ;w) as we did for L2  regularization.
Alternately, we could imagine that this is a truncated Taylor series approximating the cost function of a more sophisticated model.
The gradient in this setting is given by  ∇wĴ( ) = (w H w w− ∗), (7.21)  where, again, is the Hessian matrix of with respect to evaluated atH J w w∗.
Because the L1 penalty does not admit clean algebraic expressions in the case of a fully general Hessian, we will also make the further simplifying assumption that the Hessian is diagonal, H = diag([H1 1, , .
This assumption holds if the data for the linear regression problem has been preprocessed to remove all correlation between the input features, which may be accomplished using PCA.
Our quadratic approximation of the L1 regularized objective function decom- poses into a sum over the parameters:  Ĵ , J( ;w X y) = (w∗; ) +X y,   i   1  2 H i,i(wi −w∗i )2 + α w| i|   .
(7.22)  The problem of minimizing this approximate cost function has an analytical solution (for each dimension ), with the following form:i  wi = sign(w ∗ i ) max   |w∗i | −  α  Hi,i , 0   .
This occurs because the contribution of J(w ;X y, ) to the regularized objective J̃ (w;X y, ) is overwhelmed—in direction i—by the L1 regularization which pushes the value of wi to zero.
In this case, the regularization does not move the  optimal value of wi to zero but instead it just shifts it in that direction by a distance equal to αH i,i.
A similar process happens when w∗i < 0, but with the L 1 penalty making wi less  negative by αHi,i , or 0.
The sparsity of L1 regularization is a qualitatively different behavior than arises with L2 regularization.
If we revisit that equation using the assumption of a diagonal and positive definite Hessian H that we introduced for our analysis of L1 regularization, we find that w̃i =  Hi,i H i,i+α  w∗i .
This demonstrates that L2 regularization does not cause the parameters to become sparse, while L1 regularization may do so for large enough .α  The sparsity property induced by L1 regularization has been used extensively as a feature selectionmechanism.
Feature selection simplifies a machine learning problem by choosing which subset of the available features should be used.
In particular, the well known LASSO ( , ) (least absolute shrinkage andTibshirani 1995 selection operator) model integrates an L1 penalty with a linear model and a least squares cost function.
The L1 penalty causes a subset of the weights to become zero, suggesting that the corresponding features may safely be discarded.
In section , we saw that many regularization strategies can be interpreted5.6.1  as MAP Bayesian inference, and that in particular, L2 regularization is equivalent to MAP Bayesian inference with a Gaussian prior on the weights.
For L1 regu- larization, the penalty αΩ(w) = α   i |wi | used to regularize a cost function is  equivalent to the log-prior term that is maximized by MAP Bayesian inference when the prior is an isotropic Laplace distribution (equation ) over3.26 w ∈ R n:  log ( ) =p w   i  log Laplace(w i; 0, 1  α ) = − || ||α w 1 + log log 2n α n− .
REGULARIZATION FOR DEEP LEARNING  From the point of view of learning via maximization with respect to w, we can ignore the terms because they do not depend on .log log 2α− w  7.2 Norm Penalties as Constrained Optimization  Consider the cost function regularized by a parameter norm penalty:  J̃ , J , α .
( ;θ X y) = ( ;θ X y) + Ω( )θ (7.25)  Recall from section that we can minimize a function subject to constraints4.4 by constructing a generalized Lagrange function, consisting of the original objective function plus a set of penalties.
Each penalty is a product between a coefficient, called a Karush–Kuhn–Tucker (KKT) multiplier, and a function representing whether the constraint is satisfied.
If we wanted to constrain Ω(θ) to be less than some constant , we could construct a generalized Lagrange functionk  L −( ; ) = ( ; ) + (Ω( )θ, α X y, J θ X y, α θ k .)
Many different procedures are possible—some may use gradient descent, while others may use analytical solutions for where the gradient is zero—but in all procedures α must increase whenever Ω(θ) > k and decrease whenever Ω(θ)< k .
The optimal value α∗ will encourage Ω(θ) to shrink, but not so strongly to make become less than .Ω( )θ k  To gain some insight into the effect of the constraint, we can fix α∗ and view the problem as just a function of :θ  θ∗ = arg min θ  L(θ, α∗) = arg min θ  J , α( ;θ X y) + ∗Ω( )θ .
Usually we do not know the size of the constraint region that we impose by using weight decay with coefficient α∗ because the value of α∗ does not directly tell us the value of k .
While we do not know the exact size of the constraint region, we can control it roughly by increasing or decreasing α in order to grow or shrink the constraint region.
Smaller will result in a larger constraint region.α  Sometimes we may wish to use explicit constraints rather than penalties.
As  described in section , we can modify algorithms such as stochastic gradient4.4 descent to take a step downhill on J (θ) and then project θ back to the nearest point that satisfies Ω(θ) < k. This can be useful if we have an idea of what value of k is appropriate and do not want to spend time searching for the value of α that corresponds to this .k  Another reason to use explicit constraints and reprojection rather than enforcing constraints with penalties is that penalties can cause non-convex optimization procedures to get stuck in local minima corresponding to small θ.
When training neural networks, this usually manifests as neural networks that train with several “dead units.” These are units that do not contribute much to the behavior of the function learned by the network because the weights going into or out of them are  all very small.
When training with a penalty on the norm of the weights, these configurations can be locally optimal, even if it is possible to significantly reduce J by making the weights larger.
Explicit constraints implemented by re-projection can work much better in these cases because they do not encourage the weights to approach the origin.
Explicit constraints implemented by re-projection only have an effect when the weights become large and attempt to leave the constraint region.
Finally, explicit constraints with reprojection can be useful because they impose some stability on the optimization procedure.
When using high learning rates, it is possible to encounter a positive feedback loop in which large weights induce large gradients which then induce a large update to the weights.
If these updates  consistently increase the size of the weights, then θ rapidly moves away from the origin until numerical overflow occurs.
Explicit constraints with reprojection prevent this feedback loop from continuing to increase the magnitude of the weights without bound.
2012c a high learning rate to allow rapid exploration of parameter space while maintaining some stability.
( ) recommend a strategy introduced by Srebro and Shraibman 2005( ): constraining the norm of each column of the weight matrix  238    CHAPTER 7.
REGULARIZATION FOR DEEP LEARNING  of a neural net layer, rather than constraining the Frobenius norm of the entire weight matrix.
Constraining the norm of each column separately prevents any one hidden unit from having very large weights.
If we converted this constraint into a penalty in a Lagrange function, it would be similar to L2 weight decay but with a separate KKT multiplier for the weights of each hidden unit.
Each of these KKT multipliers would be dynamically updated separately to make each hidden unit obey the constraint.
In practice, column norm limitation is always implemented as an explicit constraint with reprojection.
7.3 Regularization and Under-Constrained Problems  In some cases, regularization is necessary for machine learning problems to be prop- erly defined.
Many linear models in machine learning, including linear regression and PCA, depend on inverting the matrixXX.
This matrix can be singular whenever the data generating distri- bution truly has no variance in some direction, or when no variance is observed in some direction because there are fewer examples (rows of X) than input features (columns of X).
If a weight vector w is able to achieve perfect classification, then 2w will also achieve perfect classification and higher likelihood.
An iterative optimization procedure like stochastic gradient descent will continually increase the magnitude of w and, in theory, will never halt.
In practice, a numerical implementation of gradient descent will eventually reach sufficiently large weights to cause numerical overflow, at which point its behavior will depend on how the programmer has decided to handle values that are not real numbers.
Most forms of regularization are able to guarantee the convergence of iterative  methods applied to underdetermined problems.
For example, weight decay will cause gradient descent to quit increasing the magnitude of the weights when the slope of the likelihood is equal to the weight decay coefficient.
Specifically, equation is the limit of equation as the regularization7.29 7.17 coefficient shrinks to zero.
We can thus interpret the pseudoinverse as stabilizing underdetermined problems using regularization.
7.4 Dataset Augmentation  The best way to make a machine learning model generalize better is to train it on more data.
A classifier needs to take a compli- cated, high dimensional input x and summarize it with a single category identity y.
This means that the main task facing a classifier is to be invariant to a wide variety of transformations.
We can generate new (x, y) pairs easily just by transforming the inputs in our training set.x  This approach is not as readily applicable to many other tasks.
For example, it is difficult to generate new fake data for a density estimation task unless we have already solved the density estimation problem.
Dataset augmentation has been a particularly effective technique for a specific classification problem: object recognition.
Images are high dimensional and include  an enormous variety of factors of variation, many of which can be easily simulated.
Operations like translating the training images a few pixels in each direction can often greatly improve generalization, even if the model has already been designed to be partially translation invariant by using the convolution and pooling techniques described in chapter .
Many other operations such as rotating the image or scaling9 the image have also proven quite effective.
For example, optical character recognition tasks require recognizing the difference between ‘b’ and ‘d’ and the difference between ‘6’ and ‘9’, so horizontal flips and 180◦ rotations are not appropriate ways of augmenting datasets for these tasks.
REGULARIZATION FOR DEEP LEARNING  There are also transformations that we would like our classifiers to be invariant to, but which are not easy to perform.
For example, out-of-plane rotation can not be implemented as a simple geometric operation on the input pixels.
Injecting noise in the input to a neural network (Sietsma and Dow 1991, ) can also be seen as a form of data augmentation.
For many classification and even some regression tasks, the task should still be possible to solve even if small  random noise is added to the input.
One way to improve the robustness of neural networks is simply to train them with random noise applied to their inputs.
Input noise injection is part of some unsupervised learning algorithms such as the denoising autoencoder (Vincent 2008et al., ).
Noise injection also works when the noise is applied to the hidden units, which can be seen as doing dataset augmentation at multiple levels of abstraction.
( ) recently showed that this approach can be highly effective provided that the magnitude of the noise is carefully tuned.
Dropout, a powerful regularization strategy that will be described in section , can be seen as a process of constructing new inputs by7.12 multiplying by noise.
When comparing machine learning benchmark results, it is important to take the effect of dataset augmentation into account.
Often, hand-designed dataset augmentation schemes can dramatically reduce the generalization error of a machine learning technique.
To compare the performance of one machine learning algorithm to another, it is necessary to perform controlled experiments.
When comparing machine learning algorithm A and machine learning algorithm B, it is necessary to make sure that both algorithms were evaluated using the same hand-designed dataset augmentation schemes.
Suppose that algorithm A performs poorly with no dataset augmentation and algorithm B performs well when combined with numerous synthetic transformations of the input.
In such a case it is likely the synthetic transformations caused the improved performance, rather than the use  of machine learning algorithm B.
For example, machine learning algorithms that inject noise into the input are performing a form of dataset augmentation.
Usually, operations that are generally applicable (such as adding Gaussian noise to the input) are considered part of the machine learning algorithm, while operations that are specific to one application domain (such as randomly cropping an image) are considered to be separate pre-processing steps.
REGULARIZATION FOR DEEP LEARNING  7.5 Noise Robustness  Section has motivated the use of noise applied to the inputs as a dataset7.4 augmentation strategy.
For some models, the addition of noise with infinitesimal variance at the input of the model is equivalent to imposing a penalty on the norm of the weights ( , , ).
In the general case, it is important toBishop 1995a b remember that noise injection can be much more powerful than simply shrinking  the parameters, especially when the noise is added to the hidden units.
Noise applied to the hidden units is such an important topic that it merit its own separate discussion; the dropout algorithm described in section is the main development7.12 of that approach.
Another way that noise has been used in the service of regularizing models is by adding it to the weights.
The Bayesian treatment of learning would consider the model weights to be uncertain and representable via a probability distribution that reflects this uncertainty.
Noise applied to the weights can also be interpreted as equivalent (under some assumptions) to a more traditional form of regularization, encouraging stability of the function to be learned.
Consider the regression setting, where we wish to train a function ŷ(x) that maps a set of features x to a scalar using the least-squares cost function between the model predictions ŷ( )x and the true values :y  J = Ep x,y( )  (ŷ y( )x − )2   .
We now assume that with each input presentation we also include a random  perturbation W ∼ N (; 0, ηI) of the network weights.
Despite the injection of noise, we are still interested in minimizing the squared error of the output of the network.
The objective function thus becomes:  J̃W = Ep ,y,(x W )   (ŷW ( ) )x − y 2   (7.31)  = Ep ,y,(x W )  ŷ2W ( ) 2 ˆx − yyW ( ) +x y  2  .
(7.32)  For small η, the minimization of J with added weight noise (with covariance  ηI) is equivalent to minimization of J with an additional regularization term:  242    CHAPTER 7.
This form of regularization encourages the parameters to  go to regions of parameter space where small perturbations of the weights have a relatively small influence on the output.
In other words, it pushes the model into regions where the model is relatively insensitive to small variations in the weights, finding points that are not merely minima, but minima surrounded by flat regions (Hochreiter and Schmidhuber 1995, ).
In the simplified case of linear regression (where, for instance, ŷ(x) =wx+ b), this regularization term collapses into ηEp( )x    x 2  , which is not a function of parameters and therefore does not  contribute to the gradient of J̃W with respect to the model parameters.
7.5.1 Injecting Noise at the Output Targets  Most datasets have some amount of mistakes in the y labels.
For example, we can assume that for some small constant , the training set label y is correct with probability 1− , and otherwise any of the other possible labels might be correct.
This assumption is easy to  incorporate into the cost function analytically, rather than by explicitly drawing noise samples.
For example, label smoothing regularizes a model based on a softmax with k output values by replacing the hard and classification targets0 1 with targets of k−1 and 1 −  , respectively.
Maximum likelihood learning with a softmax classifier and hard targets may actually never converge—the softmax can never predict a probability of exactly or exactly , so it will continue to learn larger0 1 and larger weights, making more extreme predictions forever.
Label smoothing has the advantage of preventing the pursuit of hard probabilities without discouraging correct classification.
This strategy has been used since the 1980s  and continues to be featured prominently in modern neural networks (Szegedy et al., ).2015  7.6 Semi-Supervised Learning  In the paradigm of semi-supervised learning, both unlabeled examples from P (x) and labeled examples from P (x y, ) are used to estimate P (y x| ) or predict y from x.
In the context of deep learning, semi-supervised learning usually refers to learning a representation h = f (x).
A linear classifier in the new space may achieve better generalization in many cases (Belkin and Niyogi 2002 Chapelle 2003, ; et al., ).
A long-standing variant of this approach is the application of principal components analysis as a pre-processing step before applying a classifier (on the projected data).
Instead of having separate unsupervised and supervised components in the model, one can construct models in which a generative model of either P (x) or P (x y, ) shares parameters with a discriminative model of P(y x| ).
One can then trade-off the supervised criterion − logP (y x| ) with the unsupervised or generative one (such as − logP(x) or − logP (x y, )).
The generative criterion then expresses a particular form of prior belief about the solution to the supervised learning problem ( , ), namely that the structure ofLasserre et al.
2006 P (x) is connected to the structure of P(y x| ) in a way that is captured by the shared parametrization.
By controlling how much of the generative criterion is included in the total criterion, one can find a better trade-off than with a purely generative or a purely discriminative training criterion ( , ;Lasserre et al.
Salakhutdinov and Hinton 2008( ) describe a method for learning the kernel function of a kernel machine used for regression, in which the usage of unlabeled examples for modeling improves quite significantly.P ( )x P ( )y x|  See ( ) for more information about semi-supervised learning.Chapelle et al.
2006  7.7 Multi-Task Learning  Multi-task learning ( , ) is a way to improve generalization by poolingCaruana 1993 the examples (which can be seen as soft constraints imposed on the parameters)  arising out of several tasks.
In the same way that additional training examples put more pressure on the parameters of the model towards values that generalize well, when part of a model is shared across tasks, that part of the model is more constrained towards good values (assuming the sharing is justified), often yielding better generalization.
Figure illustrates a very common form of multi-task learning, in which7.2 different supervised tasks (predicting y( )i given x) share the same input x, as well as some intermediate-level representation h(shared) capturing a common pool of  244    CHAPTER 7.
Task-specific parameters (which only benefit from the examples of their task to achieve good generalization).
Generic parameters, shared across all the tasks (which benefit from the pooled data of all the tasks).
These are the lower layers of the neural network in figure .7.2  h(1)h(1) h(2)h(2) h(3)h(3)  y(1)y(1) y(2)y(2)  h(shared)h(shared)  xx  Figure 7.2: Multi-task learning can be cast in several ways in deep learning frameworks and this figure illustrates the common situation where the tasks share a common input but involve different target random variables.
The lower layers of a deep network (whether it is supervised and feedforward or includes a generative component with downward arrows) can be shared across such tasks, while task-specific parameters (associated respectively with the weights into and from h(1) and h(2)) can be learned on top of those yielding a shared representation h(shared) .
The underlying assumption is that there exists a common pool of factors that explain the variations in the input x, while each task is associated with a subset of these factors.
In this example, it is additionally assumed that top-level hidden units h(1) and h(2) are specialized to each task (respectively predicting y(1) and y (2)) while some intermediate-level representation h(shared) is shared across all tasks.
In the unsupervised learning context, it makes sense for some of the top-level factors to be associated with none of the output tasks (h(3)): these are the factors that explain some of the input variations but are not relevant for predicting y(1) or y(2) .
Improved generalization and generalization error bounds ( , ) can beBaxter 1995 achieved because of the shared parameters, for which statistical strength can be  245    CHAPTER 7.
L o ss  (n eg  a ti  v e   lo g -l  ik el  ih o o d  )  Training set loss  Validation set loss  Figure 7.3: Learning curves showing how the negative log-likelihood loss changes over time (indicated as number of training iterations over the dataset, or epochs).
Observe that the training objective decreases consistently over time, but the validation set average loss eventually begins to increase again, forming an asymmetric U-shaped curve.
greatly improved (in proportion with the increased number of examples for the shared parameters, compared to the scenario of single-task models).
Of course this will happen only if some assumptions about the statistical relationship between the different tasks are valid, meaning that there is something shared across some of the tasks.
From the point of view of deep learning, the underlying prior belief is the following: among the factors that explain the variations observed in the data associated with the different tasks, some are shared across two or more tasks.
7.8 Early Stopping  When training large models with sufficient representational capacity to overfit the task, we often observe that training error decreases steadily over time, but validation set error begins to rise again.
This means we can obtain a model with better validation set error (and thus, hopefully better test set error) by returning to the parameter setting at the point in time with the lowest validation set error.
When the training algorithm terminates, we return these parameters, rather than the latest parameters.
REGULARIZATION FOR DEEP LEARNING  algorithm terminates when no parameters have improved over the best recorded validation error for some pre-specified number of iterations.
This procedure is specified more formally in algorithm .7.1  Algorithm 7.1 The early stopping meta-algorithm for determining the best amount of time to train.
This meta-algorithm is a general strategy that works  well with a variety of training algorithms and ways of quantifying error on the validation set.
Let be the number of steps between evaluations.n Let p be the “patience,” the number of times to observe worsening validation set error before giving up.
θ θ← o i← 0 j ← 0 v ← ∞ θ∗ ← θ i∗ ← i while doj < p Update by running the training algorithm for steps.θ n i i n← + v  ← ValidationSetError( )θ if v  < v then j ← 0 θ∗ ← θ i∗ ← i v v←   else  j j← + 1 end if  end while Best parameters are θ∗ , best number of training steps is i∗  This strategy is known as early stopping .
Most hyperparameters that control model capacity have such a U-shaped validation set performance curve, as illustrated in figure .
In the case of5.3 early stopping, we are controlling the effective capacity of the model by determining how many steps it can take to fit the training set.
Most hyperparameters must be chosen using an expensive guess and check process, where we set a hyperparameter at the start of training, then run training for several steps to see its effect.
The “training time” hyperparameter is unique in that by definition a single run of training tries out many values of the hyperparameter.
The only significant cost  to choosing this hyperparameter automatically via early stopping is running the validation set evaluation periodically during training.
Ideally, this is done in parallel to the training process on a separate machine, separate CPU, or separate GPU from the main training process.
If such resources are not available, then the cost of these periodic evaluations may be reduced by using a validation set that is small compared to the training set or by evaluating the validation set error less frequently and obtaining a lower resolution estimate of the optimal training time.
This cost is generally negligible, because it is acceptable to store these parameters in a slower and larger form of memory (for example, training in GPU memory, but storing the optimal parameters in host memory or on a disk  drive).
Since the best parameters are written to infrequently and never read during training, these occasional slow writes have little effect on the total training time.
Early stopping is a very unobtrusive form of regularization, in that it requires almost no change in the underlying training procedure, the objective function, or the set of allowable parameter values.
This is in contrast to weight decay, where one must be careful not to use too much weight decay and trap the network in a bad local minimum corresponding to a solution with pathologically small weights.
Even when using regularization strategies that modify the objective  function to encourage better generalization, it is rare for the best generalization to occur at a local minimum of the training objective.
To best exploit this extra data, one can perform extra training after the initial training with early stopping has completed.
In this second training pass, we train for the same number of steps as the early stopping procedure determined was optimal in the first pass.
For example, there is not a good way of knowing whether to retrain for the same number of parameter updates or the same number of passes through the dataset.
On the second round of training, each pass through the dataset will require more parameter updates because the training set is bigger.
Algorithm 7.2 A meta-algorithm for using early stopping to determine how long to train, then retraining on all the data.
Split X( )train and y( )train into (X( )subtrain , X (valid)) (and y( )subtrain , y(valid)) respectively.
Run early stopping (algorithm ) starting from random7.1 θ using X( )subtrain and y( )subtrain for training data and X(valid) and y(valid) for validation data.
Another strategy for using all of the data is to keep the parameters obtained from the first round of training and then continue training but now using all of the data.
Instead, we can monitor the average loss function on the validation set, and continue training until it falls below the value of the training set objective at which the early stopping procedure halted.
For  example, there is not any guarantee that the objective on the validation set will ever reach the target value, so this strategy is not even guaranteed to terminate.
This procedure is presented more formally in algorithm .7.3  Early stopping is also useful because it reduces the computational cost of the training procedure.
Besides the obvious reduction in cost due to limiting the number of training iterations, it also has the benefit of providing regularization without requiring the addition of penalty terms to the cost function or the computation of the gradients of such additional terms.
How early stopping acts as a regularizer: So far we have stated that early  stopping a regularization strategy, but we have supported this claim only byis showing learning curves where the validation set error has a U-shaped curve.
REGULARIZATION FOR DEEP LEARNING  Algorithm 7.3 Meta-algorithm using early stopping to determine at what objec- tive value we start to overfit, then continue training until that value is reached.
Split X( )train and y( )train into (X( )subtrain , X (valid)) (and y( )subtrain , y(valid)) respectively.
Run early stopping (algorithm ) starting from random7.1 θ using X( )subtrain and  y( )subtrain for training data and X(valid) and y(valid) for validation data.
This updates .θ  J ,← (θ X ( )subtrain ,y( )subtrain ) while J ,(θ X(valid),y (valid)) >  do Train on X( )train and y( )train for steps.n end while  is the actual mechanism by which early stopping regularizes the model?
Bishop ( ) and ( ) argued that early stopping has the effect of1995a Sjöberg and Ljung 1995 restricting the optimization procedure to a relatively small volume of parameter space in the neighborhood of the initial parameter value θo, as illustrated in figure .
More specifically, imagine taking7.4 τ optimization steps (corresponding to τ training iterations) and with learning rate .
Assuming the gradient is bounded, restricting both the number of iterations and the learning rate limits the volume of parameter space reachable from θo.
Indeed, we can show how—in the case of a simple linear model with a quadratic error function and simple gradient descent—early stopping is equivalent to L2  regularization.
In order to compare with classical L2 regularization, we examine a simple setting where the only parameters are linear weights (θ = w).
We can model the cost function J with a quadratic approximation in the neighborhood of the empirically optimal value of the weights w∗:  Ĵ J( ) = θ (w∗) + 1  2 (w w− ∗)H w w( − ∗), (7.33)  where H is the Hessian matrix of J with respect to w evaluated atw∗ .
REGULARIZATION FOR DEEP LEARNING  w1  w 2  w∗  w̃  w1  w 2  w∗  w̃  Figure 7.4: An illustration of the effect of early stopping.
Rather than stopping at the point w∗ that minimizes the cost, early stopping results in the trajectory stopping at an earlier point w̃.
The dashed circles indicate the contours of the L2 penalty, which causes the minimum of the total cost to lie nearer the origin than the minimum of the unregularized cost.
Let us study the approximate behavior of gradient descent on J by analyzing gradient descent on Ĵ :  w( )τ = w( 1)τ− − ∇ wĴ(w( 1)τ− ) (7.35) = w( 1)τ− − H w( ( 1)τ− −w ∗) (7.36)  w( )τ −w∗ = ( )(I H−  w( 1)τ− −w∗).
(7.37)  Let us now rewrite this expression in the space of the eigenvectors ofH , exploiting the eigendecomposition of H: H = Q QΛ , whereΛ is a diagonal matrix and Q is an orthonormal basis of eigenvectors.
w( )τ −w∗ = (I Q Q−  Λ )(w( 1)τ− −w∗) (7.38) Q(w( )τ −w∗) = ( )I − Λ Q (w( 1)τ− −w∗ ) (7.39)  3 For neural networks, to obtain symmetry breaking between hidden units, we cannot initialize  all the parameters to 0, as discussed in section .
REGULARIZATION FOR DEEP LEARNING  Assuming that w (0) = 0 and that  is chosen to be small enough to guarantee |1− λ i| < 1, the parameter trajectory during training after τ parameter updates is as follows:  Qw ( )τ = [ ( )I − I − Λ τ]Qw∗.
(7.40)  Now, the expression for Qw̃ in equation for7.13 L2 regularization can be rear- ranged as:  Qw̃ I= ( +Λ α )−1ΛQw∗ (7.41)  Qw̃ I I= [ − ( +Λ α )−1α]Qw∗ (7.42)  Comparing equation and equation , we see that if the hyperparameters7.40 7.42 , α τ, and are chosen such that  ( )I − Λ τ = ( + )Λ αI −1α, (7.43)  then L2 regularization and early stopping can be seen to be equivalent (at least under the quadratic approximation of the objective function).
Going even further, by taking logarithms and using the series expansion for log(1 +x), we can conclude  that if all λi are small (that is, λi  1 and λi/α  1) then  τ ≈ 1 α , (7.44)  α ≈ 1 τ .
(7.45)  That is, under these assumptions, the number of training iterations τ plays a role inversely proportional to the L2 regularization parameter, and the inverse of τ plays the role of the weight decay coefficient.
Parameter values corresponding to directions of significant curvature (of the objective function) are regularized less than directions of less curvature.
Of course,  in the context of early stopping, this really means that parameters that correspond to directions of significant curvature tend to learn early relative to parameters corresponding to directions of less curvature.
The derivations in this section have shown that a trajectory of length τ ends at a point that corresponds to a minimum of the L2-regularized objective.
Early stopping is of course more than the mere restriction of the trajectory length; instead, early stopping typically involves monitoring the validation set error in order to stop the trajectory at a particularly good point in space.
Early stopping therefore has the advantage over weight decay that early stopping automatically determines the correct amount of regularization while weight decay requires many training experiments with different values of its hyperparameter.
REGULARIZATION FOR DEEP LEARNING  7.9 Parameter Tying and Parameter Sharing  Thus far, in this chapter, when we have discussed adding constraints or penalties to the parameters, we have always done so with respect to a fixed region or point.
For example, L2 regularization (or weight decay) penalizes model parameters for deviating from the fixed value of zero.
However, sometimes we may need other ways to express our prior knowledge about suitable values of the model parameters.
Sometimes we might not know precisely what values the parameters should take but we know, from knowledge of the domain and model architecture, that there should be some dependencies between the model parameters.
A common type of dependency that we often want to express is that certain parameters should be close to one another.
Consider the following scenario: we have two models performing the same classification task (with the same set of classes) but with somewhat different input distributions.
The two models map the input to two different, but related outputs: ŷ ( )A = f(w( )A ,x) and ŷ ( )B = (g w( )B ,x).
Let us imagine that the tasks are similar enough (perhaps with similar input  and output distributions) that we believe the model parameters should be close  to each other: ∀i, w ( )Ai should be close to w ( )B i .
Specifically, we can use a parameter norm penalty of the form: Ω(w( )A ,w ( )B ) = w( )A −w( )B 22.
2006  the parameters of one model, trained as a classifier in a supervised paradigm, to be close to the parameters of another model, trained in an unsupervised paradigm (to capture the distribution of the observed input data).
The architectures were constructed such that many of the parameters in the classifier model could be paired to corresponding parameters in the unsupervised model.
While a parameter norm penalty is one way to regularize parameters to be close to one another, the more popular way is to use constraints: to force sets of parameters to be equal.
This method of regularization is often referred to as parameter sharing, because we interpret the various models or model components as sharing a unique set of parameters.
A significant advantage of parameter sharing over regularizing the parameters to be close (via a norm penalty) is that only a subset of the parameters (the unique set) need to be stored in memory.
In certain  models—such as the convolutional neural network—this can lead to significant reduction in the memory footprint of the model.
REGULARIZATION FOR DEEP LEARNING  Convolutional Neural Networks By far the most popular and extensive use of parameter sharing occurs in convolutional neural networks (CNNs) applied to computer vision.
The same feature (a hidden unit with the same weights) is computed over different locations in the input.
This means that we can find a  cat with the same cat detector whether the cat appears at column i or column i+ 1 in the image.
Parameter sharing has allowed CNNs to dramatically lower the number of unique model parameters and to significantly increase network sizes without requiring a corresponding increase in training data.
It remains one of the best examples of how to effectively incorporate domain knowledge into the network architecture.
CNNs will be discussed in more detail in chapter .9  7.10 Sparse Representations  Weight decay acts by placing a penalty directly on the model parameters.
Another strategy is to place a penalty on the activations of the units in a neural network, encouraging their activations to be sparse.
We have already discussed (in section ) how7.1.2 L1 penalization induces a sparse parametrization—meaning that many of the parameters become zero (or close to zero).
Representational sparsity, on the other hand, describes a representation where many of the elements of the representation are zero (or close to zero).
A simplified view of this distinction can be illustrated in the context of linear regression:      18 5  15 −9 −3     =      4 0 0 2 0 0− 0 0 1 0 3 0− 0 5 0 0 0 0 1 0 0 1 0 4− − 1 0 0 0 5 0−          2 3  −2 −5 1 4      y ∈ Rm A ∈ Rm n× x ∈ Rn  (7.46)  254    CHAPTER 7.
REGULARIZATION FOR DEEP LEARNING      −14 1  19 2 23     =      3 1 2 5 4 1− − 4 2 3 1 1 3− −  − − −1 5 4 2 3 2 3 1 2 3 0 3− −  − − − −5 4 2 2 5 1          0 2 0  0 −3 0      y ∈ Rm B ∈ Rm n× h ∈ Rn  (7.47)  In the first expression, we have an example of a sparsely parametrized linear regression model.
That is, h is a function of x that, in some sense, represents the information present in , but does so with a sparse vector.x  Representational regularization is accomplished by the same sorts of mechanisms that we have used in parameter regularization.
Norm penalty regularization of representations is performed by adding to the loss function J a norm penalty on the representation.
As before, we denote the regularized loss function by J̃ :  J̃ , J , α( ;θ X y) = ( ;θ X y) + Ω( )h (7.48)  where α ∈ [0,∞) weights the relative contribution of the norm penalty term, with larger values of corresponding to more regularization.α  Just as an L1 penalty on the parameters induces parameter sparsity, an L1  penalty on the elements of the representation induces representational sparsity: Ω(h) = || ||h 1 =   i |hi|.
Others include the penalty derived from a Student-t prior on the representation ( , ; , )Olshausen and Field 1996 Bergstra 2011 and KL divergence penalties ( , ) that are especiallyLarochelle and Bengio 2008 useful for representations with elements constrained to lie on the unit interval.
( ) both provide examples of strategies based on regularizing the average activation across several examples, 1m   i h ( )i , to  be near some target value, such as a vector with .01 for each entry.
For example, orthogonal matching pursuit (Pati et al., 1993) encodes an input x with the representation h that solves the constrained optimization problem  arg min h h, 0<k   − x Wh 2 , (7.49)  where  h 0 is the number of non-zero entries of h .
REGULARIZATION FOR DEEP LEARNING  OMP-k with the value of k specified to indicate the number of non-zero features allowed.
( ) demonstrated that OMP- can be a very effectiveCoates and Ng 2011 1 feature extractor for deep architectures.
Throughout this book, we will see many examples of sparsity regularization used in a variety of contexts.
7.11 Bagging and Other Ensemble Methods  Bagging (short for bootstrap aggregating) is a technique for reducing gen- eralization error by combining several models ( , ).
The idea is toBreiman 1994 train several different models separately, then have all of the models vote on the output for test examples.
The reason that model averaging works is that different models will usually not make all the same errors on the test set.
Suppose that each model  makes an error i on each example, with the errors drawn from a zero-mean multivariate normal distribution with variances E[2i] = v and covariances E[ij] = c. Then the error made by the average prediction of all the ensemble models is 1 k   i i.
The expected squared error of the ensemble predictor is  E       1  k    i  i  2   = 1  k2 E       i    2i +   j i= ij         (7.50)  = 1  k v +  k − 1 k c. (7.51)  In the case where the errors are perfectly correlated and c = v, the mean squared error reduces to v, so the model averaging does not help at all.
In the case where the errors are perfectly uncorrelated and c = 0, the expected squared error of the ensemble is only 1kv.
This means that the expected squared error of the ensemble  decreases linearly with the ensemble size.
In other words, on average, the ensemble will perform at least as well as any of its members, and if the members make independent errors, the ensemble will perform significantly better than its members.
REGULARIZATION FOR DEEP LEARNING  8  8  First ensemble member  Second ensemble member  Original dataset  First resampled dataset  Second resampled dataset  Figure 7.5: A cartoon depiction of how bagging works.
Each of these individual classification rules is brittle, but if we average their output then the detector is robust, achieving maximal confidence only when both loops of the 8 are present.
Bagging is a method that allows the same kind of model, training algorithm and objective function to be reused several times.
Each dataset has the same number of examples as the original dataset, but each dataset is constructed by sampling with replacement from the original dataset.
This means that, with high probability, each dataset is missing some of the examples from the  original dataset and also contains several duplicate examples (on average around 2/3 of the examples from the original dataset are found in the resulting training set, if it has the same size as the original).
The differences between which examples are included in each dataset result in differences between the trained models.
See figure for an example.7.5  Neural networks reach a wide enough variety of solution points that they can often benefit from model averaging even if all of the models are trained on the same dataset.
Differences in random initialization, random selection of minibatches, differences in hyperparameters, or different outcomes of non-deterministic imple- mentations of neural networks are often enough to cause different members of the  257    CHAPTER 7.
Its use is usually discouraged when benchmarking algorithms for scientific papers, because any machine learning algorithm can benefit substan- tially from model averaging at the price of increased computation and memory.
Not all techniques for constructing ensembles are designed to make the ensemble more regularized than the individual models.
For example, a technique called boosting (Freund and Schapire 1996b a, , ) constructs an ensemble with higher capacity than the individual models.
Boosting has been applied to build ensembles of neural networks (Schwenk and Bengio 1998, ) by incrementally adding neural networks to the ensemble.
Boosting has also been applied interpreting an individual neural network as an ensemble ( , ), incrementally adding hiddenBengio et al.
7.12 Dropout  Dropout (Srivastava 2014et al., ) provides a computationally inexpensive but powerful method of regularizing a broad family of models.
To a first approximation, dropout can be thought of as a method of making bagging practical for ensembles of very many large neural networks.
This seems impractical when each model is a large neural network, since training and evaluating such networks is costly in terms of runtime and memory.
It is common to use ensembles of five to ten neural networks— ( ) used six to win the ILSVRC—Szegedy et al.
Dropout provides an inexpensive  approximation to training and evaluating a bagged ensemble of exponentially many neural networks.
Specifically, dropout trains the ensemble consisting of all sub-networks that can be formed by removing non-output units from an underlying base network, as illustrated in figure .
In most modern neural networks, based on a series of7.6 affine transformations and nonlinearities, we can effectively remove a unit from a network by multiplying its output value by zero.
This procedure requires some slight modification for models such as radial basis function networks, which take  258    CHAPTER 7.
Here, we present the dropout algorithm in terms of multiplication by zero for simplicity, but it can be trivially modified to work with other operations that remove a unit from the network.
Recall that to learn with bagging, we define k different models, construct k different datasets by sampling from the training set with replacement, and then train model i on dataset i.
Specifically, to train with dropout,  we use a minibatch-based learning algorithm that makes small steps, such as stochastic gradient descent.
Each time we load an example into a minibatch, we randomly sample a different binary mask to apply to all of the input and hidden units in the network.
The probability of sampling a mask value of one (causing a unit to be included) is a hyperparameter fixed before training begins.
Typically, an input unit is included with probability 0.8 and a hidden unit is included with probability 0.5.
More formally, suppose that a mask vector µ specifies which units to include, and J (θ µ, ) defines the cost of the model defined by parameters θ and mask µ.
The expectation contains exponentially many terms but we can obtain an unbiased estimate of its gradient by sampling values of .µ  Dropout training is not quite the same as bagging training.
In the case of dropout, the models share parameters, with each model inheriting a different subset of parameters from the parent neural network.
This parameter sharing makes it possible to represent an exponential number of models with a tractable amount of memory.
In the  case of dropout, typically most models are not explicitly trained at all—usually, the model is large enough that it would be infeasible to sample all possible sub- networks within the lifetime of the universe.
Instead, a tiny fraction of the possible sub-networks are each trained for a single step, and the parameter sharing causes the remaining sub-networks to arrive at good settings of the parameters.
For example, the training set encountered by each sub-network is indeed a subset of the original training set sampled with replacement.
REGULARIZATION FOR DEEP LEARNING  yy  h1h1 h 2h 2  x1x1 x 2x 2  yy  h1h1 h2h2  x1x1 x2x2  yy  h 1h 1 h2h2  x2x2  yy  h 1h 1 h2h2  x 1x 1  yy  h 2h 2  x1x1 x 2x 2  yy  h1h1  x1x1 x2x2  yy  h 1h 1 h2h2  yy  x 1x 1 x2x2  yy  h 2h 2  x 2x 2  yy  h1h1  x1x1  yy  h 1h 1  x2x2  yy  h2h2  x 1x 1  yy  x1x1  yy  x2x2  yy  h2h2  yy  h 1h 1  yy  Base network  Ensemble of subnetworks  Figure 7.6: Dropout trains an ensemble consisting of all sub-networks that can be constructed by removing non-output units from an underlying base network.
We show all sixteen subnetworks that may be formed by dropping out different subsets of units from the original network.
In this small example, a large proportion of the resulting networks have no input units or no path connecting the input to the output.
This problem becomes insignificant for networks with wider layers, where the probability of dropping all possible paths from inputs to outputs becomes smaller.
REGULARIZATION FOR DEEP LEARNING  x̂1̂x1  µx1µx1 x1x1  x̂2̂x2  x2x2 µx2µx2  h1h1 h2h2µh1µh1 µh2µh2  ĥ 1̂h1 ĥ 2̂h2  yy  yy  h1h1 h2h2  x1x1 x2x2  Figure 7.7: An example of forward propagation through a feedforward network using dropout.
(Top)In this example, we use a feedforward network with two input units, one hidden layer with two hidden units, and one output unit.
To perform forward(Bottom) propagation with dropout, we randomly sample a vector µ with one entry for each input or hidden unit in the network.
The probability of each entry being is a hyperparameter, usually1 0.5 for the hidden layers and 0.8 for the input.
Each unit in the network is multiplied by the corresponding mask, and then forward propagation continues through the rest of the network as usual.
This is equivalent to randomly selecting one of the sub-networks from figure and running forward propagation through it.7.6  261    CHAPTER 7.
REGULARIZATION FOR DEEP LEARNING  To make a prediction, a bagged ensemble must accumulate votes from all of its members.
So far, our description of bagging and dropout has not required that the model be explicitly probabilistic.
The prediction of the ensemble is given by the arithmetic mean of all of these distributions,  1  k  k  i=1  p( )i ( )y | x .
(7.52)  In the case of dropout, each sub-model defined by mask vector µ defines a prob- ability distribution p(y ,| x µ).
The arithmetic mean over all masks is given by   µ  p p y ,( )µ ( | x µ) (7.53)  where p(µ) is the probability distribution that was used to sample µ at training  time.
Because this sum includes an exponential number of terms, it is intractable to evaluate except in cases where the structure of the model permits some form of simplification.
Instead, we can approximate the inference with sampling, by averaging together the output from many masks.
However, there is an even better approach, that allows us to obtain a good approximation to the predictions of the entire ensemble, at the cost of only one forward propagation.
To do so, we change to using the geometric mean rather than the arithmetic mean of the ensemble members’ predicted distributions.
( ) present arguments and empirical evidence that the geometric mean performs comparably to the arithmetic mean in this context.
The geometric mean of multiple probability distributions is not guaranteed to be a probability distribution.
To guarantee that the result is a probability distribution, we impose the requirement that none of the sub-models assigns probability 0 to any event, and we renormalize the resulting distribution.
The unnormalized probability distribution defined directly by the geometric mean is given by  p̃ensemble ( ) =y | x 2d   µ  p y ,( | x µ) (7.54)  where d is the number of units that may be dropped.
Here we use a uniform distribution over µ to simplify the presentation, but non-uniform distributions are  262    CHAPTER 7.
To make predictions we must re-normalize the ensemble:  pensemble( ) =y | x p̃ensemble( )y | x y  p̃ensemble(y   | x).
2012c mate pensemble by evaluating p(y | x) in one model: the model with all units, but with the weights going out of unit i multiplied by the probability of including unit i.
The motivation for this modification is to capture the right expected value of the output from that unit.
There is not yet any theoretical argument for the accuracy of this approximate inference rule in deep nonlinear networks, but empirically it performs very well.
Because we usually use an inclusion probability of 12, the weight scaling rule usually amounts to dividing the weights by at the end of training, and then using2  the model as usual.
Either way, the goal is to make sure that2 the expected total input to a unit at test time is roughly the same as the expected total input to that unit at train time, even though half the units at train time are missing on average.
For many classes of models that do not have nonlinear hidden units, the weight scaling inference rule is exact.
For a simple example, consider a softmax regression  classifier with input variables represented by the vector :n v  P y( = y | v) = softmax  Wv+ b    y .
(7.56)  We can index into the family of sub-models by element-wise multiplication of the input with a binary vector :d  P y( = y | v; ) = d softmax  W ( ) +d v b    y .
(7.57)  The ensemble predictor is defined by re-normalizing the geometric mean over all ensemble members’ predictions:  Pensemble( = ) =y y | v P̃ensemble( = )y y | v y P̃ensemble( = y y   | v) (7.58)  where  P̃ensemble( = ) =y y | v 2n    d∈{ }0 1, n P y .
REGULARIZATION FOR DEEP LEARNING  To see that the weight scaling rule is exact, we can simplify P̃ensemble:  P̃ensemble ( = ) =y y | v 2n    d∈{ }0 1, n P y( = y | v; )d (7.60)  = 2n     d∈{ }0 1, n softmax (W ( ) + )d v b y (7.61)  = 2n     d∈{ }0 1, n  exp  W y,:( ) +d v by     y exp  W y ,:( ) +d v by    (7.62)  =  2n   d∈{ }0 1, n exp  Wy,:( ) +d v b y    2n     d∈{ }0 1, n  y exp  Wy,:( ) +d v by   (7.63)  Because P̃ will be normalized, we can safely ignore multiplication by factors that are constant with respect to :y  P̃ensemble( = ) y y | v ∝ 2n    d∈{ }0 1, n exp  W y,:( ) +d v by   (7.64)  = exp     1 2n    d∈{ }0 1, n Wy,:( ) +d v by     (7.65)  = exp   1  2 Wy,:v+ by   .
The weight scaling rule is also exact in other settings, including regression networks with conditionally normal outputs, and deep networks that have hidden layers without nonlinearities.
However, the weight scaling rule is only an approxi- mation for deep models that have nonlinearities.
( ) found experimentally that the weight scaling approximation can work2013a better (in terms of classification accuracy) than Monte Carlo approximations to the ensemble predictor.
This held true even when the Monte Carlo approximation was allowed to sample up to 1,000 sub-networks.
( ) foundGal and Ghahramani 2015 that some models obtain better classification accuracy using twenty samples and  264    CHAPTER 7.
( ) showed that dropout is more effective than other standard computationally inexpensive regularizers, such as weight decay, filter norm constraints and sparse activity regularization.
Using dropout during training requires only O(n) computation per example per update,  to generate n random binary numbers and multiply them by the state.
Depending on the implementation, it may also require O(n) memory to store these binary numbers until the back-propagation stage.
Running inference in the trained model has the same cost per-example as if dropout were not used, though we must pay the cost of dividing the weights by 2 once before beginning to run inference on examples.
Another significant advantage of dropout is that it does not significantly limit the type of model or training procedure that can be used.
It works well with nearly any model that uses a distributed representation and can be trained with stochastic gradient descent.
This includes feedforward neural networks, probabilistic models such as restricted Boltzmann machines (Srivastava 2014et al., ), and recurrent  neural networks (Bayer and Osendorfer 2014 Pascanu 2014a, ; et al., ).
Many other regularization strategies of comparable power impose more severe restrictions on the architecture of the model.
Though the cost per-step of applying dropout to a specific model is negligible, the cost of using dropout in a complete system can be significant.
Typically the optimal validation set error is much lower when using dropout, but this comes at the cost of a much larger model and many more iterations of the training algorithm.
In these cases, the computational cost of using dropout and larger models may outweigh  the benefit of regularization.
Bayesian neural networks ( ,  ) outperform dropout on theNeal 1996 Alternative Splicing Dataset ( , ) where fewer than 5,000 examplesXiong et al.
When additional unlabeled data is available, unsupervised feature learning can gain an advantage over dropout.
( ) showed that, when applied to linear regression, dropout is equivalent to L2 weight decay, with a different weight decay coefficient for  265    CHAPTER 7.
Their approximation, known as fast dropout resulted in faster convergence time due to the reduced stochasticity in the computation of the  gradient.
This method can also be applied at test time, as a more principled (but also more computationally expensive) approximation to the average over all sub-networks than the weight scaling approximation.
Fast dropout has been used to nearly match the performance of standard dropout on small neural network problems, but has not yet yielded a significant improvement or been applied to a large problem.
Just as stochasticity is not necessary to achieve the regularizing effect of dropout, it is also not sufficient.
( ) designed control experiments using a method called dropout boosting that they designed to use exactly the same mask noise as traditional dropout but lack its regularizing effect.
Dropout boosting trains the entire ensemble to jointly  maximize the log-likelihood on the training set.
In the same sense that traditional dropout is analogous to bagging, this approach is analogous to boosting.
As intended, experiments with dropout boosting show almost no regularization effect compared to training the entire network as a single model.
This demonstrates that the interpretation of dropout as bagging has value beyond the interpretation of dropout as robustness to noise.
The regularization effect of the bagged ensemble is only achieved when the stochastically sampled ensemble members are trained to perform well independently of each other.
Dropout has inspired other stochastic approaches to training exponentially large ensembles of models that share weights.
DropConnect is a special case of dropout where each product between a single scalar weight and a single hidden  unit state is considered a unit that can be dropped (Wan 2013et al., ).
Stochastic pooling is a form of randomized pooling (see section ) for building ensembles9.3 of convolutional networks with each convolutional network attending to different spatial locations of each feature map.
One of the key insights of dropout is that training a network with stochastic behavior and making predictions by averaging over multiple stochastic decisions implements a form of bagging with parameter sharing.
REGULARIZATION FOR DEEP LEARNING  dropout as bagging an ensemble of models formed by including or excluding units.
We can think of any form of modification parametrized by a vector µ as training an ensemble consisting of p(y ,| x µ) for all possible values of µ.
( ) showed that multiplying the weights by µ ∼ N (1, I) can outperform dropout based on binary masks.
Because E[µ] = 1 the standard network automatically implements approximate inference in the ensemble, without needing any weight scaling.
Dropout trains not just a bagged ensemble of models, but an ensemble of models that share hidden units.
This means each hidden unit must be able to perform well regardless of which other hidden units are in the model.
( ) were inspired by an idea from biology: sexual reproduction, which involves2012c  swapping genes between two different organisms, creates evolutionary pressure for genes to become not just good, but to become readily swapped between different organisms.
Such genes and such features are very robust to changes in their environment because they are not able to incorrectly adapt to unusual features of any one organism or model.
Dropout thus regularizes each hidden unit to be not merely a good feature but a feature that is good in many contexts.
( ) compared dropout training to training of large ensembles and concluded that dropout offers additional improvements to generalization error beyond those obtained by ensembles of independent models.
It is important to understand that a large portion of the power of dropout arises from the fact that the masking noise is applied to the hidden units.
This can be seen as a form of highly intelligent, adaptive destruction of the information  content of the input rather than destruction of the raw values of the input.
For example, if the model learns a hidden unit hi that detects a face by finding the nose, then dropping h i corresponds to erasing the information that there is a nose in the image.
The model must learn another h i, either that redundantly encodes the presence of a nose, or that detects the face by another feature, such as the mouth.
Traditional noise injection techniques that add unstructured noise at the input are not able to randomly erase the information about a nose from an image of a face unless the magnitude of the noise is so great that nearly all of the information in  267    CHAPTER 7.
Destroying extracted features rather than original values allows the destruction process to make use of all of the knowledge about the input distribution that the model has acquired so far.
If the noise were additive with fixed scale, then a rectified linear hidden unit hi with added noise  could simply learn to have h i become very large in order to make the added noise  insignificant by comparison.
Another deep learning algorithm, batch normalization, reparametrizes the model in a way that introduces both additive and multiplicative noise on the hidden units at training time.
The primary purpose of batch normalization is to improve optimization, but the noise can have a regularizing effect, and sometimes makes dropout unnecessary.
Batch normalization is described further in section .8.7.1  7.13 Adversarial Training  In many cases, neural networks have begun to reach human performance when evaluated on an i.i.d.
It is natural therefore to wonder whether these  models have obtained a true human-level understanding of these tasks.
In order to probe the level of understanding a network has of the underlying task, we can search for examples that the model misclassifies.
2014b even neural networks that perform at human level accuracy have a nearly 100% error rate on examples that are intentionally constructed by using an optimization procedure to search for an input x near a data point x such that the model output is very different at x.
In many cases, x can be so similar to x that a human observer cannot tell the difference between the original example and the adversarial example, but the network can make highly different predictions.
See figure for an example.7.8  Adversarial examples have many implications, for example, in computer security,  that are beyond the scope of this chapter.
However, they are interesting in the context of regularization because one can reduce the error rate on the original i.i.d.
test set via adversarial training—training on adversarially perturbed examples from the training set ( , ;Szegedy et al.
REGULARIZATION FOR DEEP LEARNING  + .007 × =  x sign(∇xJ (θ x, , y)) x+   sign(∇xJ (θ x, , y)) y =“panda” “nematode” “gibbon” w/ 57.7% confidence  w/ 8.2% confidence  w/ 99.3 % confidence  Figure 7.8: A demonstration of adversarial example generation applied to GoogLeNet ( , ) on ImageNet.
2014a elements are equal to the sign of the elements of the gradient of the cost function with respect to the input, we can change GoogLeNet’s classification of the image.
If we change each input by , then a linear function with weights w can change by as much as || ||w 1, which can be a very large amount if w is high-dimensional.
Adversarial training discourages this highly sensitive locally linear behavior by encouraging the network to be locally constant in the neighborhood of the training data.
This can be seen as a way of explicitly introducing a local constancy prior into supervised neural nets.
Adversarial training helps to illustrate the power of using a large function family in combination with aggressive regularization.
Purely linear models, like logistic regression, are not able to resist adversarial examples because they are forced to be linear.
Neural networks are able to represent functions that can range from nearly linear to nearly locally constant and thus have the flexibility to capture  linear trends in the training data while still learning to resist local perturbation.
At a point x that is not associated with a label in the dataset, the model itself assigns some label ŷ .
The model’s label ŷ may not be the true label, but if the model is high quality, then ŷ has a high probability of providing the true label.
We can seek an adversarial example x that causes the classifier to output a label y with y  = ŷ.
Adversarial examples generated using not the true label but a label provided by a trained model are called virtual adversarial examples (Miyato 2015et al., ).
REGULARIZATION FOR DEEP LEARNING  robust to small changes anywhere along the manifold where the unlabeled data lies.
The assumption motivating this approach is that different classes usually lie on disconnected manifolds, and a small perturbation should not be able to jump from one class manifold to another class manifold.
7.14 Tangent Distance, Tangent Prop, and Manifold  Tangent Classifier  Many machine learning algorithms aim to overcome the curse of dimensionality by assuming that the data lies near a low-dimensional manifold, as described in  section .5.11.3  One of the early attempts to take advantage of the manifold hypothesis is the tangent distance algorithm ( , , ).
1993 1998 nearest-neighbor algorithm in which the metric used is not the generic Euclidean distance but one that is derived from knowledge of the manifolds near which probability concentrates.
It is assumed that we are trying to classify examples and that examples on the same manifold share the same category.
Since the classifier should be invariant to the local factors of variation that correspond to movement on the manifold, it would make sense to use as nearest-neighbor distance between points x1 and x2 the distance between the manifoldsM1 and M2 to which they respectively belong.
Although that may be computationally difficult (it would  require solving an optimization problem, to find the nearest pair of points on M1 and M2), a cheap alternative that makes sense locally is to approximate Mi by its tangent plane at xi and measure the distance between the two tangents, or between a tangent plane and a point.
1992 7.9 trains a neural net classifier with an extra penalty to make each output f(x) of the neural net locally invariant to known factors of variation.
These factors of variation correspond to movement along the manifold near which examples of the same class concentrate.
Local invariance is achieved by requiring ∇xf (x) to be orthogonal to the known manifold tangent vectors v( )i at x , or equivalently that the directional derivative of f at x in the directions v ( )i be small by adding a regularization penalty :Ω  Ω( ) =f   i   (∇xf( ))x  v( )i  2 .
REGULARIZATION FOR DEEP LEARNING  This regularizer can of course be scaled by an appropriate hyperparameter, and, for most neural networks, we would need to sum over many outputs rather than the lone output f(x) described here for simplicity.
As with the tangent distance algorithm, the tangent vectors are derived a priori, usually from the formal knowledge of the effect of transformations such as translation, rotation, and scaling in images.
1992 but also in the context of reinforcement learning ( , ).Thrun 1995  Tangent propagation is closely related to dataset augmentation.
In both  cases, the user of the algorithm encodes his or her prior knowledge of the task by specifying a set of transformations that should not alter the output of the network.
The difference is that in the case of dataset augmentation, the network is explicitly trained to correctly classify distinct inputs that were created by applying more than an infinitesimal amount of these transformations.
Instead, it analytically regularizes the model to resist perturbation in the directions corresponding to the specified transformation.
They are not able to shrink their derivatives by saturating at a high value with large weights, as sigmoid or tanh units can.
Dataset augmentation works well with rectified linear units because different subsets of rectified units can activate for different transformed versions of each original input.
Tangent propagation is also related to double backprop (Drucker and LeCun, 1992) and adversarial training ( , ; , ).Szegedy et al.
2014b Double backprop regularizes the Jacobian to be small, while adversarial training finds inputs near the original inputs and trains the model to produce the same output on these as on the original inputs.
Tangent propagation and dataset augmentation using manually specified transformations both require that the  model should be invariant to certain specified directions of change in the input.
Double backprop and adversarial training both require that the model should be invariant to directions of change in the input so long as the change is small.
Justall as dataset augmentation is the non-infinitesimal version of tangent propagation, adversarial training is the non-infinitesimal version of double backprop.
REGULARIZATION FOR DEEP LEARNING  x1  x 2  Normal Tangent  Figure 7.9: Illustration of the main idea of the tangent prop algorithm ( ,Simard et al.
1992 Rifai 2011c) and manifold tangent classifier ( et al., ), which both regularize the classifier output function f(x).
Each curve represents the manifold for a different class, illustrated here as a one-dimensional manifold embedded in a two-dimensional space.
On one curve, we have chosen a single point and drawn a vector that is tangent to the class manifold (parallel to and touching the manifold) and a vector that is normal to the class manifold (orthogonal to the manifold).
We expect the classification function to change rapidly as it moves in the direction normal to the manifold, and not to change as it moves along the class manifold.
Both tangent propagation and the manifold tangent classifier regularize f(x) to not change very much as x moves along the manifold.
Tangent propagation requires the user to manually specify functions that compute the tangent directions (such as specifying that small translations of images remain in the same class manifold) while the manifold tangent classifier estimates the manifold tangent directions by training an autoencoder to fit the training data.
The use of autoencoders to estimate manifolds will be described in chapter .14  estimate the manifold tangent vectors.
The manifold tangent classifier makes use of this technique to avoid needing user-specified tangent vectors.
As illustrated  in figure , these estimated tangent vectors go beyond the classical invariants14.10 that arise out of the geometry of images (such as translation, rotation and scaling) and include factors that must be learned because they are object-specific (such as moving body parts).
The algorithm proposed with the manifold tangent classifier is therefore simple: (1) use an autoencoder to learn the manifold structure by unsupervised learning, and (2) use these tangents to regularize a neural net classifier as in tangent prop (equation ).7.67  This chapter has described most of the general strategies used to regularize neural networks.
                                     Chapter 8  Optimization for Training Deep  Models  Deep learning algorithms involve optimization in many contexts.
Of all of the many optimization problems involved in deep learning, the most difficult is neural network training.
It is quite common to invest days to months of time on hundreds of machines in order to solve even a single instance of the neural network training problem.
Because this problem is so important and so expensive, a specialized set of optimization techniques have been developed for solving it.
If you are unfamiliar with the basic principles of gradient-based optimization, we suggest reviewing chapter .
This chapter focuses on one particular case of optimization: finding the param-  eters θ of a neural network that significantly reduce a cost function J(θ), which typically includes a performance measure evaluated on the entire training set as well as additional regularization terms.
We begin with a description of how optimization used as a training algorithm for a machine learning task differs from pure optimization.
Next, we present several of the concrete challenges that make optimization of neural networks difficult.
We then define several practical algorithms, including both optimization algorithms themselves and strategies for initializing the parameters.
More advanced algorithms adapt their learning rates during training or leverage information contained in  274    CHAPTER 8.
Finally, we conclude with a review of several optimization strategies that are formed by combining simple optimization algorithms into higher-level procedures.
8.1 How Learning Differs from Pure Optimization  Optimization algorithms used for training of deep models differ from traditional optimization algorithms in several ways.
In most machine learning scenarios, we care about some performance measure P , that is defined with respect to the test set and may also be intractable.
Optimization algorithms for training deep models also typically include some specialization on the specific structure of machine learning objective functions.
Typically, the cost function can be written as an average over the training set, such as  J( ) = θ E( ) ˆx,y ∼pdataL f , y ,( ( ; )x θ ) (8.1)  where L is the per-example loss function, f (x; θ) is the predicted output when the input is x, p̂data is the empirical distribution.
Throughout this chapter, we develop the unregularized supervised case, where the arguments to L are f(x; θ) and y.
However, it is trivial to extend this development, for example, to include θ or x as arguments, or to exclude y as arguments, in order to develop various forms of regularization or unsupervised learning.
We8.1 would usually prefer to minimize the corresponding objective function where the expectation is taken across the data generating distribution pdata rather than just  over the finite training set:  J∗( ) = θ E( )x,y ∼pdataL f , y .
( ( ; )x θ ) (8.2)  8.1.1 Empirical Risk Minimization  The goal of a machine learning algorithm is to reduce the expected generalization error given by equation .
If we knew the true distribution pdata(x, y), risk minimization would be an optimization task  275    CHAPTER 8.
However, when we do not know pdata(x, y) but only have a training set of samples, we have a machine learning problem.
The simplest way to convert a machine learning problem back into an op- timization problem is to minimize the expected loss on the training set.
This means replacing the true distribution p(x, y) with the empirical distribution p̂(x, y) defined by the training set.
We now minimize the empirical risk  Ex,y∼p̂data( )x,y [ ( ( ; ) )] =L f x θ , y 1  m  m  i=1  L f( (x( )i ; )θ , y( )i ) (8.3)  where is the number of training examples.m  The training process based on minimizing this average training error is known as empirical risk minimization.
Rather than optimizing the risk directly, we optimize the empirical risk, and hope that the risk decreases significantly as well.
A variety of theoretical results establish conditions under which the true risk  can be expected to decrease by various amounts.
The most effective modern optimization algorithms are based on gradient descent, but many useful loss functions, such as 0-1 loss, have no useful derivatives (the derivative is either zero or undefined everywhere).
These two problems mean that, in the context of deep learning, we rarely use empirical risk minimization.
Instead, we must use a slightly different approach, in which the quantity that we actually optimize is even more different from the quantity that we truly want to optimize.
8.1.2 Surrogate Loss Functions and Early Stopping  Sometimes, the loss function we actually care about (say classification error) is not one that can be optimized efficiently.
For example, exactly minimizing expected 0-1 loss is typically intractable (exponential in the input dimension), even for a linear classifier (Marcotte and Savard 1992, ).
In such situations, one typically optimizes a surrogate loss function instead, which acts as a proxy but has advantages.
For example, the negative log-likelihood of the correct class is typically used as a surrogate for the 0-1 loss.
The negative log-likelihood allows the model to estimate the conditional probability of the classes, given the input, and if the model can do that well, then it can pick the classes that yield the least classification error in expectation.
OPTIMIZATION FOR TRAINING DEEP MODELS  In some cases, a surrogate loss function actually results in being able to learn more.
For example, the test set 0-1 loss often continues to decrease for a long time after the training set 0-1 loss has reached zero, when training using the log-likelihood surrogate.
This is because even when the expected 0-1 loss is zero, one can improve the robustness of the classifier by further pushing the classes apart from each other, obtaining a more confident and reliable classifier, thus extracting more information from the training data than would have been possible by simply minimizing the average 0-1 loss on the training set.
A very important difference between optimization in general and optimization as we use it for training algorithms is that training algorithms do not usually halt at a local minimum.
Instead, a machine learning algorithm usually minimizes a surrogate loss function but halts when a convergence criterion based on early stopping (section ) is satisfied.
Typically the early stopping criterion is based7.8 on the true underlying loss function, such as 0-1 loss measured on a validation set, and is designed to cause the algorithm to halt whenever overfitting begins to occur.
Training often halts while the surrogate loss function still has large derivatives, which is very different from the pure optimization setting, where an optimization algorithm is considered to have converged when the gradient becomes very small.
8.1.3 Batch and Minibatch Algorithms  One aspect of machine learning algorithms that separates them from general optimization algorithms is that the objective function usually decomposes as a sum over the training examples.
Optimization algorithms for machine learning typically compute each update to the parameters based on an expected value of the cost function estimated using only a subset of the terms of the full cost function.
For example, maximum likelihood estimation problems, when viewed in log space, decompose into a sum over each example:  θML = arg max θ  m  i=1  log pmodel(x ( )i , y( )i ; )θ .
(8.4)  Maximizing this sum is equivalent to maximizing the expectation over the empirical distribution defined by the training set:  J( ) = θ Ex,y∼p̂data log pmodel( ; )x, y θ .
(8.5)  Most of the properties of the objective function J used by most of our opti- mization algorithms are also expectations over the training set.
OPTIMIZATION FOR TRAINING DEEP MODELS  most commonly used property is the gradient:  ∇θJ( ) = θ Ex,y∼p̂data∇θ log pmodel ( ; )x, y θ .
(8.6)  Computing this expectation exactly is very expensive because it requires evaluating the model on every example in the entire dataset.
In practice, we can  compute these expectations by randomly sampling a small number of examples from the dataset, then taking the average over only those examples.
Recall that the standard error of the mean (equation ) estimated from5.46 n samples is given by σ/  √ n, where σ is the true standard deviation of the value of  the samples.
The denominator of √ n shows that there are less than linear returns  to using more examples to estimate the gradient.
Compare two hypothetical estimates of the gradient, one based on 100 examples and another based on 10,000 examples.
The latter requires 100 times more computation than the former, but reduces the standard error of the mean only by a factor of 10.
Most optimization algorithms converge much faster (in terms of total computation, not in terms of number of updates) if they are allowed to rapidly compute approximate estimates  of the gradient rather than slowly computing the exact gradient.
Another consideration motivating statistical estimation of the gradient from a small number of samples is redundancy in the training set.
A sampling- based estimate of the gradient could compute the correct gradient with a single sample, using m times less computation than the naive approach.
In practice, we are unlikely to truly encounter this worst-case situation, but we may find large numbers of examples that all make very similar contributions to the gradient.
Optimization algorithms that use the entire training set are called batch or deterministic gradient methods, because they process all of the training examples simultaneously in a large batch.
This terminology can be somewhat confusing  because the word “batch” is also often used to describe the minibatch used by minibatch stochastic gradient descent.
Typically the term “batch gradient descent” implies the use of the full training set, while the use of the term “batch” to describe a group of examples does not.
Optimization algorithms that use only a single example at a time are sometimes called stochastic or sometimes online methods.
The term online is usually reserved for the case where the examples are drawn from a stream of continually created examples rather than from a fixed-size training set over which several passes are made.
These were traditionally called minibatch or minibatch stochastic methods and it is now common to simply call them stochastic methods.
The canonical example of a stochastic method is stochastic gradient descent, presented in detail in section .8.3.1  Minibatch sizes are generally driven by the following factors:  • Larger batches provide a more accurate estimate of the gradient, but with less than linear returns.
This motivates using some absolute minimum batch size, below which there  is no reduction in the time to process a minibatch.
• If all examples in the batch are to be processed in parallel (as is typically the case), then the amount of memory scales with the batch size.
Typical power of 2 batch sizes range from 32 to 256, with 16 sometimes being attempted for large models.
• Small batches can offer a regularizing effect ( , ),Wilson and Martinez 2003 perhaps due to the noise they add to the learning process.
Training with such a small batch  size might require a small learning rate to maintain stability due to the high variance in the estimate of the gradient.
The total runtime can be very high due to the need to make more steps, both because of the reduced learning rate and because it takes more steps to observe the entire training set.
Different kinds of algorithms use different kinds of information from the mini- batch in different ways.
Some algorithms are more sensitive to sampling error than others, either because they use information that is difficult to estimate accurately with few samples, or because they use information in ways that amplify sampling errors more.
Methods that compute updates based only on the gradient g are usually relatively robust and can handle smaller batch sizes like 100.
Second-order methods, which use also the Hessian matrix H and compute updates such as H−1g, typically require much larger batch sizes like 10,000.
OPTIMIZATION FOR TRAINING DEEP MODELS  H or its inverse amplifies pre-existing errors, in this case, estimation errors in g. Very small changes in the estimate of g can thus cause large changes in the update H−1g, even if H were estimated perfectly.
Of course,H will be estimated only approximately, so the update H−1g will contain even more error than we would predict from applying a poorly conditioned operation to the estimate of .g  It is also crucial that the minibatches be selected randomly.
Computing an unbiased estimate of the expected gradient from a set of samples requires that those samples be independent.
We also wish for two subsequent gradient estimates to be  independent from each other, so two subsequent minibatches of examples should also be independent from each other.
This list might be arranged so that first we have five blood samples taken at different times from the first patient, then we have three blood samples taken from the second patient, then the blood samples from the third patient, and so on.
If we were to draw examples in order from this list, then each of our minibatches would be extremely biased, because it would represent primarily one patient out of the many patients in the dataset.
In cases such as these where the order of the dataset holds some significance, it is necessary to shuffle the examples before selecting  minibatches.
For very large datasets, for example datasets containing billions of examples in a data center, it can be impractical to sample examples truly uniformly at random every time we want to construct a minibatch.
Fortunately, in practice it is usually sufficient to shuffle the order of the dataset once and then store it in shuffled fashion.
This will impose a fixed set of possible minibatches of consecutive examples that all models trained thereafter will use, and each individual model will be forced to reuse this ordering every time it passes through the training data.
However, this deviation from true random selection does not seem to have a significant detrimental effect.
Failing to ever shuffle the examples in any way can seriously reduce the effectiveness of the algorithm.
Many optimization problems in machine learning decompose over examples well enough that we can compute entire separate updates over different examples  in parallel.
In other words, we can compute the update that minimizes J(X) for one minibatch of examples X at the same time that we compute the update for several other minibatches.
Such asynchronous parallel distributed approaches are discussed further in section .12.1.3  An interesting motivation for minibatch stochastic gradient descent is that it follows the gradient of the true generalization error (equation ) so long as no8.2 examples are repeated.
OPTIMIZATION FOR TRAINING DEEP MODELS  descent shuffle the dataset once and then pass through it multiple times.
On the first pass, each minibatch is used to compute an unbiased estimate of the true generalization error.
On the second pass, the estimate becomes biased because it is formed by re-sampling values that have already been used, rather than obtaining new fair samples from the data generating distribution.
The fact that stochastic gradient descent minimizes generalization error is easiest to see in the online learning case, where examples or minibatches are drawn from a stream of data.
In other words, instead of receiving a fixed-size training  set, the learner is similar to a living being who sees a new example at each instant, with every example (x, y) coming from the data generating distribution pdata(x, y).
In this case, the generalization error (equation ) can be written as a sum8.2  J ∗( ) =θ   x    y  pdata( ) ( ( ; ) )x, y L f x θ , y , (8.7)  with the exact gradient  g = ∇θJ ∗( ) =θ   x    y  pdata( )x, y ∇θL f , y .
( ( ; )x θ ) (8.8)  We have already seen the same fact demonstrated for the log-likelihood in equa- tion and equation ; we observe now that this holds for other functions8.5 8.6 L besides the likelihood.
A similar result can be derived when x and y are continuous, under mild assumptions regarding pdata and .L  Hence, we can obtain an unbiased estimator of the exact gradient of the  generalization error by sampling a minibatch of examples {x(1), .
.x( )m } with cor- responding targets y( )i from the data generating distribution pdata , and computing the gradient of the loss with respect to the parameters for that minibatch:  ĝ = 1  m ∇θ    i  L f( (x( )i ; )θ , y ( )i ).
Nonetheless, it is usually best to make several passes through the training set, unless the training set is extremely large.
When multiple such epochs are used, only the first epoch follows the unbiased gradient of the generalization error, but  281    CHAPTER 8.
OPTIMIZATION FOR TRAINING DEEP MODELS  of course, the additional epochs usually provide enough benefit due to decreased training error to offset the harm they cause by increasing the gap between training error and test error.
With some datasets growing rapidly in size, faster than computing power, it is becoming more common for machine learning applications to use each training example only once or even to make an incomplete pass through the training set.
When using an extremely large training set, overfitting is not an issue, so underfitting and computational efficiency become the predominant concerns.
See  also ( ) for a discussion of the effect of computationalBottou and Bousquet 2008 bottlenecks on generalization error, as the number of training examples grows.
8.2 Challenges in Neural Network Optimization  Optimization in general is an extremely difficult task.
Traditionally, machine  learning has avoided the difficulty of general optimization by carefully designing the objective function and constraints to ensure that the optimization problem is convex.
In this section, we summarize several of the most prominent challenges involved in optimization for training deep models.
Of these, the most prominent is ill-conditioning of the Hessian matrix H. This is a very general problem in most numerical optimization, convex or otherwise, and is described in more detail in section .4.3.1  The ill-conditioning problem is generally believed to be present in neural network training problems.
Ill-conditioning can manifest by causing SGD to get  “stuck” in the sense that even very small steps increase the cost function.
Recall from equation that a second-order Taylor series expansion of the4.9 cost function predicts that a gradient descent step of will add−g  1  2 2gHg g−  g (8.10)  to the cost.
To determine whether ill-conditioning is detrimental to a neural network training task, one can monitor the squared gradient norm gg and  282    CHAPTER 8.
OPTIMIZATION FOR TRAINING DEEP MODELS  −50 0 50 100 150 200 250 Training time (epochs)  −2 0  2  4  6  8  10  12  14  16  G ra  d ie  n t   n o rm  0 50 100 150 200 250  Training time (epochs)  0 1.
C la  ss ifi  ca ti  o n  er ro  r ra  te  Figure 8.1: Gradient descent often does not arrive at a critical point of any kind.
In this example, the gradient norm increases throughout training of a convolutional network used for object detection.
(Left)A scatterplot showing how the norms of individual gradient evaluations are distributed over time.
The gradient norm clearly increases over time, rather than decreasing as we would expect if the training process converged to a critical point.
In many cases, the gradient norm does not shrink significantly throughout learning, but the gHg term grows by more than an order of magnitude.
The result is that learning becomes very slow despite the presence of a strong gradient because the learning rate must be shrunk to compensate for even stronger curvature.
Figure shows an example of the gradient increasing significantly8.1 during the successful training of a neural network.
Though ill-conditioning is present in other settings besides neural network training, some of the techniques used to combat it in other contexts are less applicable to neural networks.
For example, Newton’s method is an excellent tool for minimizing convex functions with poorly conditioned Hessian matrices, but in the subsequent sections we will argue that Newton’s method requires significant  modification before it can be applied to neural networks.
8.2.2 Local Minima  One of the most prominent features of a convex optimization problem is that it can be reduced to the problem of finding a local minimum.
Some convex functions have a flat region at the bottom rather than a single global minimum point, but any point within such a flat region is an acceptable solution.
When optimizing a convex function, we know that we have reached a good solution if we find a critical point of any kind.
Indeed, nearly any deep model is essentially guaranteed to have an extremely large number of local minima.
Neural networks and any models with multiple equivalently parametrized latent variables all have multiple local minima because of the model identifiability problem.
A model is said to be identifiable if a sufficiently large training set can rule out all but one setting of the model’s parameters.
Models with latent variables are often not identifiable because we can obtain equivalent models by exchanging latent variables with each other.
For example, we could take a neural network and modify layer 1 by swapping the incoming weight vector for unit i with the incoming weight vector for unit j , then doing the same for the outgoing weight vectors.
In addition to weight space symmetry, many kinds of neural networks have  additional causes of non-identifiability.
For example, in any rectified linear or maxout network, we can scale all of the incoming weights and biases of a unit by α if we also scale all of its outgoing weights by 1α.
This means that—if the cost function does not include terms such as weight decay that depend directly on the weights rather than the models’ outputs—every local minimum of a rectified linear or maxout network lies on an (m n× )-dimensional hyperbola of equivalent local minima.
These model identifiability issues mean that there can be an extremely large or even uncountably infinite amount of local minima in a neural network cost function.
However, all of these local minima arising from non-identifiability are equivalent to each other in cost function value.
One can construct small neural networks, even without hidden units, that have local minima with higher cost than the global minimum (Sontag and Sussman 1989 Brady 1989 Gori and Tesi 1992, ; et al., ; , ).
If local minima with high cost are common, this could pose a serious problem for gradient-based optimization algorithms.
OPTIMIZATION FOR TRAINING DEEP MODELS  for networks of practical interest and whether optimization algorithms encounter them.
For many years, most practitioners believed that local minima were a common problem plaguing neural network optimization.
The problem remains an active area of research, but experts now suspect that, for sufficiently large neural networks, most local minima have a low cost function value, and that it is not important to find a true global minimum rather than to find a point in parameter space that has low but not minimal cost ( , ; , ; , ;Saxe et al.
2015 Choromanska  et al., ).2014  Many practitioners attribute nearly all difficulty with neural network optimiza- tion to local minima.
If the norm of the gradient does not shrink to insignificant size, the problem is neither local minima nor any other kind of critical point.
In high dimensional spaces, it can be very difficult to positively establish that local minima are the problem.
8.2.3 Plateaus, Saddle Points and Other Flat Regions  For many high-dimensional non-convex functions, local minima (and maxima) are in fact rare compared to another kind of point with zero gradient: a saddle point.
Some points around a saddle point have greater cost than the saddle point, while others have a lower cost.
Points lying along eigenvectors associated with positive eigenvalues have greater cost than the saddle point, while points lying along negative eigenvalues have lower value.
We can think of a saddle point as being a local minimum along one cross-section of the cost function and a local  maximum along another cross-section.
See figure for an illustration.4.5  Many classes of random functions exhibit the following behavior: in low- dimensional spaces, local minima are common.
For a function f : Rn → R of this type, the expected ratio of the number of saddle points to local minima grows exponentially with n. To understand the intuition behind this behavior, observe that the Hessian matrix at a local minimum has only positive eigenvalues.
In a single dimension, it is easy to obtain a local minimum by tossing a coin and getting heads once.
2014  An amazing property of many random functions is that the eigenvalues of the Hessian become more likely to be positive as we reach regions of lower cost.
In our coin tossing analogy, this means we are more likely to have our coin come up heads n times if we are at a critical point with low cost.
( ) showed theoretically that shallow autoencodersBaldi and Hornik 1989 (feedforward networks trained to copy their input to their output, described in chapter ) with no nonlinearities have global minima and saddle points but no14 local minima with higher cost than the global minimum.
The output of such networks is a linear function of their input, but they are useful to study as a model of nonlinear neural networks because their loss function is a non-convex function of their parameters.
2013 to the complete learning dynamics in such networks and showed that learning in  these models captures many of the qualitative features observed in the training of deep models with nonlinear activation functions.
2014 experimentally that real neural networks also have loss functions that contain very many high-cost saddle points.
( ) provided additional theoretical arguments, showing that another class of high-dimensional random functions related to neural networks does so as well.
For first-order optimization algorithms that use only gradient information, the situation is unclear.
On the other hand, gradient descent empirically seems to be able to escape saddle points in many cases.
2015  several learning trajectories of state-of-the-art neural networks, with an example given in figure .
These visualizations show a flattening of the cost function near8.2 a prominent saddle point where the weights are all zero, but they also show the gradient descent trajectory rapidly escaping this region.
2015 also argue that continuous-time gradient descent may be shown analytically to be repelled from, rather than attracted to, a nearby saddle point, but the situation may be different for more realistic uses of gradient descent.
OPTIMIZATION FOR TRAINING DEEP MODELS  Pro jec tio n 2  of θ  Projection 1 of θ  J ( ) θ  Figure 8.2: A visualization of the cost function of a neural network.
These visualizations appear similar for feedforward neural networks, convolutional networks, and recurrent networks applied to real object recognition and natural language processing tasks.
Prior to the success of stochastic gradient descent for training very large models beginning in roughly 2012, neural net cost function surfaces were generally believed to have much more non-convex structure than is revealed by these projections.
The primary obstacle revealed by this projection is a saddle point of high cost near where the parameters are initialized, but, as indicated by the blue path, the SGD training trajectory escapes this saddle point readily.
Most of training time is spent traversing the relatively flat valley of the cost function, which may be due to high noise in the gradient, poor conditioning of the Hessian matrix in this region, or simply the need to circumnavigate the tall “mountain” visible in the figure via an indirect arcing path.
OPTIMIZATION FOR TRAINING DEEP MODELS  Gradient descent is designed to move “downhill” and is not explicitly designed to seek a critical point.
The proliferation of saddle points in high dimensional spaces presumably explains why second-order methods have not succeeded in replacing gradient descent for neural network training.
2014 saddle-free Newton method for second-order optimization and showed that it improves significantly over the traditional version.
Second-order methods remain  difficult to scale to large neural networks, but this saddle-free approach holds promise if it could be scaled.
There are also maxima, which are much like saddle points from the perspective of optimization—many algorithms are not attracted to them, but unmodified Newton’s method is.
Maxima of many classes of random functions become exponentially rare in high dimensional space, just like minima do.
In a convex problem, a wide, flat region must consist entirely of global minima, but in a general optimization  problem, such a region could correspond to a high value of the objective function.
8.2.4 Cliffs and Exploding Gradients  Neural networks with many layers often have extremely steep regions resembling cliffs, as illustrated in figure .
On the face of an extremely steep cliff structure, the gradient update step can move the parameters extremely far, usually jumping off of the cliff structure altogether.
OPTIMIZATION FOR TRAINING DEEP MODELS             Figure 8.3: The objective function for highly nonlinear deep neural networks or for recurrent neural networks often contains sharp nonlinearities in parameter space resulting from the multiplication of several parameters.
When the parameters get close to such a cliff region, a gradient descent update can catapult the parameters very far, possibly losing most of the optimization work that had been done.
( ).2013  The cliff can be dangerous whether we approach it from above or from below, but fortunately its most serious consequences can be avoided using the gradient clipping heuristic described in section .
The basic idea is to recall that10.11.1 the gradient does not specify the optimal step size, but only the optimal direction within an infinitesimal region.
When the traditional gradient descent algorithm proposes to make a very large step, the gradient clipping heuristic intervenes to reduce the step size to be small enough that it is less likely to go outside the region where the gradient indicates the direction of approximately steepest descent.
Cliff structures are most common in the cost functions for recurrent neural networks, because such models involve a multiplication of many factors, with one factor for each time step.
8.2.5 Long-Term Dependencies  Another difficulty that neural network optimization algorithms must overcome arises when the computational graph becomes extremely deep.
So do recurrent networks, described in chapter , which construct very deep computational graphs10  289    CHAPTER 8.
OPTIMIZATION FOR TRAINING DEEP MODELS  by repeatedly applying the same operation at each time step of a long temporal sequence.
For example, suppose that a computational graph contains a path that consists of repeatedly multiplying by a matrix W .
After t steps, this is equivalent to mul- tiplying byW t. Suppose thatW has an eigendecompositionW = V diag(λ)V −1.
In this simple case, it is straightforward to see that  W t =  V λ Vdiag( ) −1   t = ( )V diag λ tV −1.
(8.11)  Any eigenvalues λi that are not near an absolute value of will either explode if they1 are greater than in magnitude or vanish if they are less than in magnitude.
The1 1  vanishing and exploding gradient problem refers to the fact that gradients through such a graph are also scaled according to diag(λ)t. Vanishing gradients make it difficult to know which direction the parameters should move to improve the cost function, while exploding gradients can make learning unstable.
The cliff structures described earlier that motivate gradient clipping are an example of the exploding gradient phenomenon.
The repeated multiplication by W at each time step described here is very similar to the power method algorithm used to find the largest eigenvalue of a matrix W and the corresponding eigenvector.
From this point of view it is not surprising that xW t will eventually discard all components of x that are orthogonal to the principal eigenvector of .W  Recurrent networks use the same matrixW at each time step, but feedforward networks do not, so even very deep feedforward networks can largely avoid the vanishing and exploding gradient problem ( , ).Sussillo 2014  We defer a further discussion of the challenges of training recurrent networks until section , after recurrent networks have been described in more detail.10.7  8.2.6 Inexact Gradients  Most optimization algorithms are designed with the assumption that we have access to the exact gradient or Hessian matrix.
Nearly every deep learning algorithm relies on sampling-based estimates at least insofar as using a minibatch of training examples to compute the gradient.
For example, contrastive divergenceIII gives a technique for approximating the gradient of the intractable log-likelihood of a Boltzmann machine.
Various neural network optimization algorithms are designed to account for imperfections in the gradient estimate.
One can also avoid the problem by choosing a surrogate loss function that is easier to approximate than the true loss.
8.2.7 Poor Correspondence between Local and Global Structure  Many of the problems we have discussed so far correspond to properties of the loss function at a single point—it can be difficult to make a single step if J(θ ) is poorly conditioned at the current point θ, or if θ lies on a cliff, or if θ is a saddle point hiding the opportunity to make progress downhill from the gradient.
It is possible to overcome all of these problems at a single point and still perform poorly if the direction that results in the most improvement locally does not point toward distant regions of much lower cost.
( ) argue that much of the runtime of training is due to the length of the trajectory needed to arrive at the solution.
Figure shows that8.2 the learning trajectory spends most of its time tracing out a wide arc around a mountain-shaped structure.
Much of research into the difficulties of optimization has focused on whether training arrives at a global minimum, a local minimum, or a saddle point, but in practice neural networks do not arrive at a critical point of any kind.
For example, the loss function  − log p(y | x; θ) can lack a global minimum point and instead asymptotically approach some value as the model becomes more confident.
For a classifier with  discrete y and p(y | x) provided by a softmax, the negative log-likelihood can become arbitrarily close to zero if the model is able to correctly classify every example in the training set, but it is impossible to actually reach the value of zero.
Likewise, a model of real values p(y | x) = N (y;f (θ), β−1) can have negative log-likelihood that asymptotes to negative infinity—if f(θ) is able to correctly predict the value of all training set y targets, the learning algorithm will increase β without bound.
See figure for an example of a failure of local optimization to8.4 find a good cost function value even in the absence of any local minima or saddle points.
Future research will need to develop further understanding of the factors that influence the length of the learning trajectory and better characterize the outcome  291    CHAPTER 8.
OPTIMIZATION FOR TRAINING DEEP MODELS  θ  J ( ) θ  Figure 8.4: Optimization based on local downhill moves can fail if the local surface does not point toward the global solution.
Here we provide an example of how this can occur, even if there are no saddle points and no local minima.
The main cause of difficulty in this case is being initialized on the wrong side of the “mountain” and not being able to traverse it.
In higher dimensional space, learning algorithms can often circumnavigate such mountains but the trajectory associated with doing so may be long and result in excessive training time, as illustrated in figure .8.2  of the process.
Many existing research directions are aimed at finding good initial points for  problems that have difficult global structure, rather than developing algorithms that use non-local moves.
Gradient descent and essentially all learning algorithms that are effective for training neural networks are based on making small, local moves.
The previous sections have primarily focused on how the correct direction of these local moves can be difficult to compute.
We may be able to compute some properties of the objective function, such as its gradient, only approximately, with bias or variance in our estimate of the correct direction.
In these cases, local descent may or may not define a reasonably short path to a valid solution, but we are not actually able to follow the local descent path.
The objective function may have issues such as poor conditioning or discontinuous gradients, causing the region where  the gradient provides a good model of the objective function to be very small.
In these cases, local descent with steps of size  may define a reasonably short path to the solution, but we are only able to compute the local descent direction with steps of size δ  .
In these cases, local descent may or may not define a path to the solution, but the path contains many steps, so following the path incurs a  292    CHAPTER 8.
Sometimes local information provides us no guide, when the function has a wide flat region, or if we manage to land exactly on a critical point (usually this latter scenario only happens to methods that solve explicitly for critical points, such as Newton’s method).
In other cases, local moves can be too greedy and lead us along a path that moves downhill but away from any solution, as in figure , or along an unnecessarily long trajectory to the solution, as in figure .8.4 8.2 Currently, we do not understand which of these problems are most relevant to  making neural network optimization difficult, and this is an active area of research.
Regardless of which of these problems are most significant, all of them might be avoided if there exists a region of space connected reasonably directly to a solution by a path that local descent can follow, and if we are able to initialize learning within that well-behaved region.
This last view suggests research into choosing good initial points for traditional optimization algorithms to use.
8.2.8 Theoretical Limits of Optimization  Several theoretical results show that there are limits on the performance of any optimization algorithm we might design for neural networks (Blum and Rivest, 1992 Judd 1989 Wolpert and MacReady 1997; , ; , ).
Some theoretical results apply only to the case where the units of a neural network output discrete values.
However, most neural network units output smoothly increasing values that make optimization via local search feasible.
Some theoretical results show that there exist problem classes that are intractable, but it can be difficult to tell whether a particular problem falls into that class.
Other results show that finding a solution for a network of a given size is intractable, but in practice we can find a solution easily by using a larger network for which many  more parameter settings correspond to an acceptable solution.
Moreover, in the context of neural network training, we usually do not care about finding the exact minimum of a function, but seek only to reduce its value sufficiently to obtain good generalization error.
Theoretical analysis of whether an optimization algorithm can accomplish this goal is extremely difficult.
Developing more realistic bounds on the performance of optimization algorithms therefore remains an important goal for machine learning research.
OPTIMIZATION FOR TRAINING DEEP MODELS  8.3 Basic Algorithms  We have previously introduced the gradient descent (section ) algorithm that4.3 follows the gradient of an entire training set downhill.
This may be accelerated considerably by using stochastic gradient descent to follow the gradient of randomly selected minibatches downhill, as discussed in section and section .5.9 8.1.3  8.3.1 Stochastic Gradient Descent  Stochastic gradient descent (SGD) and its variants are probably the most used optimization algorithms for machine learning in general and for deep learning  in particular.
As discussed in section , it is possible to obtain an unbiased8.1.3 estimate of the gradient by taking the average gradient on a minibatch of m examples drawn i.i.d from the data generating distribution.
Algorithm shows how to follow this estimate of the gradient downhill.8.1  Algorithm 8.1 Stochastic gradient descent (SGD) update at training iteration k  Require: Learning rate k.
Require: Initial parameter θ while dostopping criterion not met Sample a minibatch of m examples from the training set {x(1), .
Compute gradient estimate: ĝ ← + 1m∇θ   iL f( (x  ( )i ; )θ , y( )i ) Apply update: θ θ← − ĝ end while  A crucial parameter for the SGD algorithm is the learning rate.
In practice, it is necessary to gradually decrease the learning rate over time, so we now denote the learning rate at iteration ask k.
This is because the SGD gradient estimator introduces a source of noise (the  random sampling of m training examples) that does not vanish even when we arrive at a minimum.
By comparison, the true gradient of the total cost function becomes small and then 0 when we approach and reach a minimum using batch gradient descent, so batch gradient descent can use a fixed learning rate.
A sufficient condition to guarantee convergence of SGD is that  ∞  k=1  k = and∞, (8.12)  294    CHAPTER 8.
OPTIMIZATION FOR TRAINING DEEP MODELS  ∞  k=1  2k < .∞ (8.13)  In practice, it is common to decay the learning rate linearly until iteration :τ  k = (1 )− α 0 + ατ (8.14)  with α = kτ .
After iteration , it is common to leave constant.τ   The learning rate may be chosen by trial and error, but it is usually best to choose it by monitoring learning curves that plot the objective function as a function of time.
This is more of an art than a science, and most guidance on this subject should be regarded with some skepticism.
Usually τ may be set to the number of iterations required to make a few hundred passes through the training set.
If it is too large, the learning curve will show violent oscillations, with the cost function often increasing significantly.
Gentle oscillations are fine, especially if training with a stochastic cost function such as the cost function arising from the use of dropout.
If the learning rate is too low, learning proceeds slowly, and if the initial learning rate is too low, learning may become stuck with a high cost value.
Typically, the optimal initial learning rate, in terms of total training time and the final cost value, is higher than the learning rate that yields the best performance after the first 100 iterations or so.
Therefore, it is usually best to monitor the first  several iterations and use a learning rate that is higher than the best-performing learning rate at this time, but not so high that it causes severe instability.
The most important property of SGD and related minibatch or online gradient- based optimization is that computation time per update does not grow with the number of training examples.
For a large enough dataset, SGD may converge to within some fixed tolerance of its final test set error before it has processed the entire training set.
To study the convergence rate of an optimization algorithm it is common to measure the excess error J(θ)− minθ J(θ), which is the amount that the current cost function exceeds the minimum possible cost.
When SGD is applied to a convex  problem, the excess error is O ( 1√ k ) after k iterations, while in the strongly convex  case it is O( 1k).
However, the Cramér-Rao bound ( , ; ,Cramér 1946 Rao 1945) states that generalization error cannot decrease faster than O(1k ).
OPTIMIZATION FOR TRAINING DEEP MODELS  and Bousquet 2008( ) argue that it therefore may not be worthwhile to pursue an optimization algorithm that converges faster than O( 1k ) for machine learning tasks—faster convergence presumably corresponds to overfitting.
Moreover, the asymptotic analysis obscures many advantages that stochastic gradient descent has after a small number of steps.
With large datasets, the ability of SGD to make rapid initial progress while evaluating the gradient for only very few examples outweighs its slow asymptotic convergence.
Most of the algorithms described in the remainder of this chapter achieve benefits that matter in practice but are lost  in the constant factors obscured by the O( 1k) asymptotic analysis.
One can also trade off the benefits of both batch and stochastic gradient descent by gradually increasing the minibatch size during the course of learning.
For more information on SGD, see ( ).Bottou 1998  8.3.2 Momentum  While stochastic gradient descent remains a very popular optimization strategy, learning with it can sometimes be slow.
The method of momentum (Polyak 1964, ) is designed to accelerate learning, especially in the face of high curvature, small but consistent gradients, or noisy gradients.
The momentum algorithm accumulates an exponentially decaying moving average of past gradients and continues to move in their direction.
The effect of momentum is illustrated in figure .8.5  Formally, the momentum algorithm introduces a variable v that plays the role of velocity—it is the direction and speed at which the parameters move through parameter space.
The name momentum derives from a physical analogy, in  which the negative gradient is a force moving a particle through parameter space, according to Newton’s laws of motion.
In the momentum learning algorithm, we assume unit mass, so the velocity vector v may also be regarded as the momentum of the particle.
A hyperparameter α ∈ [0, 1) determines how quickly the contributions of previous gradients exponentially decay.
The update rule is given by:  v v← α − ∇ θ   1  m  m  i=1  L( (f x( )i ; )θ , y( )i )    , (8.15)  θ θ v← + .
(8.16)  The velocity v accumulates the gradient elements ∇θ  1 m  m i=1 L( (f x  ( )i ; )θ , y( )i )  .
OPTIMIZATION FOR TRAINING DEEP MODELS  − − −30 20 10 0 10 20 −30  −20  −10  0  10  20  Figure 8.5: Momentum aims primarily to solve two problems: poor conditioning of the Hessian matrix and variance in the stochastic gradient.
The red path cutting across the contours indicates the path followed by the momentum learning rule as it minimizes this function.
At each step along the way, we draw an arrow indicating the step that gradient descent would take at that point.
We can see that a poorly conditioned quadratic objective looks like a long, narrow valley or canyon with steep sides.
Momentum correctly traverses the canyon lengthwise, while gradient steps waste time moving back and forth across the narrow axis of the canyon.
OPTIMIZATION FOR TRAINING DEEP MODELS  Previously, the size of the step was simply the norm of the gradient multiplied by the learning rate.
If the momentum algorithm always observes gradient g, then it will accelerate in the direction of −g, until reaching a terminal velocity where the size of each step is  || ||g 1 − α.
For  example, α = .9 corresponds to multiplying the maximum speed by relative to10 the gradient descent algorithm.
Algorithm 8.2 Stochastic gradient descent (SGD) with momentum  Require: Learning rate , momentum parameter . α Require: Initial parameter , initial velocity .θ v while dostopping criterion not met Sample a minibatch of m examples from the training set {x(1), .
Compute gradient estimate: g ← 1m∇θ  i L f( (x  ( )i ; )θ , y( )i ) Compute velocity update: v v g← α −  Apply update: θ θ v← + end while  We can view the momentum algorithm as simulating a particle subject to continuous-time Newtonian dynamics.
The physical analogy can help to build intuition for how the momentum and gradient descent algorithms behave.
(8.18)  Rather than viewing this as a second-order differential equation of the position, we can introduce the variable v(t) representing the velocity of the particle at time t and rewrite the Newtonian dynamics as a first-order differential equation:  v( ) =t ∂  ∂t θ( )t , (8.19)  298    CHAPTER 8.
(8.20)  The momentum algorithm then consists of solving the differential equations via numerical simulation.
A simple numerical method for solving differential equations is Euler’s method, which simply consists of simulating the dynamics defined by the equation by taking small, finite steps in the direction of each gradient.
The gradient descent algorithm would simply take a single step based on each gradient, but the Newtonian scenario used by the momentum algorithm instead uses this force to alter the velocity of the particle.
Whenever it descends a steep part of the surface, it gathers speed and continues sliding in that direction until it begins to go uphill again.
Imagine a hockey puck sliding down  one side of a valley and straight up the other side, oscillating back and forth forever, assuming the ice is perfectly frictionless.
In physics terminology, this force corresponds to viscous drag, as if the particle must push through a resistant medium such as syrup.
This causes the particle to gradually lose energy over time and eventually converge to a local minimum.
Part of the reason to use −v(t) is mathematical convenience—an integer power of the velocity is easy to work with.
However, other physical systems have other kinds of drag based on other integer powers of the velocity.
For example, a particle traveling through the air experiences turbulent drag, with force proportional to the square of the  velocity, while a particle moving along the ground experiences dry friction, with a force of constant magnitude.
Turbulent drag, proportional to the square of the velocity, becomes very weak when the velocity is small.
A particle with a non-zero initial velocity that experiences only the force of turbulent drag will move away from its initial position forever, with the distance from the starting point growing like O(log t).
When the force due to the gradient of the cost function is small but non-zero, the constant force due to friction can cause the particle to come to rest before reaching a local minimum.
OPTIMIZATION FOR TRAINING DEEP MODELS  that the gradient can continue to cause motion until a minimum is reached, but strong enough to prevent motion if the gradient does not justify moving.
( ) introduced a variant of the momentum algorithm that was  inspired by Nesterov’s accelerated gradient method ( , , ).
TheNesterov 1983 2004 update rules in this case are given by:  v v← α − ∇ θ   1  m  m  i=1  L  f x( ( )i ; + )θ αv ,y( )i    , (8.21)  θ θ v← + , (8.22)  where the parameters α and  play a similar role as in the standard momentum method.
Thus one can interpret Nesterov momentum as attempting to add a correction factor to the standard method of momentum.
The complete Nesterov momentum algorithm is presented in algorithm .8.3  In the convex batch gradient case, Nesterov momentum brings the rate of convergence of the excess error from O(1/k) (after k steps) to O(1/k2) as shown by Nesterov 1983( ).
Unfortunately, in the stochastic gradient case, Nesterov momentum does not improve the rate of convergence.
Algorithm 8.3 Stochastic gradient descent (SGD) with Nesterov momentum  Require: Learning rate , momentum parameter . α Require: Initial parameter , initial velocity .θ v while dostopping criterion not met Sample a minibatch of m examples from the training set {x(1), .
Apply interim update: θ̃ θ v← + α Compute gradient (at interim point): g ← 1m∇θ̃   iL f( (x  ( )i ; θ̃ y), ( )i )  Compute velocity update: v v g← α −  Apply update: θ θ v← + end while  300    CHAPTER 8.
OPTIMIZATION FOR TRAINING DEEP MODELS  8.4 Parameter Initialization Strategies  Some optimization algorithms are not iterative by nature and simply solve for a solution point.
Other optimization algorithms are iterative by nature but, when applied to the right class of optimization problems, converge to acceptable solutions in an acceptable amount of time regardless of initialization.
Training algorithms for deep  learning models are usually iterative in nature and thus require the user to specify some initial point from which to begin the iterations.
Moreover, training deep models is a sufficiently difficult task that most algorithms are strongly affected by the choice of initialization.
The initial point can determine whether the algorithm converges at all, with some initial points being so unstable that the algorithm encounters numerical difficulties and fails altogether.
When learning does converge, the initial point can determine how quickly learning converges and whether it converges to a point with high or low cost.
Also, points of comparable cost can have wildly varying generalization error, and the initial point can affect the generalization as well.
Designing improved  initialization strategies is a difficult task because neural network optimization is not yet well understood.
Most initialization strategies are based on achieving some nice properties when the network is initialized.
However, we do not have a good understanding of which of these properties are preserved under which circumstances after learning begins to proceed.
A further difficulty is that some initial points may be beneficial from the viewpoint of optimization but detrimental from the viewpoint of generalization.
Our understanding of how the initial point affects generalization is especially primitive, offering little to no guidance for how to select the initial point.
Perhaps the only property known with complete certainty is that the initial parameters need to “break symmetry” between different units.
If two hidden  units with the same activation function are connected to the same inputs, then these units must have different initial parameters.
If they have the same initial parameters, then a deterministic learning algorithm applied to a deterministic cost and model will constantly update both of these units in the same way.
Even if the model or training algorithm is capable of using stochasticity to compute different updates for different units (for example, if one trains with dropout), it is usually best to initialize each unit to compute a different function from all of the other units.
This may help to make sure that no input patterns are lost in the null space of forward propagation and no gradient patterns are lost in the null space of back-propagation.
We could explicitly search for a large set of basis functions that are all mutually different from each other, but this often incurs a noticeable computational cost.
For example, if we have at most as many outputs as inputs, we could use Gram-Schmidt orthogonalization on an initial weight matrix, and be guaranteed that each unit computes a very different function from each other unit.
Random initialization from a high-entropy distribution over a high-dimensional space is computationally cheaper and unlikely to assign any units to compute the same function as each other.
Typically, we set the biases for each unit to heuristically chosen constants, and initialize only the weights randomly.
Extra parameters, for example, parameters encoding the conditional variance of a prediction, are usually set to heuristically chosen constants much like the biases are.
We almost always initialize all the weights in the model to values drawn randomly from a Gaussian or uniform distribution.
The choice of Gaussian or uniform distribution does not seem to matter very much, but has not been exhaustively studied.
The scale of the initial distribution, however, does have a large effect on both the outcome of the optimization procedure and on the ability of the network to generalize.
Larger initial weights will yield a stronger symmetry breaking effect, helping  to avoid redundant units.
They also help to avoid losing signal during forward or back-propagation through the linear component of each layer—larger values in the matrix result in larger outputs of matrix multiplication.
Initial weights that are too large may, however, result in exploding values during forward propagation or back-propagation.
In recurrent networks, large weights can also result in chaos (such extreme sensitivity to small perturbations of the input that the behavior of the deterministic forward propagation procedure appears random).
To some extent, the exploding gradient problem can be mitigated by gradient clipping (thresholding the values of the gradients before performing a gradient descent step).
Large weights may also result in extreme values that cause the activation function to saturate, causing complete loss of gradient through saturated units.
The perspectives of regularization and optimization can give very different insights into how we should initialize a network.
The optimization perspective suggests that the weights should be large enough to propagate information success- fully, but some regularization concerns encourage making them smaller.
The use of an optimization algorithm such as stochastic gradient descent that makes small incremental changes to the weights and tends to halt in areas that are nearer to the initial parameters (whether due to getting stuck in a region of low gradient, or  302    CHAPTER 8.
OPTIMIZATION FOR TRAINING DEEP MODELS  due to triggering some early stopping criterion based on overfitting) expresses a prior that the final parameters should be close to the initial parameters.
Recall from section that gradient descent with early stopping is equivalent to weight7.8 decay for some models.
In the general case, gradient descent with early stopping is not the same as weight decay, but does provide a loose analogy for thinking about the effect of initialization.
We can think of initializing the parameters θ to θ0 as being similar to imposing a Gaussian prior p(θ) with mean θ0 .
This prior says that it is more  likely that units do not interact with each other than that they do interact.
Units interact only if the likelihood term of the objective function expresses a strong preference for them to interact.
On the other hand, if we initialize θ0 to large values, then our prior specifies which units should interact with each other, and how they should interact.
One heuristic is to initialize the weights of a fully connected layer with m inputs and n outputs by sampling each weight from U (− 1√  m , 1√ m  ), while Glorot and Bengio  ( ) suggest using the2010 normalized initialization  Wi,j ∼ U   −   6  m n+ ,   6  m n+   .
(8.23)  This latter heuristic is designed to compromise between the goal of initializing all layers to have the same activation variance and the goal of initializing all layers to have the same gradient variance.
The formula is derived using the assumption that the network consists only of a chain of matrix multiplications, with no nonlinearities.
Real neural networks obviously violate this assumption, but many strategies designed for the linear model perform reasonably well on its nonlinear counterparts.
( ) recommend initializing to random orthogonal matrices, with a carefully chosen scaling or gain factor g that accounts for the nonlinearity applied at each layer.
They derive specific values of the scaling factor for different types of nonlinear activation functions.
This initialization scheme is also motivated by a model of a deep network as a sequence of matrix multiplies without nonlinearities.
Under such a model, this initialization scheme guarantees that the total number of training iterations required to reach convergence is independent of depth.
Increasing the scaling factor g pushes the network toward the regime where activations increase in norm as they propagate forward through the network and gradients increase in norm as they propagate backward.
( ) showedSussillo 2014 that setting the gain factor correctly is sufficient to train networks as deep as  303    CHAPTER 8.
OPTIMIZATION FOR TRAINING DEEP MODELS  1,000 layers, without needing to use orthogonal initializations.
A key insight of this approach is that in feedforward networks, activations and gradients can grow or shrink on each step of forward or back-propagation, following a random walk behavior.
If this random walk is tuned to preserve norms, then feedforward networks can mostly avoid the vanishing and exploding gradients problem that arises when the same weight matrix is used at each step, described in section .8.2.5  Unfortunately, these optimal criteria for initial weights often do not lead to  optimal performance.
First, we may be using the wrong criteria—it may not actually be beneficial to preserve the norm of a signal throughout the entire network.
Second, the properties imposed at initialization may not persist after learning has begun to proceed.
Third, the criteria might succeed at improving the speed of optimization but inadvertently increase generalization error.
In practice, we usually need to treat the scale of the weights as a hyperparameter whose optimal value lies somewhere roughly near but not exactly equal to the theoretical predictions.
One drawback to scaling rules that set all of the initial weights to have the same standard deviation, such as 1√  m , is that every individual weight becomes  extremely small when the layers become large.
( ) introduced anMartens 2010 alternative initialization scheme called sparse initialization in which each unit is initialized to have exactly k non-zero weights.
The idea is to keep the total amount of input to the unit independent from the number of inputs m without making the magnitude of individual weight elements shrink with m. Sparse initialization helps to achieve more diversity among the units at initialization time.
However, it also imposes a very strong prior on the weights that are chosen to have large Gaussian values.
Because it takes a long time for gradient descent to shrink “incorrect” large values, this initialization scheme can cause problems for units such as maxout units  that have several filters that must be carefully coordinated with each other.
When computational resources allow it, it is usually a good idea to treat the initial scale of the weights for each layer as a hyperparameter, and to choose these scales using a hyperparameter search algorithm described in section , such11.4.2 as random search.
A good rule of thumb for choosing the initial scales is to look at the range or standard deviation of activations or gradients on a single minibatch of data.
If the weights are too small, the range of activations across the minibatch will shrink as the activations propagate forward through the network.
OPTIMIZATION FOR TRAINING DEEP MODELS  increasing its weights, it is possible to eventually obtain a network with reasonable initial activations throughout.
If learning is still too slow at this point, it can be useful to look at the range or standard deviation of the gradients as well as the activations.
This procedure can in principle be automated and is generally less computationally costly than hyperparameter optimization based on validation set error because it is based on feedback from the behavior of the initial model on a single batch of data, rather than on feedback from a trained model on the validation set.
While long used heuristically, this protocol has recently been specified more  formally and studied by ( ).Mishkin and Matas 2015  So far we have focused on the initialization of the weights.
There are a few situations where we may set some biases to non-zero values:  • If a bias is for an output unit, then it is often beneficial to initialize the bias to obtain the right marginal statistics of the output.
To do this, we assume that the initial weights are small enough that the output of the unit is determined only by the bias.
This justifies setting the bias to the inverse of the activation function applied to the marginal statistics of the output in the training set.
For example, if the output is a distribution over classes and this distribution is a highly skewed distribution with the marginal probability of class i given by element ci of some vector c, then we can set the bias vector b by solving the equation softmax(b) = c. This applies not only to classifiers but also to  models we will encounter in Part , such as autoencoders and BoltzmannIII machines.
These models have layers whose output should resemble the input data x, and it can be very helpful to initialize the biases of such layers to match the marginal distribution over .x  • Sometimes we may want to choose the bias to avoid causing too much saturation at initialization.
For example, we may set the bias of a ReLU  hidden unit to 0.1 rather than 0 to avoid saturating the ReLU at initialization.
This approach is not compatible with weight initialization schemes that do not expect strong input from the biases though.
For example, it is not recommended for use with random walk initialization ( , ).Sussillo 2014  • Sometimes a unit controls whether other units are able to participate in a function.
In such situations, we have a unit with output u and another unit  h ∈ [0, 1], and they are multiplied together to produce an output uh.
( ) advocate setting the bias to for the forget gate of1 the LSTM model, described in section .10.10  Another common type of parameter is a variance or precision parameter.
For example, we can perform linear regression with a conditional variance estimate using the model  p y y( | Nx) = ( | wTx+ 1 )b, /β (8.24)  where β is a precision parameter.
Another approach is to assume the initial weights are close enough to zero that the biases may be set while ignoring the effect of the weights, then set the biases to produce the correct marginal mean of the output, and set the variance parameters to the marginal variance of the output in the training set.
Besides these simple constant or random methods of initializing model parame- ters, it is possible to initialize model parameters using machine learning.
A common strategy discussed in part of this book is to initialize a supervised model withIII the parameters learned by an unsupervised model trained on the same inputs.
Even performing supervised training on an unrelated task can sometimes yield an initialization that offers faster convergence than a random initialization.
Some of these initialization strategies may yield faster convergence and better generalization because they encode information about the distribution in the initial parameters of the model.
Others apparently perform well primarily because they set the parameters to have the right scale or set different units to compute different functions from each other.
8.5 Algorithms with Adaptive Learning Rates  Neural network researchers have long realized that the learning rate was reliably one of the hyperparameters that is the most difficult to set because it has a significant impact on model performance.
As we have discussed in sections and , the4.3 8.2 cost is often highly sensitive to some directions in parameter space and insensitive to others.
The momentum algorithm can mitigate these issues somewhat, but does so at the expense of introducing another hyperparameter.
If we believe that the directions of sensitivity are somewhat axis-aligned, it can make sense to use a separate learning  306    CHAPTER 8.
OPTIMIZATION FOR TRAINING DEEP MODELS  rate for each parameter, and automatically adapt these learning rates throughout the course of learning.
The algorithm ( , ) is an early heuristic approachdelta-bar-delta Jacobs 1988 to adapting individual learning rates for model parameters during training.
The approach is based on a simple idea: if the partial derivative of the loss, with respect to a given model parameter, remains the same sign, then the learning rate should increase.
If the partial derivative with respect to that parameter changes sign, then the learning rate should decrease.
More recently, a number of incremental (or mini-batch-based) methods have been introduced that adapt the learning rates of model parameters.
8.5.1 AdaGrad  The AdaGrad algorithm, shown in algorithm , individually adapts the learning8.4  rates of all model parameters by scaling them inversely proportional to the square root of the sum of all of their historical squared values ( , ).
2011 parameters with the largest partial derivative of the loss have a correspondingly rapid decrease in their learning rate, while parameters with small partial derivatives have a relatively small decrease in their learning rate.
In the context of convex optimization, the AdaGrad algorithm enjoys some desirable theoretical properties.
However, empirically it has been found that—for training deep neural network models—the accumulation of squared gradients from the beginning of training can result in a premature and excessive decrease in the effective learning rate.
8.5.2 RMSProp  The RMSProp algorithm ( , ) modifies AdaGrad to perform better inHinton 2012 the non-convex setting by changing the gradient accumulation into an exponentially weighted moving average.
When applied to a non-convex function to train a neural network, the learning trajectory may pass through many different structures and  eventually arrive at a region that is a locally convex bowl.
AdaGrad shrinks the learning rate according to the entire history of the squared gradient and may  307    CHAPTER 8.
OPTIMIZATION FOR TRAINING DEEP MODELS  Algorithm 8.4 The AdaGrad algorithm  Require: Global learning rate   Require: Initial parameter θ Require: Small constant , perhapsδ 10−7, for numerical stability Initialize gradient accumulation variable r = 0 while dostopping criterion not met Sample a minibatch of m examples from the training set {x(1), .
Compute gradient: g ← 1m∇θ  iL f( (x  ( )i ; )θ , y( )i )  Accumulate squared gradient: r r g g← +  Compute update: ∆θ ← −   δ+ √ r   g. (Division and square root applied element-wise) Apply update: θ θ θ← + ∆ end while  have made the learning rate too small before arriving at such a convex structure.
RMSProp uses an exponentially decaying average to discard history from the extreme past so that it can converge rapidly after finding a convex bowl, as if it were an instance of the AdaGrad algorithm initialized within that bowl.
RMSProp is shown in its standard form in algorithm and combined with8.5 Nesterov momentum in algorithm .
Compared to AdaGrad, the use of the8.6 moving average introduces a new hyperparameter, ρ, that controls the length scale  of the moving average.
Empirically, RMSProp has been shown to be an effective and practical op- timization algorithm for deep neural networks.
It is currently one of the go-to optimization methods being employed routinely by deep learning practitioners.
8.5.3 Adam  Adam ( , ) is yet another adaptive learning rate optimizationKingma and Ba 2014 algorithm and is presented in algorithm .
The name “Adam” derives from8.7  the phrase “adaptive moments.” In the context of the earlier algorithms, it is perhaps best seen as a variant on the combination of RMSProp and momentum with a few important distinctions.
First, in Adam, momentum is incorporated directly as an estimate of the first order moment (with exponential weighting) of the gradient.
The most straightforward way to add momentum to RMSProp is to apply momentum to the rescaled gradients.
OPTIMIZATION FOR TRAINING DEEP MODELS  Algorithm 8.5 The RMSProp algorithm  Require: Global learning rate , decay rate . ρ  Require: Initial parameter θ Require: Small constant δ, usually 10−6 , used to stabilize division by small numbers.
Initialize accumulation variables r = 0 while dostopping criterion not met Sample a minibatch of m examples from the training set {x(1), .
Compute gradient: g ← 1m∇θ  iL f( (x  ( )i ; )θ , y( )i )  Accumulate squared gradient: r r g g← ρ + (1 )− ρ  Compute parameter update: ∆θ = − √  δ+r g .
( 1√  δ+r applied element-wise)  Apply update: θ θ θ← + ∆ end while  bias corrections to the estimates of both the first-order moments (the momentum term) and the (uncentered) second-order moments to account for their initialization at the origin (see algorithm ).
RMSProp also incorporates an estimate of the8.7 (uncentered) second-order moment, however it lacks the correction factor.
Adam is generally regarded as being fairly robust to the choice of hyperparameters, though the learning rate sometimes needs to be changed from the suggested default.
8.5.4 Choosing the Right Optimization Algorithm  In this section, we discussed a series of related algorithms that each seek to address the challenge of optimizing deep models by adapting the learning rate for each model parameter.
2014 presented a valuable comparison of a large number of optimization algorithms  across a wide range of learning tasks.
While the results suggest that the family of algorithms with adaptive learning rates (represented by RMSProp and AdaDelta) performed fairly robustly, no single best algorithm has emerged.
Currently, the most popular optimization algorithms actively in use include SGD, SGD with momentum, RMSProp, RMSProp with momentum, AdaDelta and Adam.
OPTIMIZATION FOR TRAINING DEEP MODELS  Algorithm 8.6 RMSProp algorithm with Nesterov momentum  Require: Global learning rate , decay rate , momentum coefficient . ρ α  Require: Initial parameter , initial velocity .θ v Initialize accumulation variable r = 0 while dostopping criterion not met Sample a minibatch of m examples from the training set {x(1), .
Compute interim update: θ̃ θ v← + α Compute gradient: g ← 1m∇θ̃   iL f( (x  ( )i ; θ̃ y), ( )i )  Accumulate gradient: r r g g← ρ + (1 )− ρ  Compute velocity update: v v← α − √  r  g. ( 1√  r applied element-wise)  Apply update: θ θ v← + end while  largely on the user’s familiarity with the algorithm (for ease of hyperparameter tuning).
8.6 Approximate Second-Order Methods  In this section we discuss the application of second-order methods to the training of deep networks.
1998a For simplicity of exposition, the only objective function we examine is the empirical  risk:  J( ) = θ Ex,y∼p̂data ( )x,y [ ( ( ; ) )] =L f x θ , y 1  m  m  i=1  L f( (x( )i ; )θ , y( )i ).
(8.25)  However the methods we discuss here extend readily to more general objective functions that, for instance, include parameter regularization terms such as those discussed in chapter .7  8.6.1 Newton’s Method  In section , we introduced second-order gradient methods.
In contrast to first-4.3 order methods, second-order methods make use of second derivatives to improve optimization.
We now describe Newton’s method in more detail, with emphasis on its application to neural network training.
OPTIMIZATION FOR TRAINING DEEP MODELS  Algorithm 8.7 The Adam algorithm  Require: Step size (Suggested default: ) 0 001.
(Suggested default:  10−8) Require: Initial parameters θ Initialize 1st and 2nd moment variables ,s = 0 r = 0 Initialize time step t = 0 while dostopping criterion not met Sample a minibatch of m examples from the training set {x(1), .
Compute gradient: g ← 1  m ∇θ   iL f( (x  ( )i ; )θ , y( )i ) t t← + 1 Update biased first moment estimate: s← ρ1s+ (1 − ρ1)g Update biased second moment estimate: r ← ρ2r + (1 − ρ2 )g g Correct bias in first moment: ŝ← s  1−ρt1 Correct bias in second moment: r̂← r  1−ρt2 Compute update: ∆ = θ − ŝ√  r̂+δ (operations applied element-wise)  Apply update: θ θ θ← + ∆ end while  Newton’s method is an optimization scheme based on using a second-order Tay- lor series expansion to approximate J (θ) near some point θ 0, ignoring derivatives of higher order:  J J( ) θ ≈ (θ0) + (θ θ− 0)∇θJ(θ0) + 1  2 (θ θ− 0)H θ θ( − 0), (8.26)  where H is the Hessian of J with respect to θ evaluated at θ0.
If we then solve for the critical point of this function, we obtain the Newton parameter update rule:  θ∗ = θ0 −H−1∇θJ(θ0) (8.27)  Thus for a locally quadratic function (with positive definite H), by rescaling the gradient byH −1, Newton’s method jumps directly to the minimum.
If the objective function is convex but not quadratic (there are higher-order terms), this  update can be iterated, yielding the training algorithm associated with Newton’s method, given in algorithm .8.8  311    CHAPTER 8.
OPTIMIZATION FOR TRAINING DEEP MODELS  Algorithm 8.8 Newton’s method with objective J(θ ) = 1 m  m i=1 L f( (x  ( )i ; )θ , y( )i ).
Require: Initial parameter θ0 Require: Training set of examplesm while dostopping criterion not met Compute gradient: g ← 1  m ∇θ   iL f( (x  ( )i ; )θ , y( )i )  Compute Hessian: H ← 1m ∇2θ  i L f( (x  ( )i ; )θ , y( )i ) Compute Hessian inverse: H−1  Compute update: ∆ = θ −H−1g Apply update: θ θ θ= + ∆ end while  For surfaces that are not quadratic, as long as the Hessian remains positive  definite, Newton’s method can be applied iteratively.
Second, update the parameters according to equation .8.27  In section , we discussed how Newton’s method is appropriate only when8.2.3 the Hessian is positive definite.
In deep learning, the surface of the objective function is typically non-convex with many features, such as saddle points, that are problematic for Newton’s method.
If the eigenvalues of the Hessian are not all positive, for example, near a saddle point, then Newton’s method can actually cause updates to move in the wrong direction.
(8.28)  This regularization strategy is used in approximations to Newton’s method, such as the Levenberg–Marquardt algorithm (Levenberg 1944 Marquardt 1963, ; , ), and works fairly well as long as the negative eigenvalues of the Hessian are still relatively close to zero.
In cases where there are more extreme directions of curvature, the value of α would have to be sufficiently large to offset the negative eigenvalues.
However, as α increases in size, the Hessian becomes dominated by the αI diagonal and the direction chosen by Newton’s method converges to the standard gradient divided by α.
When strong negative curvature is present, α may need to be so large that Newton’s method would make smaller steps than gradient descent with a properly chosen learning rate.
OPTIMIZATION FOR TRAINING DEEP MODELS  such as saddle points, the application of Newton’s method for training large neural networks is limited by the significant computational burden it imposes.
The number of elements in the Hessian is squared in the number of parameters, so with k parameters (and for even very small neural networks the number of parameters k can be in the millions), Newton’s method would require the inversion of a k k× matrix—with computational complexity of O(k3).
Also, since the parameters will change with every update, the inverse Hessian has to be computed at every training iteration.
As a consequence, only networks with a very small number of parameters  can be practically trained via Newton’s method.
In the remainder of this section, we will discuss alternatives that attempt to gain some of the advantages of Newton’s method while side-stepping the computational hurdles.
8.6.2 Conjugate Gradients  Conjugate gradients is a method to efficiently avoid the calculation of the inverse Hessian by iteratively descending conjugate directions.
The inspiration for this approach follows from a careful study of the weakness of the method of steepest  descent (see section for details), where line searches are applied iteratively in4.3 the direction associated with the gradient.
Figure illustrates how the method of8.6 steepest descent, when applied in a quadratic bowl, progresses in a rather ineffective back-and-forth, zig-zag pattern.
This happens because each line search direction, when given by the gradient, is guaranteed to be orthogonal to the previous line search direction.
At the minimum, where the line search terminates, the directional derivative is zero in direction dt−1: ∇θJ(θ) · dt−1 = 0.
Since the gradient at this point defines the current search direction, dt = ∇θJ (θ) will have no contribution in the direction dt−1.
This relationship between dt−1 and d t is illustrated in figure for8.6 multiple iterations of steepest descent.
As demonstrated in the figure, the choice of orthogonal directions of descent do not preserve the minimum along the previous search directions.
This gives rise to the zig-zag pattern of progress, where by descending to the minimum in the current gradient direction, we must re-minimize the objective in the previous gradient direction.
Thus, by following the gradient at the end of each line search we are, in a sense, undoing progress we have already made in the direction of the previous line search.
In the method of conjugate gradients, we seek to find a search direction that is conjugate to the previous line search direction, i.e.
OPTIMIZATION FOR TRAINING DEEP MODELS  � � �    �  �  �        Figure 8.6: The method of steepest descent applied to a quadratic cost surface.
The method of steepest descent involves jumping to the point of lowest cost along the line defined by the gradient at the initial point on each step.
This resolves some of the problems seen with using a fixed learning rate in figure , but even with the optimal step size4.6 the algorithm still makes back-and-forth progress toward the optimum.
By definition, at the minimum of the objective along a given direction, the gradient at the final point is orthogonal to that direction.
the form: dt = ∇θJ β( ) +θ tdt−1 (8.29)  where β t is a coefficient whose magnitude controls how much of the direction, dt−1, we should add back to the current search direction.
Two directions, dt and dt−1, are defined as conjugate if dt Hdt−1 = 0, where H is the Hessian matrix.
The straightforward way to impose conjugacy would involve calculation of the eigenvectors of H to choose βt, which would not satisfy our goal of developing a method that is more computationally viable than Newton’s method for large problems.
Polak-Ribière:  βt = (∇θJ(θt) − ∇θJ(θt−1)) ∇θJ(θt)  ∇θJ(θt−1 )∇θJ(θt−1) (8.31)  For a quadratic surface, the conjugate directions ensure that the gradient along the previous direction does not increase in magnitude.
As a consequence, in a k-dimensional parameter space, the conjugate gradient method requires at most k line searches to achieve the minimum.
The conjugate gradient algorithm is given in algorithm .8.9  Algorithm 8.9 The conjugate gradient method  Require: Initial parameters θ0 Require: Training set of examplesm Initialize ρ0 = 0 Initialize g0 = 0 Initialize t = 1 while dostopping criterion not met Initialize the gradient gt = 0 Compute gradient: gt ← 1m∇θ   i L f( (x  ( )i ; )θ , y( )i )  Compute βt = (g t−gt−1)gt  gt−1gt−1 (Polak-Ribière)  (Nonlinear conjugate gradient: optionally reset βt to zero, for example if t is a multiple of some constant , such as )k k = 5 Compute search direction: ρt = −gt + βtρt−1 Perform line search to find: ∗ = argmin  1 m  m i=1L f( (x  ( )i ;θt + ρt),y ( )i )  (On a truly quadratic cost function, analytically solve for ∗ rather than explicitly searching for it) Apply update: θt+1 = θt + ∗ρt t t← + 1 end while  Nonlinear Conjugate Gradients: So far we have discussed the method of conjugate gradients as it is applied to quadratic objective functions.
Of course, our primary interest in this chapter is to explore optimization methods for training neural networks and other related deep learning models where the corresponding objective function is far from quadratic.
Perhaps surprisingly, the method of conjugate gradients is still applicable in this setting, though with some modification.
OPTIMIZATION FOR TRAINING DEEP MODELS  are no longer assured to remain at the minimum of the objective for previous directions.
As a result, the nonlinear conjugate gradients algorithm includes occasional resets where the method of conjugate gradients is restarted with line search along the unaltered gradient.
Practitioners report reasonable results in applications of the nonlinear conjugate gradients algorithm to training neural networks, though it is often beneficial to initialize the optimization with a few iterations of stochastic gradient descent before commencing nonlinear conjugate gradients.
Also, while the (nonlinear) conjugate  gradients algorithm has traditionally been cast as a batch method, minibatch versions have been used successfully for the training of neural networks ( ,Le et al.
Adaptations of conjugate gradients specifically for neural networks have been proposed earlier, such as the scaled conjugate gradients algorithm ( ,Moller 1993).
8.6.3 BFGS  The Broyden–Fletcher–Goldfarb–Shanno (BFGS) algorithm attempts to bring some of the advantages of Newton’s method without the computational burden.
Recall that Newton’s update is given by  θ∗ = θ0 −H−1∇θJ(θ0), (8.32)  where H is the Hessian of J with respect to θ evaluated at θ0.
The primary computational difficulty in applying Newton’s update is the calculation of the inverse Hessian H−1.
The approach adopted by quasi-Newton methods (of which the BFGS algorithm is the most prominent) is to approximate the inverse with a matrix Mt that is iteratively refined by low rank updates to become a better approximation of H−1 .
The specification and derivation of the BFGS approximation is given in many textbooks on optimization, including Luenberger 1984( ).
Once the inverse Hessian approximationMt is updated, the direction of descent ρt is determined by ρt =Mtgt.
A line search is performed in this direction to determine the size of the step, ∗, taken in this direction.
(8.33)  Like the method of conjugate gradients, the BFGS algorithm iterates a series of line searches with the direction incorporating second-order information.
OPTIMIZATION FOR TRAINING DEEP MODELS  unlike conjugate gradients, the success of the approach is not heavily dependent on the line search finding a point very close to the true minimum along the line.
Thus, relative to conjugate gradients, BFGS has the advantage that it can spend less time refining each line search.
On the other hand, the BFGS algorithm must store the inverse Hessian matrix, M, that requires O(n2) memory, making BFGS impractical for most modern deep learning models that typically have millions of parameters.
Limited Memory BFGS (or L-BFGS) The memory costs of the BFGS algorithm can be significantly decreased by avoiding storing the complete inverse Hessian approximationM .
The L-BFGS algorithm computes the approximationM using the same method as the BFGS algorithm, but beginning with the assumption thatM ( 1)t− is the identity matrix, rather than storing the approximation from one step to the next.
However, unlike the method of conjugate gradients, this procedure remains well behaved when the minimum of the line search is reached only approximately.
The L-BFGS strategy with no storage described here can be generalized to include more information about the Hessian by storing some of the vectors used to update at each time step, which costs only per step.M O n( )  8.7 Optimization Strategies and Meta-Algorithms  Many optimization techniques are not exactly algorithms, but rather general templates that can be specialized to yield algorithms, or subroutines that can be incorporated into many different algorithms.
8.7.1 Batch Normalization  Batch normalization ( , ) is one of the most exciting recentIoffe and Szegedy 2015 innovations in optimizing deep neural networks and it is actually not an optimization algorithm at all.
Instead, it is a method of adaptive reparametrization, motivated by the difficulty of training very deep models.
The gradient tells how to update each parameter, under the assumption that the other layers do not change.
When we make the update, unexpected results can happen because many functions composed together are changed simultaneously, using updates that were computed under the assumption that the other functions remain constant.
OPTIMIZATION FOR TRAINING DEEP MODELS  example, suppose we have a deep neural network that has only one unit per layer and does not use an activation function at each hidden layer: ŷ = xw1w2w3 .
The first-order Taylor series approximation of ŷ predicts that the value of ŷ will decrease  by gg.
If we wanted to decrease ŷ by .1, this first-order information available in the gradient suggests we could set the learning rate  to .1  gg .
However, the actual update will include second-order and third-order effects, on up to effects of order l. The new value of ŷ is given by  x w( 1 − g1 )(w2 − g 2) (.
This term might be negligible if l i=3w i is small, or might be exponentially large  if the weights on layers through3 l are greater than .
This makes it very hard1 to choose an appropriate learning rate, because the effects of an update to the parameters for one layer depends so strongly on all of the other layers.
Second-order optimization algorithms address this issue by computing an update that takes these second-order interactions into account, but we can see that in very deep networks, even higher-order interactions can be significant.
Even second-order optimization algorithms are expensive and usually require numerous approximations that prevent  them from truly accounting for all significant second-order interactions.
Let H be a minibatch of activations of the layer to normalize, arranged as a design matrix, with the activations for each example appearing in a row of the matrix.
To normalize , we replace it withH  H = H µ− σ  , (8.35)  where µ is a vector containing the mean of each unit and σ is a vector containing the standard deviation of each unit.
The arithmetic here is based on broadcasting the vector µ and the vector σ to be applied to every row of the matrixH .
Within each row, the arithmetic is element-wise, so Hi,j is normalized by subtracting µj  318    CHAPTER 8.
The rest of the network then operates onH  in exactly the same way that the original network operated on .H  At training time,  µ = 1  m    i  Hi,: (8.36)  and  σ =   δ +  1  m    i  ( )H µ− 2i , (8.37)  where δ is a small positive value such as 10−8 imposed to avoid encountering the undefined gradient of  √ z at z = 0.
Crucially, we back-propagate through  these operations for computing the mean and the standard deviation, and for applying them to normalize H. This means that the gradient will never propose an operation that acts simply to increase the standard deviation or mean of hi; the normalization operations remove the effect of such an action and zero out its component in the gradient.
Previous approaches had involved adding penalties to  the cost function to encourage units to have normalized activation statistics or involved intervening to renormalize unit statistics after each gradient descent step.
The former approach usually resulted in imperfect normalization and the latter usually resulted in significant wasted time as the learning algorithm repeatedly proposed changing the mean and variance and the normalization step repeatedly undid this change.
Batch normalization reparametrizes the model to make some units always be standardized by definition, deftly sidestepping both problems.
This allows the model to be evaluated on a single example, without needing to use definitions of µ and σ that depend on an entire minibatch.
wl example, we see that we can mostly resolve the  difficulties in learning this model by normalizing hl−1.
After applying batch normalization, we obtain the normalized ĥl−1 that restores the zero mean and unit variance properties.
Learning in this model is now very simple because the parameters at the lower layers simply do not have an effect in most cases; their output is always renormalized to a unit Gaussian.
Changing one of the lower layer weights to can make the output become degenerate, and changing the sign0  319    CHAPTER 8.
OPTIMIZATION FOR TRAINING DEEP MODELS  of one of the lower weights can flip the relationship between ĥl−1 and y.
In our linear example, the lower layers no longer have any harmful effect, but they also no longer have any beneficial effect.
This is because we have normalized out the first and second order statistics, which is all that a linear network can influence.
In a deep neural  network with nonlinear activation functions, the lower layers can perform nonlinear transformations of the data, so they remain useful.
Batch normalization acts to standardize only the mean and variance of each unit in order to stabilize learning, but allows the relationships between units and the nonlinear statistics of a single unit to change.
Because the final layer of the network is able to learn a linear transformation, we may actually wish to remove all linear relationships between units within a layer.
Unfortunately, eliminating all linear interactions is much more expensive than standardizing the mean and standard deviation of each individual unit, and so far batch normalization remains the most  practical approach.
Normalizing the mean and standard deviation of a unit can reduce the expressive power of the neural network containing that unit.
In order to maintain the expressive power of the network, it is common to replace the batch of hidden unit activationsH with γH  +β rather than simply the normalized H .
The variables γ and β are learned parameters that allow the new variable to have any mean and standard deviation.
At first glance, this may seem useless—why did we set the mean to 0, and then introduce a parameter that allows it to be set back to any arbitrary value β?
The answer is that the new parametrization can represent the same family of functions of the input as the old parametrization, but the new parametrization has different learning dynamics.
In the old parametrization, the mean ofH was determined by a complicated interaction between the parameters  in the layers below H. In the new parametrization, the mean of γH  + β is determined solely by β.
Most neural network layers take the form of φ(XW + b) where φ is some fixed nonlinear activation function such as the rectified linear transformation.
It is natural to wonder whether we should apply batch normalization to the input X, or to the transformed value XW + b .
The bias term should be omitted because it becomes redundant with the β parameter applied by the batch normalization reparametrization.
The input to a layer is usually the output of a nonlinear activation function such as the rectified linear function in a previous layer.
The statistics of the input are thus more non-Gaussian and less amenable to standardization by linear operations.
In convolutional networks, described in chapter , it is important to apply the9 same normalizing µ and σ at every spatial location within a feature map, so that  the statistics of the feature map remain the same regardless of spatial location.
8.7.2 Coordinate Descent  In some cases, it may be possible to solve an optimization problem quickly by breaking it into separate pieces.
If we minimize f(x) with respect to a single variable xi, then minimize it with respect to another variable xj and so on, repeatedly cycling through all variables, we are guaranteed to arrive at a (local) minimum.
More generally, block coordinate descent refers to minimizing with respect to a subset of the variables simultaneously.
The term “coordinate descent” is often used to refer to block coordinate descent as well as the strictly individual coordinate descent.
Coordinate descent makes the most sense when the different variables in the optimization problem can be clearly separated into groups that play relatively isolated roles, or when optimization with respect to one group of variables is significantly more efficient than optimization with respect to all of the variables.
(8.38)  This function describes a learning problem called sparse coding, where the goal is to find a weight matrix W that can linearly decode a matrix of activation values H to reconstruct the training set X .
Most applications of sparse coding also involve weight decay or a constraint on the norms of the columns of W , in order to prevent the pathological solution with extremely small and large .H W  The function J is not convex.
However, we can divide the inputs to the training algorithm into two sets: the dictionary parameters W and the code representationsH .
Minimizing the objective function with respect to either one of these sets of variables is a convex problem.
OPTIMIZATION FOR TRAINING DEEP MODELS  us an optimization strategy that allows us to use efficient convex optimization algorithms, by alternating between optimizing W with H fixed, then optimizing H Wwith fixed.
Coordinate descent is not a very good strategy when the value of one variable strongly influences the optimal value of another variable, as in the function f (x) = (x1 − x2)2 +α   x21 + x  2 2   where α is a positive constant.
The first term encourages  the two variables to have similar value, while the second term encourages them to be near zero.
Newton’s method can solve  the problem in a single step because it is a positive definite quadratic problem.
However, for small α, coordinate descent will make very slow progress because the first term does not allow a single variable to be changed to a value that differs significantly from the current value of the other variable.
8.7.3 Polyak Averaging  Polyak averaging (Polyak and Juditsky 1992, ) consists of averaging together several points in the trajectory through parameter space visited by an optimization  algorithm.
On some problem  classes, such as gradient descent applied to convex problems, this approach has strong convergence guarantees.
When applied to neural networks, its justification is more heuristic, but it performs well in practice.
The basic idea is that the optimization algorithm may leap back and forth across a valley several times without ever visiting a point near the bottom of the valley.
The average of all of the locations on either side should be close to the bottom of the valley though.
In non-convex problems, the path taken by the optimization trajectory can be very complicated and visit many different regions.
Including points in parameter space from the distant past that may be separated from the current point by large  barriers in the cost function does not seem like a useful behavior.
As a result, when applying Polyak averaging to non-convex problems, it is typical to use an exponentially decaying running average:  θ̂( )t = αθ̂( 1)t− + (1 )− α θ( )t .
OPTIMIZATION FOR TRAINING DEEP MODELS  8.7.4 Supervised Pretraining  Sometimes, directly training a model to solve a specific task can be too ambitious  if the model is complex and hard to optimize or if the task is very difficult.
It is sometimes more effective to train a simpler model to solve the task, then make the model more complex.
It can also be more effective to train the model to solve a simpler task, then move on to confront the final task.
These strategies that involve training simple models on simple tasks before confronting the challenge of training the desired model to perform the desired task are collectively known as pretraining.
Greedy algorithms break a problem into many components, then solve for the optimal version of each component in isolation.
Unfortunately, combining the individually optimal components is not guaranteed to yield an optimal complete solution.
However, greedy algorithms can be computationally much cheaper than  algorithms that solve for the best joint solution, and the quality of a greedy solution is often acceptable if not optimal.
Greedy algorithms may also be followed by a fine-tuning stage in which a joint optimization algorithm searches for an optimal solution to the full problem.
Initializing the joint optimization algorithm with a greedy solution can greatly speed it up and improve the quality of the solution it finds.
In this section, we describe specifically those pretraining algorithms that break supervised learning problems into other simpler supervised learning problems.
This approach is known as .greedy supervised pretraining  In the original ( , ) version of greedy supervised pretraining,Bengio et al.
2007  each stage consists of a supervised learning training task involving only a subset of the layers in the final neural network.
An example of greedy supervised pretraining is illustrated in figure , in which each added hidden layer is pretrained as part8.7 of a shallow supervised MLP, taking as input the output of the previously trained hidden layer.
Instead of pretraining one layer at a time, Simonyan and Zisserman ( ) pretrain a deep convolutional network (eleven weight layers) and then use2015 the first four and last three layers from this network to initialize even deeper networks (with up to nineteen layers of weights).
( ) is to use the of the previouslyoutputs trained MLPs, as well as the raw input, as inputs for each added stage.
The hypothesis initially discussed by ( ) is that it helps to provide better guidance to theBengio et al.
OPTIMIZATION FOR TRAINING DEEP MODELS  yy  h(1)h(1)  xx  (a)  U(1)U(1)  W(1)W(1) yy  h(1)h(1)  xx  (b)  U(1)U(1)W(1)W(1)  yy  h(1)h(1)  xx  (c)  U(1)U(1)W(1)W(1)  h(2)h(2)  yyU(2)U(2)W (2)W(2)  yy  h(1)h(1)  xx  (d)  U(1)U(1)W(1)W(1)  h(2)h(2)  y  U(2)U(2)  W(2)W(2)  Figure 8.7: Illustration of one form of greedy supervised pretraining ( , ).Bengio et al.
We keep only the input-to-hidden layer of the original network and(c) discard the hidden-to-output layer.
We send the output of the first hidden layer as input to another supervised single hidden layer MLP that is trained with the same objective as the first network was, thus adding a second hidden layer.
(d) To further improve the optimization, we can jointly fine-tune all the layers, either only at the end or at each stage of this process.
An approach related to supervised pretraining extends the idea to the context of transfer learning: Yosinski 2014et al.
( ) pretrain a deep convolutional net with 8 layers of weights on a set of tasks (a subset of the 1000 ImageNet object categories) and then initialize a same-size network with the first k layers of the first net.
All the layers of the second network (with the upper layers initialized randomly) are then jointly trained to perform a different set of tasks (another subset of the 1000  ImageNet object categories), with fewer training examples than for the first set of tasks.
Other approaches to transfer learning with neural networks are discussed in section .15.2  Another related line of work is the FitNets ( , ) approach.Romero et al.
2015 This approach begins by training a network that has low enough depth and great enough width (number of units per layer) to be easy to train.
The student network is much deeper and thinner (eleven to nineteen layers) and would be difficult to train with SGD under normal circumstances.
The training of the student network is made easier by training the student network not only to predict the output for the original task, but also to predict the value of the middle layer  of the teacher network.
This extra task provides a set of hints about how the hidden layers should be used and can simplify the optimization problem.
Additional parameters are introduced to regress the middle layer of the 5-layer teacher network from the middle layer of the deeper student network.
However, instead of predicting the final classification target, the objective is to predict the middle hidden layer of the teacher network.
The lower layers of the student networks thus have two objectives: to help the outputs of the student network accomplish their task, as well as to predict the intermediate layer of the teacher network.
Although a thin and deep network appears to be more difficult to train than a wide and shallow network, the thin and deep network may generalize better and certainly has lower computational cost if it is thin enough to have far fewer parameters.
Without the hints on the hidden layer, the student network performs very poorly in the  experiments, both on the training and test set.
Hints on middle layers may thus be one of the tools to help train neural networks that otherwise seem difficult to train, but other optimization techniques or changes in the architecture may also solve the problem.
OPTIMIZATION FOR TRAINING DEEP MODELS  8.7.5 Designing Models to Aid Optimization  To improve optimization, the best strategy is not always to improve the optimization  algorithm.
Instead, many improvements in the optimization of deep models have come from designing the models to be easier to optimize.
In principle, we could use activation functions that increase and decrease in jagged non-monotonic patterns.
In practice, it is more important to choose a model family that is easy to optimize than to use a powerful optimization algorithm.
Most of the advances in neural network learning over the past 30 years have been obtained by changing the model family rather than changing the optimization procedure.
Stochastic gradient descent with momentum, which was used to train neural networks in the 1980s, remains in use in modern state of the art neural network applications.
Specifically, modern neural networks reflect a design choice to use linear trans-  formations between layers and activation functions that are differentiable almost everywhere and have significant slope in large portions of their domain.
In par- ticular, model innovations like the LSTM, rectified linear units and maxout units have all moved toward using more linear functions than previous models like deep networks based on sigmoidal units.
The gradient flows through many layers provided that the Jacobian of the linear transformation has reasonable singular values.
Moreover, linear functions consistently increase in a single direction, so even if the model’s output is very far from correct, it is clear simply from computing the gradient which direction its output should move to reduce the loss function.
In other words, modern neural nets have been designed so that their local gradient information  corresponds reasonably well to moving toward a distant solution.
For example, linear paths or skip connections between layers reduce the length of the shortest path from the lower layer’s parameters to the output, and thus mitigate the vanishing gradient problem (Srivastava 2015et al., ).
A related idea to skip connections is adding extra copies of the output that are attached to the intermediate hidden layers of the network, as in GoogLeNet ( , )Szegedy et al.
2014 to perform the same task as the primary output at the top of the network in order to ensure that the lower layers receive a large gradient.
This is an alternative to the pretraining  strategies, which were introduced in the previous section.
In this way, one can train jointly all the layers in a single phase but change the architecture, so that intermediate layers (especially the lower ones) can get some hints about what they  326    CHAPTER 8.
8.7.6 Continuation Methods and Curriculum Learning  As argued in section , many of the challenges in optimization arise from the8.2.7 global structure of the cost function and cannot be resolved merely by making better estimates of local update directions.
The predominant strategy for overcoming this problem is to attempt to initialize the parameters in a region that is connected to the solution by a short path through parameter space that local descent can discover.
Continuation methods are a family of strategies that can make optimization easier by choosing initial points to ensure that local optimization spends most of  its time in well-behaved regions of space.
The idea behind continuation methods is to construct a series of objective functions over the same parameters.
These cost functions are designed to be increasingly difficult, with J (0) being fairly easy to minimize, and J( )n , the most difficult, being J (θ), the true cost function motivating the entire process.
When we say that J ( )i is easier than J ( +1)i , we mean that it is well behaved over more of θ space.
A random initialization is more likely to land in the region where local descent can minimize the cost function successfully because this region is larger.
The series of cost functions are designed so that a solution to one is a good initial point of the next.
We thus begin by solving an easy problem then refine the solution to solve incrementally harder problems until we arrive at a solution to the true underlying problem.
Traditional continuation methods (predating the use of continuation methods for neural network training) are usually based on smoothing the objective function.
Continuation methods are also closely related to simulated annealing, which adds noise to the parameters (Kirkpatrick  1983et al., ).
See Mobahi and Fisher ( ) for an overview of recent literature, especially for AI applications.2015  Continuation methods traditionally were mostly designed with the goal of overcoming the challenge of local minima.
Specifically, they were designed to reach a global minimum despite the presence of many local minima.
To do so,  these continuation methods would construct easier cost functions by “blurring” the original cost function.
This blurring operation can be done by approximating  J( )i ( ) = θ Eθ∼N (θ ;θ,σ( )2i )J(θ ) (8.40)  via sampling.
In many cases, this blurring preserves enough information about the location of a global minimum that we can find the global minimum by solving progressively less blurred versions of the problem.
First, it might successfully define a series of cost functions where the first is convex and the optimum tracks from one function to the next arriving at the global minimum, but it might require so many incremental cost functions that the cost of the entire procedure remains high.
The other two ways that continuation methods fail both correspond to the method not being applicable.
Second, the function may become convex as a result of blurring, but the minimum of this blurred function may track to a local rather than a global minimum of the original cost function.
Though continuation methods were mostly originally designed to deal with the problem of local minima, local minima are no longer believed to be the primary problem for neural network optimization.
The easier objective functions introduced by the continuation method can eliminate flat regions, decrease variance in gradient estimates, improve conditioning  of the Hessian matrix, or do anything else that will either make local updates easier to compute or improve the correspondence between local update directions and progress toward a global solution.
( ) observed that an approach called curriculum learning or shaping can be interpreted as a continuation method.
Curriculum learning is based on the idea of planning a learning process to begin by learning simple concepts and progress to learning more complex concepts that depend on these simpler concepts.
This basic strategy was previously known to accelerate progress in animal training ( , ; , ;Skinner 1958 Peterson 2004 Krueger and Dayan 2009, ) and machine learning ( , ; , ; , ).
2009 justified this strategy as a continuation method, where earlier J( )i are made easier by increasing the influence of simpler examples (either by assigning their contributions  to the cost function larger coefficients, or by sampling them more frequently), and experimentally demonstrated that better results could be obtained by following a curriculum on a large-scale neural language modeling task.
Curriculum learning has been successful on a wide range of natural language (Spitkovsky 2010et al., ; Collobert 2011a Mikolov 2011b Tu and Honavar 2011et al., ; et al., ; , ) and computer vision ( , ; , ; , )Kumar et al.
Curriculum learning was also verified as being consistent with the way in which humans teach ( , ): teachers start by showing easier andKhan et al.
OPTIMIZATION FOR TRAINING DEEP MODELS  more prototypical examples and then help the learner refine the decision surface with the less obvious cases.
Curriculum-based strategies are more effective for teaching humans than strategies based on uniform sampling of examples, and can also increase the effectiveness of other teaching strategies ( ,Basu and Christensen 2013).
Another important contribution to research on curriculum learning arose in the context of training recurrent neural networks to capture long-term dependencies: Zaremba and Sutskever 2014( ) found that much better results were obtained with a  stochastic curriculum, in which a randommix of easy and difficult examples is always presented to the learner, but where the average proportion of the more difficult examples (here, those with longer-term dependencies) is gradually increased.
With a deterministic curriculum, no improvement over the baseline (ordinary training from the full training set) was observed.
We have now described the basic family of neural network models and how to regularize and optimize them.
In the chapters ahead, we turn to specializations of the neural network family, that allow neural networks to scale to very large sizes and process input data that has special structure.
The optimization methods discussed in this chapter are often directly applicable to these specialized architectures with little or no modification.
                                     Chapter 9  Convolutional Networks  Convolutional networks ( , ), also known asLeCun 1989 convolutional neural networks or CNNs, are a specialized kind of neural network for processing data that has a known, grid-like topology.
Examples include time-series data, which can be thought of as a 1D grid taking samples at regular time intervals, and image data,  which can be thought of as a 2D grid of pixels.
The name “convolutional neural network” indicates that the network employs a mathematical operation called convolution.
Convolutional networks are simply neural networks that use convolution in place of general matrix multiplication in at least one of their layers.
Usually, the operation used in a convolutional neural network does not correspond precisely to the definition of convolution as used in other fields such  as engineering or pure mathematics.
We will describe several variants on the convolution function that are widely used in practice for neural networks.
We will also show how convolution may be applied to many kinds of data, with different numbers of dimensions.
Convolutional networks stand out as an example of neuroscientific principles influencing deep learning.
We will discuss these neuroscientific principles, then conclude with comments about the role convolutional networks have played in the history of deep learning.
One topic this chapter does not address is how to choose the architecture of your convolutional network.
The goal of this chapter is to describe the kinds of tools that convolutional networks provide, while chapter 11  330    CHAPTER 9.
CONVOLUTIONAL NETWORKS  describes general guidelines for choosing which tools to use in which circumstances.
Research into convolutional network architectures proceeds so rapidly that a new best architecture for a given benchmark is announced every few weeks to months, rendering it impractical to describe the best architecture in print.
However, the best architectures have consistently been composed of the building blocks described here.
9.1 The Convolution Operation  In its most general form, convolution is an operation on two functions of a real-  valued argument.
Our laser sensor provides a single output x(t), the position of the spaceship at time t. Both x and t are real-valued, i.e., we can get a different reading from the laser sensor at any instant in time.
To obtain a less noisy estimate of the spaceship’s position, we would like to average together several measurements.
Of course, more recent measurements are more relevant, so we will want this to be a weighted average that gives more weight to recent measurements.
If we apply such a weighted average operation at every moment, we obtain a new function providing a smoothed estimate of the position of the spaceship:s  s t( ) =   x a w t a da( ) ( − ) (9.1)  This operation is called convolution.
The convolution operation is typically denoted with an asterisk:  s t x w t( ) = ( ∗ )( ) (9.2)  In our example, w needs to be a valid probability density function, or the output is not a weighted average.
Also, w needs to be for all negative arguments,0 or it will look into the future, which is presumably beyond our capabilities.
In general, convolution is defined for any functions for which the above integral is defined, and may be used for other purposes besides taking weighted averages.
In convolutional network terminology, the first argument (in this example, the function x) to the convolution is often referred to as the input and the second  331    CHAPTER 9.
The output is sometimes referred to as the .feature map  In our example, the idea of a laser sensor that can provide measurements at every instant in time is not realistic.
Usually, when we work with data on a computer, time will be discretized, and our sensor will provide data at regular intervals.
In our example, it might be more realistic to assume that our laser provides a measurement once per second.
If we now assume that x and w are defined only on integer t, we  can define the discrete convolution:  s t x w t( ) = ( ∗ )( ) = ∞  a=−∞ x a w t a( ) ( − ) (9.3)  In machine learning applications, the input is usually a multidimensional array of data and the kernel is usually a multidimensional array of parameters that are adapted by the learning algorithm.
Because each element of the input and kernel must be explicitly stored  separately, we usually assume that these functions are zero everywhere but the finite set of points for which we store the values.
This means that in practice we can implement the infinite summation as a summation over a finite number of array elements.
For example, if we use a two-dimensional image I as our input, we probably also want to use a two-dimensional kernel :K  S i, j I K i, j( ) = ( ∗ )( ) =   m    n  I m, n K i m, j n .
( ) ( − − ) (9.4)  Convolution is commutative, meaning we can equivalently write:  S i, j K I i, j( ) = ( ∗ )( ) =   m    n  I i m, j n K m, n .
( − − ) ( ) (9.5)  Usually the latter formula is more straightforward to implement in a machine learning library, because there is less variation in the range of valid values of m and .n  The commutative property of convolution arises because we have flipped the kernel relative to the input, in the sense that as m increases, the index into the input increases, but the index into the kernel decreases.
CONVOLUTIONAL NETWORKS  is useful for writing proofs, it is not usually an important property of a neural network implementation.
Instead, many neural network libraries implement a related function called the cross-correlation, which is the same as convolution but without flipping the kernel:  S i, j I K i, j( ) = ( ∗ )( ) =   m    n  I i m, j n K m, n .
( + + ) ( ) (9.6)  Many machine learning libraries implement cross-correlation but call it convolution.
In this text we will follow this convention of calling both operations convolution,  and specify whether we mean to flip the kernel or not in contexts where kernel flipping is relevant.
In the context of machine learning, the learning algorithm will learn the appropriate values of the kernel in the appropriate place, so an algorithm based on convolution with kernel flipping will learn a kernel that is flipped relative to the kernel learned by an algorithm without the flipping.
It is also rare for convolution to be used alone in machine learning; instead convolution is used simultaneously with other functions, and the combination of these functions does not commute regardless of whether the convolution operation flips its kernel or not.
For example, for univariate discrete convolution, each row of the matrix is constrained to be equal to the row above shifted by one element.
In addition to these constraints that several elements be equal to each other, convolution usually corresponds to a very sparse matrix (a matrix whose entries are mostly equal to zero).
Any neural network algorithm that works with matrix multiplication and does not depend on specific properties of the matrix structure should work with convolution, without requiring any further changes to the neural network.
Typical convolutional neural networks do make use of  further specializations in order to deal with large inputs efficiently, but these are not strictly necessary from a theoretical perspective.
CONVOLUTIONAL NETWORKS  a b c d  e f g h  i j k l  w x  y z  aw + bx + ey + fz aw + bx + ey + fz  bw + cx + fy + gz bw + cx + fy + gz  cw + dx + gy + hz cw + dx + gy + hz  ew + fx + iy + jz ew + fx + iy + jz  fw + gx + jy + kz fw + gx + jy + kz  gw + hx + ky + lz gw + hx + ky + lz  Input  Kernel  Output  Figure 9.1: An example of 2-D convolution without kernel-flipping.
In this case we restrict the output to only positions where the kernel lies entirely within the image, called “valid” convolution in some contexts.
We draw boxes with arrows to indicate how the upper-left element of the output tensor is formed by applying the kernel to the corresponding upper-left region of the input tensor.
CONVOLUTIONAL NETWORKS  9.2 Motivation  Convolution leverages three important ideas that can help improve a machine learning system: sparse interactions, parameter sharing and equivariant representations.
Traditional neural network layers use matrix multiplication by a matrix of parameters with a separate parameter describing the interaction between each input unit and each output unit.
Convolutional networks, however, typically have sparse interactions (also referred to as sparse connectivity or sparse weights).
For example, when processing an image, the input image might have thousands or millions of pixels, but we can detect small, meaningful features such as edges with kernels that occupy only tens or hundreds of pixels.
This means that we need to store fewer parameters, which both reduces the memory requirements of the model and improves its statistical efficiency.
If there are m inputs and n outputs, then  matrix multiplication requires m n× parameters and the algorithms used in practice have O(m n× ) runtime (per example).
If we limit the number of connections each output may have to k, then the sparsely connected approach requires only k n× parameters and O(k n× ) runtime.
For many practical applications, it is possible to obtain good performance on the machine learning task while keeping k several orders of magnitude smaller than m .
In a deep convolutional network,9.2 9.3 units in the deeper layers may indirectly interact with a larger portion of the input, as shown in figure .
This allows the network to efficiently describe complicated9.4 interactions between many variables by constructing such interactions from simple building blocks that each describe only sparse interactions.
In a traditional neural net, each element of the weight matrix is used exactly once when computing the output of a layer.
As a synonym for parameter sharing, one can say that a network has tied weights, because the value of the weight applied to one input is tied to the value of a weight applied elsewhere.
In a convolutional neural net, each member of the kernel is used at every position of the input (except perhaps some of the boundary pixels, depending on the design decisions regarding the boundary).
The parameter sharing used by the convolution operation means that rather than learning a separate set of parameters  335    CHAPTER 9.
CONVOLUTIONAL NETWORKS  x1x1 x2x2 x3x3  s2s2s1s1 s3s3  x4x4  s4s4  x5x5  s5s5  x1x1 x2x2 x3x3  s2s2s1s1 s3s3  x4x4  s4s4  x5x5  s5s5  Figure 9.2: Sparse connectivity, viewed from below: We highlight one input unit, x3, and also highlight the output units in s that are affected by this unit.
(Bottom)When is formed by matrix multiplication, connectivity is no longer sparse, sos all of the outputs are affected by x3.
CONVOLUTIONAL NETWORKS  x1x1 x2x2 x3x3  s2s2s1s1 s3s3  x4x4  s4s4  x5x5  s5s5  x1x1 x2x2 x3x3  s2s2s1s1 s3s3  x4x4  s4s4  x5x5  s5s5  Figure 9.3: Sparse connectivity, viewed from above: We highlight one output unit, s3, and also highlight the input units in x that affect this unit.
When(Bottom) s is formed by matrix multiplication, connectivity is no longer sparse, so all of the inputs affect s3.
x1x1 x2x2 x3x3  h2h2h1h1 h3h3  x4x4  h4h4  x5x5  h5h5  g2g2g1g1 g3g3 g4g4 g5g5  Figure 9.4: The receptive field of the units in the deeper layers of a convolutional network is larger than the receptive field of the units in the shallow layers.
This effect increases if the network includes architectural features like strided convolution (figure ) or pooling9.12 (section ).
This means that even though9.3 direct connections in a convolutional net are very sparse, units in the deeper layers can be indirectly connected to all or most of the input image.
CONVOLUTIONAL NETWORKS  x1x1 x2x2 x3x3  s2s2s1s1 s3s3  x4x4  s4s4  x5x5  s5s5  x1x1 x2x2 x3x3 x4x4 x5x5  s2s2s1s1 s3s3 s4s4 s5s5  Figure 9.5: Parameter sharing: Black arrows indicate the connections that use a particular parameter in two different models.
(Top)The black arrows indicate uses of the central element of a 3-element kernel in a convolutional model.
The single black arrow indicates(Bottom) the use of the central element of the weight matrix in a fully connected model.
This does not affect the runtime of forward propagation—it is still O(k n× )—but it does further reduce the storage requirements of the model to k parameters.
Recall that k is usually several orders of magnitude less than m. Since m and n are usually roughly the same size, k is  practically insignificant compared to m n× .
Convolution is thus dramatically more efficient than dense matrix multiplication in terms of the memory requirements and statistical efficiency.
For a graphical depiction of how parameter sharing works, see figure .9.5  As an example of both of these first two principles in action, figure shows9.6 how sparse connectivity and parameter sharing can dramatically improve the efficiency of a linear function for detecting edges in an image.
In the case of convolution, the particular form of parameter sharing causes the layer to have a property called equivariance to translation.
To say a function is equivariant means that if the input changes, the output changes in the same way.
In the case of convolution, if we let g be any function that translates the input, i.e., shifts it, then the convolution function is equivariant to g. For example, let I be a function giving image brightness at integer coordinates.
CONVOLUTIONAL NETWORKS  mapping one image function to another image function, such that I = g(I ) is the image function with I(x, y) = I(x − 1, y).
If we apply this transformation to I, then apply convolution, the result will be the same as if we applied convolution to I , then applied the transformation g to the output.
When processing time series data, this means that convolution produces a sort of timeline that shows when different features appear in the input.
If we move an event later in time in the input, the exact same representation of it will appear in the output, just later in time.
This is useful for when we know that some function of a small number of neighboring pixels is useful when applied to multiple input locations.
For example, when processing images, it is useful to detect edges in the first layer of a convolutional network.
The same edges appear more or less everywhere in the image, so it is practical to share parameters across the entire image.
For example, if we are processing images that are cropped to be centered on an individual’s face, we probably want to extract different features at different locations—the part of the network processing the top of the face needs to look for eyebrows, while the part of the network processing the bottom of the face needs to  look for a chin.
Convolution is not naturally equivariant to some other transformations, such as changes in the scale or rotation of an image.
Finally, some kinds of data cannot be processed by neural networks defined by matrix multiplication with a fixed-shape matrix.
We discuss this further in section .9.7  9.3 Pooling  A typical layer of a convolutional network consists of three stages (see figure ).9.7 In the first stage, the layer performs several convolutions in parallel to produce a set of linear activations.
In the second stage, each linear activation is run through a nonlinear activation function, such as the rectified linear activation function.
A pooling function replaces the output of the net at a certain location with a summary statistic of the nearby outputs.
The image on the right was formed by taking each pixel in the original image and subtracting the value of its neighboring pixel on the left.
This shows the strength of all of the vertically oriented edges in the input image, which can be a useful operation for object detection.
This transformation can be described by a convolution kernel containing two elements, and requires 319 × 280 × 3 = 267, 960 floating point operations (two multiplications and one addition per output pixel) to compute using convolution.
To describe the same transformation with a matrix multiplication would take 320 × 280× 319 × 280, or over eight billion, entries in the matrix, making convolution four billion times more efficient for representing this transformation.
The straightforward matrix multiplication algorithm performs over sixteen billion floating point operations, making convolution roughly 60,000 times more efficient computationally.
If we stored only the nonzero entries of the matrix, then both matrix multiplication and convolution would require the same number of floating point operations to compute.
Convolution is an extremely efficient way of describing transformations that apply the same linear transformation of a small, local region across the entire input.
CONVOLUTIONAL NETWORKS  Convolutional Layer  Input to layer  Convolution stage:  A ne transformffi  Detector stage:  Nonlinearity  e.g., rectified linear  Pooling stage  Next layer  Input to layers  Convolution layer:  A ne transform ffi  Detector layer: Nonlinearity  e.g., rectified linear  Pooling layer  Next layer  Complex layer terminology Simple layer terminology  Figure 9.7: The components of a typical convolutional neural network layer.
(Left)In this terminology, the convolutional net is viewed as a small number of relatively complex layers, with each layer having many “stages.” In this terminology, there is a one-to-one mapping between kernel tensors and network layers.
(Right)In this terminology, the convolutional net is viewed as a larger number of simple layers; every step of processing is regarded as a layer in its own right.
CONVOLUTIONAL NETWORKS  and Chellappa 1988, ) operation reports the maximum output within a rectangular neighborhood.
Other popular pooling functions include the average of a rectangular neighborhood, the L2 norm of a rectangular neighborhood, or a weighted average based on the distance from the central pixel.
In all cases, pooling helps to make the representation become approximately invariant to small translations of the input.
Invariance to translation means that if we translate the input by a small amount, the values of most of the pooled outputs do not change.
See figure for an example of how this works.9.8 Invariance  to local translation can be a very useful property if we care more about whether some feature is present than exactly where it is.
For example, when determining whether an image contains a face, we need not know the location of the eyes with pixel-perfect accuracy, we just need to know that there is an eye on the left side of the face and an eye on the right side of the face.
For example, if we want to find a corner defined by two edges meeting at a specific orientation, we need to preserve the location of the edges well enough to test whether they meet.
The use of pooling can be viewed as adding an infinitely strong prior that the function the layer learns must be invariant to small translations.
Pooling over spatial regions produces invariance to translation, but if we pool over the outputs of separately parametrized convolutions, the features can learn which transformations to become invariant to (see figure ).9.9  Because pooling summarizes the responses over a whole neighborhood, it is possible to use fewer pooling units than detector units, by reporting summary statistics for pooling regions spaced k pixels apart rather than 1 pixel apart.
This improves the computational efficiency of the9.10 network because the next layer has roughly k times fewer inputs to process.
When the number of parameters in the next layer is a function of its input size (such as when the next layer is fully connected and based on matrix multiplication) this reduction in the input size can also result in improved statistical efficiency and  reduced memory requirements for storing the parameters.
For example, if we want to classify images of variable size, the input to the classification layer must have a fixed size.
This is usually accomplished by varying the size of an offset between pooling regions so that the classification layer always receives the same number of summary statistics regardless of the input size.
For example, the final pooling layer of the network may be defined to output four sets of summary statistics, one for each quadrant of an image, regardless of the image size.
DETECTOR STAGE  POOLING STAGE  POOLING STAGE  DETECTOR STAGE  Figure 9.8: Max pooling introduces invariance.
The top row shows the outputs of max pooling, with a stride of one pixel between pooling regions and a pooling region width of three pixels.
Every value in the bottom row has changed, but only half of the values in the top row have changed, because the max pooling units are only sensitive to the maximum value in the neighborhood, not its exact location.
CONVOLUTIONAL NETWORKS  Large response  in pooling unit  Large response  in pooling unit Large  response  in detector  unit 1  Large  response  in detector  unit 3  Figure 9.9: Example of learned invariances: A pooling unit that pools over multiple features that are learned with separate parameters can learn to be invariant to transformations of the input.
Here we show how a set of three learned filters and a max pooling unit can learn to become invariant to rotation.
When a 5 appears in the input, the corresponding filter will match it and cause a large activation in a detector unit.
We show here how the network processes two different inputs, resulting in two different detector units being activated.
This principle is leveraged by maxout networks (Goodfellow et al., 2013a) and other convolutional networks.
Max pooling over spatial positions is naturally invariant to translation; this multi-channel approach is only necessary for learning other transformations.
This reduces the representation size by a factor of two, which reduces the computational and statistical burden on the next layer.
Note that the rightmost pooling region has a smaller size, but must be included if we do not want to ignore some of the detector units.
CONVOLUTIONAL NETWORKS  Some theoretical work gives guidance as to which kinds of pooling one should use in various situations ( , ).
2010 pool features together, for example, by running a clustering algorithm on the locations of interesting features ( , ).
Another approach is to learn a single pooling structure that is then applied to all images ( , ).Jia et al.
2012  Pooling can complicate some kinds of neural network architectures that use top-down information, such as Boltzmann machines and autoencoders.
These  issues will be discussed further when we present these types of networks in part .III Pooling in convolutional Boltzmann machines is presented in section .
The20.6 inverse-like operations on pooling units needed in some differentiable networks will be covered in section .20.10.6  Some examples of complete convolutional network architectures for classification using convolution and pooling are shown in figure .9.11  9.4 Convolution and Pooling as an Infinitely Strong  Prior  Recall the concept of a prior probability distribution from section .
This is5.2 a probability distribution over the parameters of a model that encodes our beliefs about what models are reasonable, before we have seen any data.
Priors can be considered weak or strong depending on how concentrated the probability density in the prior is.
A weak prior is a prior distribution with high entropy, such as a Gaussian distribution with high variance.
An infinitely strong prior places zero probability on some parameters and says that these parameter values are completely forbidden, regardless of how much support the data gives to those values.
We can imagine a convolutional net as being similar to a fully connected net,  but with an infinitely strong prior over its weights.
This infinitely strong prior says that the weights for one hidden unit must be identical to the weights of its neighbor, but shifted in space.
The prior also says that the weights must be zero, except for in the small, spatially contiguous receptive field assigned to that hidden unit.
Overall, we can think of the use of convolution as introducing an infinitely strong prior probability distribution over the parameters of a layer.
CONVOLUTIONAL NETWORKS  Input image:   256x256x3  Output of   convolution +   ReLU: 256x256x64  Output of pooling   with stride 4:   64x64x64  Output of   convolution +   ReLU: 64x64x64  Output of pooling   with stride 4:   16x16x64  Output of reshape to   vector:  16,384 units  Output of matrix   multiply: 1,000 units  Output of softmax:   1,000 class   probabilities  Input image:   256x256x3  Output of   convolution +   ReLU: 256x256x64  Output of pooling   with stride 4:   64x64x64  Output of   convolution +   ReLU: 64x64x64  Output of pooling to   3x3 grid: 3x3x64  Output of reshape to   vector:  576 units  Output of matrix   multiply: 1,000 units  Output of softmax:   1,000 class   probabilities  Input image:   256x256x3  Output of   convolution +   ReLU: 256x256x64  Output of pooling   with stride 4:   64x64x64  Output of   convolution +   ReLU: 64x64x64  Output of   convolution:  16x16x1,000  Output of average   pooling: 1x1x1,000  Output of softmax:   1,000 class   probabilities  Output of pooling   with stride 4:   16x16x64  Figure 9.11: Examples of architectures for classification with convolutional networks.
The specific strides and depths used in this figure are not advisable for real use; they are designed to be very shallow in order to fit onto the page.
Real convolutional networks also often involve significant amounts of branching, unlike the chain structures used here for simplicity.
After alternating between convolution and pooling for a few layers, the tensor for the convolutional feature map is reshaped to flatten out the spatial dimensions.
The rest of the network is an ordinary feedforward network classifier, as described in chapter .6 (Center)A convolutional network that processes a variable-sized image, but still maintains a fully connected section.
This network uses a pooling operation with variably-sized pools but a fixed number of pools, in order to provide a fixed-size vector of 576 units to the fully connected portion of the network.
Averaging a feature map down to a single value provides the argument to the softmax classifier at the top.
CONVOLUTIONAL NETWORKS  says that the function the layer should learn contains only local interactions and is equivariant to translation.
Likewise, the use of pooling is an infinitely strong prior that each unit should be invariant to small translations.
Of course, implementing a convolutional net as a fully connected net with an infinitely strong prior would be extremely computationally wasteful.
But thinking of a convolutional net as a fully connected net with an infinitely strong prior can give us some insights into how convolutional nets work.
Like  any prior, convolution and pooling are only useful when the assumptions made by the prior are reasonably accurate.
If a task relies on preserving precise spatial information, then using pooling on all features can increase the training error.
2014a use pooling on some channels but not on other channels, in order to get both highly invariant features and features that will not underfit when the translation invariance prior is incorrect.
When a task involves incorporating information from very distant locations in the input, then the prior imposed by convolution may be inappropriate.
Another key insight from this view is that we should only compare convolu- tional models to other convolutional models in benchmarks of statistical learning  performance.
Models that do not use convolution would be able to learn even if we permuted all of the pixels in the image.
For many image datasets, there are separate benchmarks for models that are permutation invariant and must discover the concept of topology via learning, and models that have the knowledge of spatial relationships hard-coded into them by their designer.
9.5 Variants of the Basic Convolution Function  When discussing convolution in the context of neural networks, we usually do not refer exactly to the standard discrete convolution operation as it is usually  understood in the mathematical literature.
Here we describe these differences in detail, and highlight some useful properties of the functions used in neural networks.
First, when we refer to convolution in the context of neural networks, we usually actually mean an operation that consists of many applications of convolution in parallel.
This is because convolution with a single kernel can only extract one kind of feature, albeit at many spatial locations.
In a multilayer convolutional network, the input to the second layer is the output of the first layer, which usually has the output of many different convolutions at each position.
When working with images, we usually think of the input and output of the convolution as being 3-D tensors, with one index into the different channels and two indices into the spatial coordinates of each channel.
Software implementations usually work in batch mode, so they  will actually use 4-D tensors, with the fourth axis indexing different examples in the batch, but we will omit the batch axis in our description here for simplicity.
Because convolutional networks usually use multi-channel convolution, the linear operations they are based on are not guaranteed to be commutative, even if kernel-flipping is used.
These multi-channel operations are only commutative if each operation has the same number of output channels as input channels.
Assume we have a 4-D kernel tensor K with element Ki,j,k,l giving the connection strength between a unit in channel i of the output and a unit in channel j of the input, with an offset of k rows and l columns between the output unit and the input unit.
Assume our input consists of observed data V with element Vi,j,k giving the value of the input unit within channel i at row j and column k .
Assume our  output consists of Z with the same format as V. If Z is produced by convolving K across without flipping , thenV K  Zi,j,k =   l,m,n  Vl,j m ,k n+ −1 + −1Ki,l,m,n (9.7)  where the summation over l,m and n is over all values for which the tensor indexing operations inside the summation is valid.
Programming languages such as C and Python index starting from , rendering0 the above expression even simpler.
We may want to skip over some positions of the kernel in order to reduce the computational cost (at the expense of not extracting our features as finely).
If we want to sample only every s pixels in each direction in the output, then we can define a downsampled convolution function such thatc  Zi,j,k = ( )c K V, , s i,j,k =   l,m,n   Vl, j s m, k s n( − ×1) + ( − ×1) + Ki,l,m,n   .
One essential feature of any convolutional network implementation is the ability to implicitly zero-pad the input V in order to make it wider.
Without this feature, the width of the representation shrinks by one pixel less than the kernel width at each layer.
Zero padding the input allows us to control the kernel width and the size of the output independently.
Without zero padding, we are forced to choose between shrinking the spatial extent of the network rapidly and using small  kernels—both scenarios that significantly limit the expressive power of the network.
See figure for an example.9.13  Three special cases of the zero-padding setting are worth mentioning.
One is the extreme case in which no zero-padding is used whatsoever, and the convolution kernel is only allowed to visit positions where the entire kernel is contained entirely within the image.
In this case, all pixels in the output are a function of the same number of pixels in the input, so the behavior of an output pixel is somewhat more regular.
Since the shrinkage is  greater than 0, it limits the number of convolutional layers that can be included in the network.
As layers are added, the spatial dimension of the network will eventually drop to 1 × 1, at which point additional layers cannot meaningfully be considered convolutional.
Another special case of the zero-padding setting is when just enough zero-padding is added to keep the size of the output equal to the size of the input.
In this case, the network can contain as many convolutional layers as the available hardware can support, since the operation of convolution does not modify the architectural possibilities available to the next layer.
However, the input pixels near the border influence fewer output pixels than the input pixels near the center.
This motivates the other extreme case, which MATLAB refers to as full convolution, in which enough  zeroes are added for every pixel to be visited k times in each direction, resulting in an output image of width m+ k − 1.
In this case, the output pixels near the border are a function of fewer pixels than the output pixels near the center.
This can make it difficult to learn a single kernel that performs well at all positions in the convolutional feature map.
Usually the optimal amount of zero padding (in terms of test set classification accuracy) lies somewhere between “valid” and “same” convolution.
CONVOLUTIONAL NETWORKS  x1x1 x2x2 x3x3  s1s1 s2s2  x4x4 x5x5  s3s3  x1x1 x2x2 x3x3  z2z2z1z1 z3z3  x4x4  z4z4  x5x5  z5z5  s1s1 s2s2 s3s3  Strided  convolution  Downsampling  Convolution  Figure 9.12: Convolution with a stride.
(Bot- tom)Convolution with a stride greater than one pixel is mathematically equivalent to convolution with unit stride followed by downsampling.
Obviously, the two-step approach involving downsampling is computationally wasteful, because it computes many values that are then discarded.
Figure 9.13: The effect of zero padding on network size: Consider a convolutional network with a kernel of width six at every layer.
In this example, we do not use any pooling, so only the convolution operation itself shrinks the network size.
Starting from an input of sixteen pixels, we are only able to have three convolutional layers, and the last layer does not ever move the kernel, so arguably only two of the layers are truly convolutional.
The rate of shrinking can be mitigated by using smaller kernels, but smaller kernels are less expressive and some shrinking is inevitable in this kind of architecture.
By adding five implicit zeroes(Bottom) to each layer, we prevent the representation from shrinking with depth.
CONVOLUTIONAL NETWORKS  In some cases, we do not actually want to use convolution, but rather locally connected layers ( , , ).
In this case, the adjacency matrix in theLeCun 1986 1989 graph of our MLP is the same, but every connection has its own weight, specified by a 6-D tensor W. The indices into W are respectively: i, the output channel, j, the output row, k, the output column, l, the input channel, m, the row offset within the input, and n, the column offset within the input.
The linear part of a locally connected layer is then given by  Zi,j,k =   l,m,n  [Vl,j m ,k n+ −1 + −1wi,j,k,l,m,n] .
(9.9)  This is sometimes also called unshared convolution, because it is a similar oper- ation to discrete convolution with a small kernel, but without sharing parameters across locations.
Locally connected layers are useful when we know that each feature should be a function of a small part of space, but there is no reason to think that the same feature should occur across all of space.
For example, if we want to tell if an image is a picture of a face, we only need to look for the mouth in the bottom half of the  image.
It can also be useful to make versions of convolution or locally connected layers in which the connectivity is further restricted, for example to constrain each output channel i to be a function of only a subset of the input channels l. A common way to do this is to make the first m output channels connect to only the first n input channels, the second m output channels connect to only the second n input channels, and so on.
Modeling interactions9.15 between few channels allows the network to have fewer parameters in order to reduce memory consumption and increase statistical efficiency, and also reduces the amount of computation needed to perform forward and back-propagation.
Rather than learning a separate set of weights at spatial location, we learn a set of kernelsevery that we rotate through as we move through space.
This means that immediately neighboring locations will have different filters, like in a locally connected layer, but the memory requirements for storing the parameters will increase only by a factor of the size of this set of kernels, rather than the size of the entire output feature map.
See figure for a comparison of locally connected layers, tiled9.16 convolution, and standard convolution.
CONVOLUTIONAL NETWORKS  x1x1 x2x2 x3x3  s2s2s1s1 s3s3  x4x4  s4s4  x5x5  s5s5  x1x1 x2x2  s1s1 s3s3  x5x5  s5s5  x1x1 x2x2 x3x3  s2s2s1s1 s3s3  x4x4  s4s4  x5x5  s5s5  a        b a        b a        b a        b a          a        b c      d e     f g      h  i    x4x4x3x3  s4s4s2s2  Figure 9.14: Comparison of local connections, convolution, and full connections.
Each edge is labeled with a unique letter to show that each edge is associated with its own weight parameter.
The difference lies not in which units interact with each other, but in how the parameters are shared.
The convolutional layer uses the same two weights repeatedly across the entire input, as indicated by the repetition of the letters labeling each edge.
(Bottom)A fully connected layer resembles a locally connected layer in the sense that each edge has its own parameter (there are too many to label explicitly with letters in this diagram).
CONVOLUTIONAL NETWORKS  Input Tensor  Output Tensor  Spatial coordinates  C h a n n e l   c o o r d i n a t e s  Figure 9.15: A convolutional network with the first two output channels connected to only the first two input channels, and the second two output channels connected to only the second two input channels.
CONVOLUTIONAL NETWORKS  x1x1 x2x2 x3x3  s2s2s1s1 s3s3  x4x4  s4s4  x5x5  s5s5  x1x1 x2x2 x3x3  s2s2s1s1 s3s3  x4x4  s4s4  x5x5  s5s5  a        b a        b a        b a        b a         a        b c      d e     f g      h  i    x1x1 x2x2 x3x3  s2s2s1s1 s3s3  x4x4  s4s4  x5x5  s5s5  a        b c        d a        b c        d a          Figure 9.16: A comparison of locally connected layers, tiled convolution, and standard convolution.
We indicate that each connection has its own weight by labeling each connection with a unique letter.
One of these kernels has edges labeled “a” and “b,” while the other has edges labeled “c” and “d.” Each time we move one pixel to the right in the output, we move on to using a different kernel.
This means that, like the locally connected layer, neighboring units in the output have different parameters.
Unlike the locally connected layer, after we have gone through all t available kernels, we cycle back to the first kernel.
There is only one kernel and it is applied everywhere, as indicated in the diagram by using the kernel with weights labeled “a” and “b” everywhere.
CONVOLUTIONAL NETWORKS  To define tiled convolution algebraically, let k be a 6-D tensor, where two of the dimensions correspond to different locations in the output map.
Rather than having a separate index for each location in the output map, output locations cycle through a set of t different choices of kernel stack in each direction.
Zi,j,k =   l,m,n  Vl,j m ,k n+ −1 + −1Ki,l,m,n,j t ,k t% +1 % +1 , (9.10)  where is the modulo operation, with% t%t = 0 (, t + 1)%t = 1, etc.
It is straightforward to generalize this equation to use a different tiling range for each dimension.
Both locally connected layers and tiled convolutional layers have an interesting interaction with max-pooling: the detector units of these layers are driven by different filters.
If these filters learn to detect different transformed versions of the same underlying features, then the max-pooled units become invariant to the learned transformation (see figure ).
To perform learning, one must be able to compute the gradient with respect to the kernel, given the gradient with respect to the outputs.
In some simple cases, this operation can be performed using the convolution operation, but many cases of interest, including the case of stride greater than 1, do not have this property.
Recall that convolution is a linear operation and can thus be described as a matrix multiplication (if we first reshape the input tensor into a flat vector).
This view  helps us to derive some of the other operations needed to implement a convolutional network.
This is the operation needed to back-propagate error derivatives through a convolutional layer, so it is needed to train convolutional networks that have more than one hidden layer.
This same operation is also needed if we wish to reconstruct the visible units from the hidden units ( , ).Simard et al.
1992 Reconstructing the visible units is an operation commonly used in the models described in part of this book, such as autoencoders, RBMs, and sparse coding.III Transpose convolution is necessary to construct convolutional versions of those models.
CONVOLUTIONAL NETWORKS  implemented using a convolution in some cases, but in the general case requires a third operation to be implemented.
The size of the output that the transpose operation should return depends on the zero padding policy and stride of the forward propagation operation, as well as the size of the forward propagation’s output map.
In some cases, multiple sizes of input to forward propagation can result in the same size of output map, so the transpose operation must be explicitly told what the size of the original input was.
These three operations—convolution, backprop from output to weights, and backprop from output to inputs—are sufficient to compute all of the gradients needed to train any depth of feedforward convolutional network, as well as to train convolutional networks with reconstruction functions based on the transpose of convolution.
See ( ) for a full derivation of the equations in theGoodfellow 2010 fully general multi-dimensional, multi-example case.
To give a sense of how these equations work, we present the two dimensional, single example version here.
Suppose we want to train a convolutional network that incorporates strided convolution of kernel stack K applied to multi-channel image V with stride s as defined by c(K V, , s) as in equation .
During forward propagation, we will need to use c itself to  output Z, which is then propagated through the rest of the network and used to compute the cost function J .
(V K)  To train the network, we need to compute the derivatives with respect to the weights in the kernel.
To do so, we can use a function  g , , s(G V )i,j,k,l = ∂  ∂Ki,j,k,l J ,(V K) =    m,n  Gi,m,nVj, m s k, n s l( − ×1) + ( − ×1) + .
(9.11)  If this layer is not the bottom layer of the network, we will need to compute the gradient with respect to V in order to back-propagate the error farther down.
(9.13)  Autoencoder networks, described in chapter , are feedforward networks14 trained to copy their input to their output.
CONVOLUTIONAL NETWORKS  that copies its input x to an approximate reconstruction r using the function W Wx.
It is common for more general autoencoders to use multiplication by the transpose of the weight matrix just as PCA does.
To make such models convolutional, we can use the function h to perform the transpose of the convolution operation.
Suppose we have hidden units H in the same format as Z and we define a reconstruction  R K H= (h , , s .)
(9.14)  In order to train the autoencoder, we will receive the gradient with respect to R as a tensor E. To train the decoder, we need to obtain the gradient with respect to K. This is given by g(H E, , s).
To train the encoder, we need to obtain the gradient with respect to H. This is given by c(K E, , s).
It is also possible to differentiate through g using c and h, but these operations are not needed for the back-propagation algorithm on any standard network architectures.
Generally, we do not use only a linear operation in order to transform from the inputs to the outputs in a convolutional layer.
For locally connected layers it is natural to give each unit its own bias, and for tiled convolution, it is natural to share the biases with the same tiling pattern as the kernels.
For convolutional layers, it is typical to have one bias per channel of the output and share it across all locations within each convolution map.
However, if the input is of known, fixed size, it is also possible to learn a separate bias at each location of the output map.
Separating the biases may slightly reduce the statistical efficiency of the model, but also allows the model to correct for differences in the image statistics at different locations.
For example, when using implicit zero padding, detector units at the  edge of the image receive less total input and may need larger biases.
9.6 Structured Outputs  Convolutional networks can be used to output a high-dimensional, structured object, rather than just predicting a class label for a classification task or a real value for a regression task.
For example, the model might emit a tensor S, where  Si,j,k is the probability that pixel (j, k) of the input to the network belongs to class  i.
This allows the model to label every pixel in an image and draw precise masks  that follow the outlines of individual objects.
CONVOLUTIONAL NETWORKS  Ŷ (1)  Ŷ (1)  Ŷ (2)  Ŷ (2)  Ŷ (3)  Ŷ (3)  H(1)H(1) H(2)H(2) H(3)H(3)  XX  U U U  V V VW W  Figure 9.17: An example of a recurrent convolutional network for pixel labeling.
The input is an image tensor , with axes corresponding to image rows, image columns, andX channels (red, green, blue).
The goal is to output a tensor of labels Ŷ , with a probability distribution over labels for each pixel.
Rather than outputting Ŷ in a single shot, the recurrent network iteratively refines its estimate Ŷ by using a previous estimate of Ŷ as input for creating a new estimate.
The same parameters are used for each updated estimate, and the estimate can be refined as many times as we wish.
The tensor of convolution kernels U is used on each step to compute the hidden representation given the input image.
Because the same parameters are used on each step, this is an example of a recurrent network, as described in chapter .10  input plane, as shown in figure .
In the kinds of architectures typically used for9.13 classification of a single object in an image, the greatest reduction in the spatial dimensions of the network comes from using pooling layers with large stride.
In order to produce an output map of similar size as the input, one can avoid pooling  altogether ( , ).
Finally, in principle, one couldPinheiro and Collobert 2014 2015 use a pooling operator with unit stride.
One strategy for pixel-wise labeling of images is to produce an initial guess of the image labels, then refine this initial guess using the interactions between neighboring pixels.
Repeating this refinement step several times corresponds to using the same convolutions at each stage, sharing weights between the last layers of the deep net ( , ).
2007 by the successive convolutional layers with weights shared across layers a particular kind of recurrent network ( , , ).
Figure showsPinheiro and Collobert 2014 2015 9.17 the architecture of such a recurrent convolutional network.
CONVOLUTIONAL NETWORKS  Once a prediction for each pixel is made, various methods can be used to further process these predictions in order to obtain a segmentation of the image into regions ( , ;Briggman et al.
The general idea is to assume that large groups of contiguous pixels tend to be associated with the same label.
Alternatively, the convolutional network can be trained to maximize an approximation of the graphical model training objective ( , ; , ).Ning et al.
2014  9.7 Data Types  The data used with a convolutional network usually consists of several channels, each channel being the observation of a different quantity at some point in space or time.
( ).2010  So far we have discussed only the case where every example in the train and test  data has the same spatial dimensions.
One advantage to convolutional networks is that they can also process inputs with varying spatial extents.
These kinds of input simply cannot be represented by traditional, matrix multiplication-based neural networks.
This provides a compelling reason to use convolutional networks even when computational cost and overfitting are not significant issues.
Convolution is straightforward to apply; the kernel is simply applied a different number of times depending on the size of the input, and the output of the convolution operation scales accordingly.
Convolution may be viewed as matrix multiplication; the same convolution kernel induces a different size of doubly block  circulant matrix for each size of input.
Sometimes the output of the network is allowed to have variable size as well as the input, for example if we want to assign a class label to each pixel of the input.
In other cases, the network must produce some fixed-size output, for example if we want to assign a single class label to the entire image.
In this case we must make some additional design steps, like inserting a pooling layer whose pooling regions scale in size proportional to the size of the input, in order to maintain a fixed number of pooled outputs.
CONVOLUTIONAL NETWORKS  Single channel Multi-channel 1-D Audio waveform: The axis we  convolve over corresponds to  time.
Skeleton animation data: Anima- tions of 3-D computer-rendered  characters are generated by alter- ing the pose of a “skeleton” over time.
At each point in time, the pose of the character is described by a specification of the angles of each of the joints in the charac- ter’s skeleton.
Each channel in the data we feed to the convolu- tional model represents the angle about one axis of one joint.
2-D Audio data that has been prepro- cessed with a Fourier transform: We can transform the audio wave- form into a 2D tensor with dif- ferent rows corresponding to dif-  ferent frequencies and different columns corresponding to differ- ent points in time.
Us- ing convolution across the fre- quency axis makes the model equivariant to frequency, so that the same melody played in a dif- ferent octave produces the same representation but at a different  height in the network’s output.
Color image data: One channel contains the red pixels, one the green pixels, and one the blue pixels.
The convolution kernel moves over both the horizontal  and vertical axes of the image, conferring translation equivari- ance in both directions.
3-D Volumetric data: A common source of this kind of data is med-  ical imaging technology, such as CT scans.
Color video data: One axis corre- sponds to time, one to the height  of the video frame, and one to the width of the video frame.
CONVOLUTIONAL NETWORKS  Note that the use of convolution for processing variable sized inputs only makes sense for inputs that have variable size because they contain varying amounts of observation of the same kind of thing—different lengths of recordings over time, different widths of observations over space, etc.
Convolution does not make sense if the input has variable size because it can optionally include different kinds of observations.
For example, if we are processing college applications, and our features consist of both grades and standardized test scores, but not every applicant took the standardized test, then it does not make sense to convolve the  same weights over both the features corresponding to the grades and the features corresponding to the test scores.
9.8 Efficient Convolution Algorithms  Modern convolutional network applications often involve networks containing more than one million units.
Powerful implementations exploiting parallel computation resources, as discussed in section , are essential.
However, in many cases it12.1 is also possible to speed up convolution by selecting an appropriate convolution algorithm.
Convolution is equivalent to converting both the input and the kernel to the frequency domain using a Fourier transform, performing point-wise multiplication of the two signals, and converting back to the time domain using an inverse Fourier transform.
When a d-dimensional kernel can be expressed as the outer product of d vectors, one vector per dimension, the kernel is called separable.
The composed approach is significantly faster than performing one d-dimensional convolution with their outer product.
If the kernel is w elements wide in each dimension, then naive multidimensional  convolution requires O (wd ) runtime and parameter storage space, while separable convolution requires O(w d× ) runtime and parameter storage space.
Devising faster ways of performing convolution or approximate convolution without harming the accuracy of the model is an active area of research.
Even tech- niques that improve the efficiency of only forward propagation are useful because in the commercial setting, it is typical to devote more resources to deployment of a network than to its training.
CONVOLUTIONAL NETWORKS  9.9 Random or Unsupervised Features  Typically, the most expensive part of convolutional network training is learning the features.
The output layer is usually relatively inexpensive due to the small number of features provided as input to this layer after passing through several layers of pooling.
When performing supervised training with gradient descent, every gradient step requires a complete run of forward propagation and backward propagation  through the entire network.
One way to reduce the cost of convolutional network training is to use features that are not trained in a supervised fashion.
Another is to design them by hand, for example by setting each kernel to detect edges at a certain orientation or scale.
2011 k-means clustering to small image patches, then use each learned centroid as a convolution kernel.
Learning the features with an unsupervised criterion allows them to be determined separately from the classifier layer at the top of the architecture.
One can then extract the features for  the entire training set just once, essentially constructing a new training set for the last layer.
Learning the last layer is then typically a convex optimization problem, assuming the last layer is something like logistic regression or an SVM.
( ) showed that layers consisting of convolution following by pooling naturally2011 become frequency selective and translation invariant when assigned random weights.
They argue that this provides an inexpensive way to choose the architecture of a convolutional network: first evaluate the performance of several convolutional network architectures by training only the last layer, then take the best of these architectures and train the entire architecture using a more expensive approach.
An intermediate approach is to learn the features, but using methods that do not require full forward and back-propagation at every gradient step.
As with multilayer perceptrons, we use greedy layer-wise pretraining, to train the first layer in isolation, then extract all features from the first layer only once, then train the second layer in isolation given those features, and so on.
Chapter has described8 how to perform supervised greedy layer-wise pretraining, and part extends thisIII to greedy layer-wise pretraining using an unsupervised criterion at each layer.
The canonical example of greedy layer-wise pretraining of a convolutional model is the convolutional deep belief network ( , ).
CONVOLUTIONAL NETWORKS  us the opportunity to take the pretraining strategy one step further than is possible with multilayer perceptrons.
Instead of training an entire convolutional layer at a time, we can train a model of a small patch, as ( ) do withCoates et al.
We can then use the parameters from this patch-based model to define the kernels of a convolutional layer.
This means that it is possible to use unsupervised learning to train a convolutional network without ever using convolution during the training process.
Using this approach, we can train very large models and incur a high computational cost only at inference time ( , ; ,Ranzato et al.
This approach was popular from roughly 2007–2013, when labeled datasets were small and computational power was more limited.
Today, most convolutional networks are trained in a purely supervised fashion, using full forward and back-propagation through the entire network on each training iteration.
As with other approaches to unsupervised pretraining, it remains difficult to tease apart the cause of some of the benefits seen with this approach.
Unsupervised pretraining may offer some regularization relative to supervised training, or it may simply allow us to train much larger architectures due to the reduced computational cost of the learning rule.
9.10 The Neuroscientific Basis for Convolutional Net- works  Convolutional networks are perhaps the greatest success story of biologically inspired artificial intelligence.
Though convolutional networks have been guided by many other fields, some of the key design principles of neural networks were drawn from neuroscience.
The history of convolutional networks begins with neuroscientific experiments  long before the relevant computational models were developed.
Neurophysiologists David Hubel and Torsten Wiesel collaborated for several years to determine many of the most basic facts about how the mammalian vision system works (Hubel and Wiesel 1959 1962 1968, , , ).
Their findings that have had the greatest influence on contemporary deep learning models were based on recording the activity of individual neurons in cats.
They observed how neurons in the cat’s brain responded to images projected in precise locations on a screen in front of the cat.
Their great discovery was that neurons in the early visual system responded most strongly to very specific patterns of light, such as precisely oriented bars, but responded hardly at all to other patterns.
CONVOLUTIONAL NETWORKS  Their work helped to characterize many aspects of brain function that are beyond the scope of this book.
From the point of view of deep learning, we can focus on a simplified, cartoon view of brain function.
In this simplified view, we focus on a part of the brain called V1, also known as the primary visual cortex.
V1 is the first area of the brain that begins to perform significantly advanced processing of visual input.
In this cartoon view, images are formed by light arriving in the eye and stimulating the retina, the light-sensitive tissue in the back of the eye.
The neurons in the retina perform  some simple preprocessing of the image but do not substantially alter the way it is represented.
The image then passes through the optic nerve and a brain region called the lateral geniculate nucleus.
The main role, as far as we are concerned here, of both of these anatomical regions is primarily just to carry the signal from the eye to V1, which is located at the back of the head.
For example, light arriving at the lower half of the retina affects only the corresponding half of V1.
Convolutional networks capture this property by having their features defined in terms of two dimensional maps.
A simple cell’s activity can to some extent be characterized by a linear function of the image in a small, spatially localized receptive field.
The detector units of a convolutional network are  designed to emulate these properties of simple cells.
These cells respond to features that are similar to those detected by simple cells, but complex cells are invariant to small shifts in the position of the feature.
Complex cells are also invariant to some changes in lighting that cannot be captured simply by pooling over spatial locations.
These invariances have inspired some of the cross-channel pooling strategies in convolutional networks, such as maxout units ( , ).Goodfellow et al.
2013a  Though we know the most about V1, it is generally believed that the same basic principles apply to other areas of the visual system.
In our cartoon view of the visual system, the basic strategy of detection followed by pooling is repeatedly applied as we move deeper into the brain.
As we pass through multiple anatomical layers of the brain, we eventually find cells that respond to some specific concept and are invariant to many transformations of the input.
CONVOLUTIONAL NETWORKS  nicknamed “grandmother cells”—the idea is that a person could have a neuron that activates when seeing an image of their grandmother, regardless of whether she appears in the left or right side of the image, whether the image is a close-up of her face or zoomed out shot of her entire body, whether she is brightly lit, or in shadow, etc.
These grandmother cells have been shown to actually exist in the human brain, in a region called the medial temporal lobe ( , ).
They found what has come to be called the “Halle Berry neuron”: an individual neuron that is activated by the concept of Halle Berry.
This neuron fires when a person sees a photo of Halle Berry, a drawing of Halle Berry, or even text containing the words “Halle Berry.” Of course, this has nothing to do with Halle Berry herself; other neurons responded to the presence of Bill Clinton, Jennifer Aniston, etc.
These medial temporal lobe neurons are somewhat more general than modern convolutional networks, which would not automatically generalize to identifying a person or object when reading its name.
The closest analog to a convolutional network’s last layer of features is a brain area called the inferotemporal cortex (IT).
When viewing an object, information flows from the retina, through the LGN, to V1, then onward to V2, then V4, then IT.
If a person is allowed to continue looking at the object for more time, then information will begin to flow backwards as the brain uses top-down feedback to update the activations in the lower level brain areas.
However, if we interrupt the person’s gaze, and observe only the firing rates that result from the first 100ms of mostly feedforward activation, then IT proves to be very similar to a convolutional network.
Convolutional networks can predict IT firing rates, and also perform very similarly to (time limited) humans on object recognition tasks ( , ).DiCarlo 2013  That being said, there are many differences between convolutional networks and the mammalian vision system.
Some of these differences are well known to computational neuroscientists, but outside the scope of this book.
Some of  these differences are not yet known, because many basic questions about how the mammalian vision system works remain unanswered.
As a brief list:  • The human eye is mostly very low resolution, except for a tiny patch called the fovea.
Though we feel as if we can see an entire scene in high resolution, this is an illusion created by the subconscious part of our brain, as it stitches together several glimpses of small areas.
CONVOLUTIONAL NETWORKS  several eye movements called saccades to glimpse the most visually salient or task-relevant parts of a scene.
Incorporating similar attention mechanisms into deep learning models is an active research direction.
In the context of deep learning, attention mechanisms have been most successful for natural language processing, as described in section .
Several visual models12.4.5.1 with foveation mechanisms have been developed but so far have not become the dominant approach (Larochelle and Hinton 2010 Denil 2012, ; et al., ).
• The human visual system is integrated with many other senses, such as hearing, and factors like our moods and thoughts.
It is able to understand entire scenes including many objects and relationships between objects, and processes rich 3-D geometric information needed for our bodies to interface with the world.
Convolutional networks have been applied to some of these problems but these applications are in their infancy.
Feedback has been explored extensively in neural network models but has not yet been shown to offer a compelling improvement.
• While feedforward IT firing rates capture much of the same information as convolutional network features, it is not clear how similar the intermediate computations are.
An individual neuron’s activation probably is not well-  characterized by a single linear filter response.
2005 cartoon picture of “simple cells” and “complex cells” might create a non- existent distinction; simple cells and complex cells might both be the same kind of cell but with their “parameters” enabling a continuum of behaviors ranging from what we call “simple” to what we call “complex.”  It is also worth mentioning that neuroscience has told us relatively little about how to train convolutional networks.
Model structures with parameter sharing across multiple spatial locations date back to early connectionist models of vision ( , ), but these models did not use the modernMarr and Poggio 1976 back-propagation algorithm and gradient descent.
For example, the Neocognitron (Fukushima 1980, ) incorporated most of the model architecture design elements of  the modern convolutional network but relied on a layer-wise unsupervised clustering algorithm.
CONVOLUTIONAL NETWORKS  Lang and Hinton  1988( ) introduced the use of back-propagation to train time-delay neural networks (TDNNs).
To use contemporary terminology, TDNNs are one-dimensional convolutional networks applied to time series.
Back- propagation applied to these models was not inspired by any neuroscientific observa- tion and is considered by some to be biologically implausible.
1989 the modern convolutional network by applying the same training algorithm to 2-D convolution applied to images.
So far we have described how simple cells are roughly linear and selective for certain features, complex cells are more nonlinear and become invariant to some transformations of these simple cell features, and stacks of layers that alternate between selectivity and invariance can yield grandmother cells for very specific phenomena.
Simple cells in the first layer are easier to analyze, because their responses are driven by a linear function.
In an artificial neural network, we can just display an image of the convolution kernel to see what the corresponding channel of a convolutional layer responds to.
Instead, we put an electrode in the  neuron itself, display several samples of white noise images in front of the animal’s retina, and record how each of these samples causes the neuron to activate.
We can then fit a linear model to these responses in order to obtain an approximation of the neuron’s weights.
Likewise, we can think of a simple cell as sampling the image at a set of locations, defined by a set of x coordinates X and a set of y coordinates, Y, and applying weights that are also a function of the location, w(x, y).
From this point of view, the response of a simple cell to an image is given by  s I( ) =   x∈X    y∈Y w x, y I x, y .
( ) ( ) (9.15)  Specifically, takes the form of a Gabor function:w x, y( )  w x, y α, β( ; x, βy, f, φ, x0, y0, τ α) = exp  −βxx2 − βyy2   cos(fx + )φ , (9.16)  where  x = (x x− 0) cos( ) + (τ y y− 0) sin( )τ (9.17) 368    CHAPTER 9.
(9.18)  Here, α, βx, βy , f, φ, x0, y0, and τ are parameters that control the properties of the Gabor function.
Specifically, the simple cell will respond to image features centered at the point (x0, y 0), and it will respond to changes in brightness as we move along a line rotated radians from the horizontal.τ  Viewed as a function of x and y , the function w then responds to changes in brightness as we move along the x axis.
The Gaussian factor α exp  −βxx2 − βyy 2   can be seen as a gating term that  ensures the simple cell will only respond to values near where x  and y are both zero, in other words, near the center of the cell’s receptive field.
The scaling factor α adjusts the total magnitude of the simple cell’s response, while βx and βy control how quickly its receptive field falls off.
The cosine factor cos(fx +φ) controls how the simple cell responds to changing brightness along the x axis.
The parameter f controls the frequency of the cosine and controls its phase offset.φ  Altogether, this cartoon view of simple cells means that a simple cell responds to a specific spatial frequency of brightness in a specific direction at a specific location.
Simple cells are most excited when the wave of brightness in the image has the same phase as the weights.
This occurs when the image is bright where the  weights are positive and dark where the weights are negative.
Simple cells are most inhibited when the wave of brightness is fully out of phase with the weights—when the image is dark where the weights are positive and bright where the weights are negative.
The cartoon view of a complex cell is that it computes the L2 norm of the 2-D vector containing two simple cells’ responses: c(I) =   s0( )I 2 + s1( )I 2.
An  important special case occurs when s1 has all of the same parameters as s0 except for φ, and φ is set such that s1 is one quarter cycle out of phase with s0.
A complex cell defined in this way responds when the Gaussian reweighted image I(x, y) exp(−βxx2 −βyy 2) contains a high amplitude sinusoidal wave with frequency f in direction τ near (x0 , y0),  regardless of the phase offset of this wave.
In other words, the complex cell is invariant to small translations of the image in direction τ , or to negating the image  369    CHAPTER 9.
White indicates large positive weight, black indicates large negative weight, and the background gray corresponds to zero weight.
(Left)Gabor functions with different values of the parameters that control the coordinate system: x0, y0, and τ .
Each Gabor function in this grid is assigned a value of x0 and y0 proportional to its position in its grid, and τ is chosen so that each Gabor filter is sensitive to the direction radiating out from the center of the grid.
Gabor functions are arranged in increasing width (decreasing βx) as we move left to right through the grid, and increasing height (decreasing βy) as we move top to bottom.
For the other two plots, is fixed to 0 and is fixed to 5 the image width.φ f ×  (replacing black with white and vice versa).
Some of the most striking correspondences between neuroscience and machine learning come from visually comparing the features learned by machine learning  models with those employed by V1.
( ) showed thatOlshausen and Field 1996 a simple unsupervised learning algorithm, sparse coding, learns features with receptive fields similar to those of simple cells.
Since then, we have found that an extremely wide variety of statistical learning algorithms learn features with Gabor-like functions when applied to natural images.
Because so many different learning algorithms learn edge detectors, it is difficult to conclude that any specific learning algorithm is the “right” model of the brain just based on the features that it learns (though it can certainly be a bad sign if an algorithm does learn some sort of edge detectornot when applied to natural images).
These features are an important part of the  statistical structure of natural images and can be recovered by many different approaches to statistical modeling.
CONVOLUTIONAL NETWORKS  Figure 9.19: Many machine learning algorithms learn features that detect edges or specific colors of edges when applied to natural images.
These feature detectors are reminiscent of the Gabor functions known to be present in primary visual cortex.
(Left)Weights learned by an unsupervised learning algorithm (spike and slab sparse coding) applied to small image patches.
(Right)Convolution kernels learned by the first layer of a fully supervised convolutional maxout network.
9.11 Convolutional Networks and the History of Deep  Learning  Convolutional networks have played an important role in the history of deep learning.
They are a key example of a successful application of insights obtained by studying the brain to machine learning applications.
They were also some of the first deep models to perform well, long before arbitrary deep models were considered viable.
Convolutional networks were also some of the first neural networks to solve important commercial applications and remain at the forefront of commercial applications of deep learning today.
For example, in the 1990s, the neural network research group at AT&T developed a convolutional network for reading checks ( , ).
Later, several OCR and handwriting recognition systems based on convolutional nets were deployed by  Microsoft ( , ).
CONVOLUTIONAL NETWORKS  had been used to win other machine learning and computer vision contests with less impact for years earlier.
It is not entirely clear why convolutional networks succeeded when general back-propagation networks were considered to have failed.
It may simply be that convolutional networks were more computationally efficient than fully connected networks, so it was easier to run multiple experiments with them and tune their implementation and hyperparameters.
With modern hardware, large fully connected networks appear to perform reasonably on many tasks, even when using datasets that were available and activation functions that were popular during the times when fully connected networks were believed not to work well.
It may be that the primary barriers to the success of neural networks were psychological (practitioners did not expect neural networks to work, so they did not make a serious effort to use neural networks).
In many ways, they carried the torch for the rest of deep learning and paved the way to the acceptance of neural networks in general.
Convolutional networks provide a way to specialize neural networks to work with data that has a clear grid-structured topology and to scale such models to  very large size.
To process one-dimensional, sequential data, we turn next to another powerful specialization of the neural networks framework: recurrent neural networks.
                                     Chapter 10  Sequence Modeling: Recurrent  and Recursive Nets  Recurrent neural networks or RNNs ( , ) are a family ofRumelhart et al.
Much as a convolutional network  is a neural network that is specialized for processing a grid of values X such as an image, a recurrent neural network is a neural network that is specialized for processing a sequence of values x(1), .
Just as convolutional networks can readily scale to images with large width and height, and some convolutional networks can process images of variable size, recurrent networks can scale to much longer sequences than would be practical for networks without sequence-based specialization.
To go from multi-layer networks to recurrent networks, we need to take advan- tage of one of the early ideas found in machine learning and statistical models of the 1980s: sharing parameters across different parts of a model.
Parameter sharing  makes it possible to extend and apply the model to examples of different forms (different lengths, here) and generalize across them.
If we had separate parameters for each value of the time index, we could not generalize to sequence lengths not seen during training, nor share statistical strength across different sequence lengths and across different positions in time.
Such sharing is particularly important when a specific piece of information can occur at multiple positions within the sequence.
For example, consider the two sentences “I went to Nepal in 2009” and “In 2009, I went to Nepal.” If we ask a machine learning model to read each sentence and extract the year in which the narrator went to Nepal, we would like it to recognize the year 2009 as the relevant piece of information, whether it appears in the sixth  373    CHAPTER 10.
A traditional fully connected feedforward network would have separate parameters for each input feature, so it would need to learn all of the rules of the language separately at each position in the sentence.
This convolutional approach is the basis for time-delay neural networks (Lang and  Hinton 1988 Waibel 1989 Lang 1990, ; et al., ; et al., ).
The output of convolution is a sequence where each member of the output is a function of a small number of neighboring members of the input.
The idea of parameter sharing manifests in the application of the same convolution kernel at each time step.
This recurrent formulation results in the sharing of parameters through a very deep computational graph.
For the simplicity of exposition, we refer to RNNs as operating on a sequence  that contains vectors x( )t with the time step index t ranging from to1 τ .
In practice, recurrent networks usually operate on minibatches of such sequences, with a different sequence length τ for each member of the minibatch.
RNNs may also be applied in two dimensions across spatial data such as images, and even when applied to data involving time, the network may have connections that go backwards in time, provided that the entire sequence is observed before it is provided to the network.
These cycles represent the influence of the present value of a variable on its own value  at a future time step.
For more information on recurrent neural networks than is available in this chapter, we refer the reader to the textbook of Graves 2012( ).
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  10.1 Unfolding Computational Graphs  A computational graph is a way to formalize the structure of a set of computations, such as those involved in mapping inputs and parameters to outputs and loss.
In this section we explain6.5.1 the idea of unfolding a recursive or recurrent computation into a computational graph that has a repetitive structure, typically corresponding to a chain of events.
For example, consider the classical form of a dynamical system:  s( )t = (f s( 1)t− ; )θ , (10.1)  where s( )t is called the state of the system.
Equation is recurrent because the definition of10.1 s at time t refers back to the same definition at time .t− 1  For a finite number of time steps τ , the graph can be unfolded by applying the definition τ − 1 times.
For example, if we unfold equation for10.1 τ = 3 time steps, we obtain  s(3) = (f s(2) ; )θ (10.2)  = ( (f f s(1); ); )θ θ (10.3)  Unfolding the equation by repeatedly applying the definition in this way has yielded an expression that does not involve recurrence.
The unfolded computational graph of equation and equation is illustrated in10.1 10.3 figure .10.1  s(t−1)s(t−1) s( )ts( )t s( +1)ts( +1)t ff  s( )...s( )... s( )...s( )... ff ff ff  Figure 10.1: The classical dynamical system described by equation , illustrated as an10.1 unfolded computational graph.
Each node represents the state at some time t and the function f maps the state at t to the state at t+ 1.
The same parameters (the same value of used to parametrize ) are used for all time steps.θ f  As another example, let us consider a dynamical system driven by an external signal x( )t ,  s( )t = (f s( 1)t− ,x( )t ; )θ , (10.4)  375    CHAPTER 10.
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  where we see that the state now contains information about the whole past sequence.
Much as almost any function can be considered a feedforward neural network, essentially any function involving recurrence can be considered a recurrent neural network.
Many recurrent neural networks use equation or a similar equation to10.5 define the values of their hidden units.
To indicate that the state is the hidden units of the network, we now rewrite equation using the variable10.4 h to represent the state:  h( )t = (f h( 1)t− ,x( )t ; )θ , (10.5)  illustrated in figure , typical RNNs will add extra architectural features such10.2 as output layers that read information out of the state to make predictions.h  When the recurrent network is trained to perform a task that requires predicting the future from the past, the network typically learns to use h( )t as a kind of lossy summary of the task-relevant aspects of the past sequence of inputs up to t. This summary is in general necessarily lossy, since it maps an arbitrary length sequence  (x( )t ,x( 1)t− ,x( 2)t− , .
Depending on the training criterion, this summary might selectively keep some aspects of the past sequence with more precision than other aspects.
For example, if the RNN is used in statistical language modeling, typically to predict the next word given previous words, it may not be necessary to store all of the information in the input sequence up to time t, but rather only enough information to predict the rest of the sentence.
The most demanding situation is when we ask h( )t to be rich enough to allow one to approximately recover the input sequence, as in autoencoder frameworks (chapter ).14  ff  hh  xx  h(t−1)h(t−1) h( )th( )t h( +1)th( +1)t  x(t−1)x(t−1) x( )tx( )t x( +1)tx( +1)t  h( )...h( )... h( )...h( )...  ff  Unfold  ff ff f  Figure 10.2: A recurrent network with no outputs.
This recurrent network just processes information from the input x by incorporating it into the state h that is passed forward through time.
The same network seen as an unfolded computational graph, where each(Right) node is now associated with one particular time instance.
One way to draw the RNN10.5 is with a diagram containing one node for every component that might exist in a  376    CHAPTER 10.
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  physical implementation of the model, such as a biological neural network.
In this view, the network defines a circuit that operates in real time, with physical parts whose current state can influence their future state, as in the left of figure .10.2 Throughout this chapter, we use a black square in a circuit diagram to indicate that an interaction takes place with a delay of a single time step, from the state at time t to the state at time t+ 1.
The other way to draw the RNN is as an unfolded computational graph, in which each component is represented by many different variables, with one variable per time step, representing the state of the  component at that point in time.
Each variable for each time step is drawn as a separate node of the computational graph, as in the right of figure .
What we10.2 call unfolding is the operation that maps a circuit as in the left side of the figure to a computational graph with repeated pieces as in the right side.
We can represent the unfolded recurrence after steps with a functiont g( )t :  h( )t =g( )t (x( )t ,x( 1)t− ,x( 2)t− , .
,x(2),x(1)) (10.6)  = (f h( 1)t− ,x( )t ; )θ (10.7)  The function g( )t takes the whole past sequence (x( )t ,x( 1)t− ,x( 2)t− , .
,x(2),x(1)) as input and produces the current state, but the unfolded recurrent structure allows us to factorize g( )t into repeated application of a function f .
Regardless of the sequence length, the learned model always has the same input size, because it is specified in terms of transition from one state to  another state, rather than specified in terms of a variable-length history of states.
These two factors make it possible to learn a single model f that operates on all time steps and all sequence lengths, rather than needing to learn a separate model g( )t for all possible time steps.
Learning a single, shared model allows generalization to sequence lengths that did not appear in the training set, and allows the model to be estimated with far fewer training examples than would be required without parameter sharing.
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  information flow forward in time (computing outputs and losses) and backward in time (computing gradients) by explicitly showing the path along which this information flows.
10.2 Recurrent Neural Networks  Armed with the graph unrolling and parameter sharing ideas of section , we10.1  can design a wide variety of recurrent neural networks.
UU  VV  WW  o(t−1)o(t−1)  hh  oo  yy  LL  xx  o( )to( )t o( +1)to( +1)t  L(t−1)L(t−1) L( )tL( )t L( +1)tL( +1)t  y(t−1)y(t−1) y ( )ty ( )t y ( +1)ty ( +1)t  h(t−1)h(t−1) h( )th( )t h( +1)th( +1)t  x(t−1)x(t−1) x( )tx( )t x( +1)tx( +1)t  WWWW WW WW  h( )...h( )... h( )...h( )...  VV VV VV  UU UU UU  Unfold  Figure 10.3: The computational graph to compute the training loss of a recurrent network that maps an input sequence of x values to a corresponding sequence of output o values.
The RNN has input to hidden connections parametrized by a weight matrix U , hidden-to-hidden recurrent connections parametrized by a weight matrix W , and hidden-to-output connections parametrized by a weight matrix V .
Equation defines forward propagation in this model.10.8 (Left)The RNN and its loss drawn with recurrent connections.
(Right)The same seen as an time- unfolded computational graph, where each node is now associated with one particular time instance.
Some examples of important design patterns for recurrent neural networks include the following:  378    CHAPTER 10.
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  • Recurrent networks that produce an output at each time step and have recurrent connections between hidden units, illustrated in figure .10.3  • Recurrent networks that produce an output at each time step and have recurrent connections only from the output at one time step to the hidden units at the next time step, illustrated in figure 10.4  • Recurrent networks with recurrent connections between hidden units, that read an entire sequence and then produce a single output, illustrated in figure .10.5  figure is a reasonably representative example that we return to throughout10.3 most of the chapter.
The recurrent neural network of figure and equation is universal in the10.3 10.8 sense that any function computable by a Turing machine can be computed by such a recurrent network of a finite size.
The output can be read from the RNN after a number of time steps that is asymptotically linear in the number of time steps used by the Turing machine and asymptotically linear in the length of the input (Siegelmann and Sontag 1991 Siegelmann 1995 Siegelmann and Sontag 1995, ; , ; , ; Hyotyniemi 1996, ).
The functions computable by a Turing machine are discrete, so these results regard exact implementation of the function, not approximations.
The RNN, when used as a Turing machine, takes a binary sequence as input and its outputs must be discretized to provide a binary output.
It is possible to compute all functions in this setting using a single specific RNN of finite size (Siegelmann and  Sontag 1995( ) use 886 units).
The “input” of the Turing machine is a specification of the function to be computed, so the same network that simulates this Turing machine is sufficient for all problems.
The theoretical RNN used for the proof can simulate an unbounded stack by representing its activations and weights with rational numbers of unbounded precision.
A natural way to represent discrete variables is to regard the output  o as giving the unnormalized log probabilities of each possible value of the discrete variable.
We can then apply the softmax operation as a post-processing step to obtain a vector ŷ of normalized probabilities over the output.
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  U  V  W  o(t−1)o(t−1)  hh  oo  yy  LL  xx  o( )to( )t o( +1)to( +1)t  L(t−1)L(t−1) L( )tL( )t L( +1)tL( +1)t  y (t−1)y (t−1) y ( )ty ( )t y( +1)ty( +1)t  h(t−1)h(t−1) h( )th( )t h( +1)th( +1)t  x(t−1)x(t−1) x( )tx( )t x( +1)tx( +1)t  WW W W  o( )...o( )...  h( )...h( )...  V V V  U U U  Unfold  Figure 10.4: An RNN whose only recurrence is the feedback connection from the output to the hidden layer.
At each time step t , the input is xt, the hidden layer activations are h( )t , the outputs are o( )t , the targets are y( )t and the loss is L( )t .
Such an RNN is less powerful (can express a smaller set of functions) than those in the family represented by figure .
The RNN10.3 in figure can choose to put any information it wants about the past into its hidden10.3 representation h and transmit h to the future.
The RNN in this figure is trained to put a specific output value into o, and o is the only information it is allowed to send to the future.
The previous h is connected to the present only indirectly, via the predictions it was used to produce.
Unless o is very high-dimensional and rich, it will usually lack important information from the past.
This makes the RNN in this figure less powerful, but it may be easier to train because each time step can be trained in isolation from the others, allowing greater parallelization during training, as described in section .10.2.1  380    CHAPTER 10.
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  t t τ= 1 to = , we apply the following update equations:  a( )t = +b Wh( 1)t− +Ux( )t (10.8)  h( )t = tanh(a( )t ) (10.9)  o( )t = +c V h( )t (10.10)  ŷ( )t = softmax(o( )t ) (10.11)  where the parameters are the bias vectors b and c along with the weight matrices U , V and W , respectively for input-to-hidden, hidden-to-output and hidden-to- hidden connections.
This is an example of a recurrent network that maps an input sequence to an output sequence of the same length.
The total loss for a given sequence of values paired with a sequence of values would then be justx y the sum of the losses over all the time steps.
Computing the gradient of this loss function with respect to the parameters is an expensive operation.
The gradient computation involves performing a forward propagation pass moving left to right through our illustration of the unrolled graph in figure , followed by a backward propagation pass10.3 moving right to left through the graph.
The runtime is O(τ ) and cannot be reduced by parallelization because the forward propagation graph is inherently sequential;  each time step may only be computed after the previous one.
States computed in the forward pass must be stored until they are reused during the backward pass, so the memory cost is also O(τ ).
The back-propagation algorithm applied to the unrolled graph with O( τ) cost is called back-propagation through time or BPTT and is discussed further in section .
The network with recurrence10.2.2 between hidden units is thus very powerful but also expensive to train.
10.2.1 Teacher Forcing and Networks with Output Recurrence  The network with recurrent connections only from the output at one time step to the hidden units at the next time step (shown in figure ) is strictly less powerful10.4  381    CHAPTER 10.
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  because it lacks hidden-to-hidden recurrent connections.
Because this network lacks hidden-to-hidden recurrence, it requires that the output units capture all of the information about the past that the network will use to predict the future.
Because the output units are explicitly trained to match the training set targets, they are unlikely to capture the necessary information about the past history of the input, unless the user knows how to describe the full state of the system and provides it as part of the training set targets.
The advantage of eliminating hidden-to-hidden recurrence  is that, for any loss function based on comparing the prediction at time t to the training target at time t, all the time steps are decoupled.
There is no need to compute the output for the previous time step first, because the training set provides the ideal value of that output.
x(t−1)x(t−1) x( )tx( )t x( )...x( )...  W W  U U U  h( )τh( )τ  x( )τx( )τ  W  U  o( )τo( )τy( )τy( )τ  L( )τL( )τ  V  .
Such a network can be used to summarize a sequence and produce a fixed-size representation used as input for further processing.
There might be a target right at the end (as depicted here) or the gradient on the output o( )t can be obtained by back-propagating from further downstream modules.
Models that have recurrent connections from their outputs leading back into the model may be trained with teacher forcing.
Teacher forcing is a procedure that emerges from the maximum likelihood criterion, in which during training the model receives the ground truth output y( )t as input at time t+ 1.
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  o(t−1)o(t−1) o( )to( )t  h(t−1)h(t−1) h( )th( )t  x(t−1)x(t−1) x( )tx( )t  W V V  U U  o(t−1)o(t−1) o( )to( )t  L(t−1)L(t−1) L( )tL( )t  y (t−1)y (t−1) y( )ty( )t  h(t−1)h(t−1) h( )th( )t  x(t−1)x(t−1) x( )tx( )t  W  V V  U U  Train time Test time  Figure 10.6: Illustration of teacher forcing.
Teacher forcing is a training technique that is applicable to RNNs that have connections from their output to their hidden states at the next time step.
(Left)At train time, we feed the correct output y ( )t drawn from the train set as input to h ( +1)t .
In this case, we approximate the correct output y( )t with the model’s output o( )t , and feed the output back into the model.
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  likelihood criterion is  log p  y(1),y (2) | x(1),x(2)   (10.15)  = log p  y(2) | y (1),x(1),x(2)   + log p   y(1) | x(1),x(2)   (10.16)  In this example, we see that at time t = 2, the model is trained to maximize the conditional probability of y(2) given both the x sequence so far and the previous y value from the training set.
Maximum likelihood thus specifies that during training, rather than feeding the model’s own output back into itself, these connections should be fed with the target values specifying what the correct output should be.
This is illustrated in figure .10.6  We originally motivated teacher forcing as allowing us to avoid back-propagation through time in models that lack hidden-to-hidden connections.
Teacher forcing may still be applied to models that have hidden-to-hidden connections so long as they have connections from the output at one time step to values computed in the  next time step.
However, as soon as the hidden units become a function of earlier time steps, the BPTT algorithm is necessary.
The disadvantage of strict teacher forcing arises if the network is going to be later used in an open-loop mode, with the network outputs (or samples from the output distribution) fed back as input.
In this case, the kind of inputs that the network sees during training could be quite different from the kind of inputs that it will see at test time.
One way to mitigate this problem is to train with both teacher-forced inputs and with free-running inputs, for example by predicting the correct target a number of steps in the future through the unfolded recurrent output-to-input paths.
In this way, the network can learn to take into account input conditions (such as those it generates itself in the free-running mode) not  seen during training and how to map the state back towards one that will make the network generate proper outputs after a few steps.
Another approach (Bengio et al., ) to mitigate the gap between the inputs seen at train time and the2015b inputs seen at test time randomly chooses to use generated values or actual data values as input.
This approach exploits a curriculum learning strategy to gradually use more of the generated values as input.
10.2.2 Computing the Gradient in a Recurrent Neural Network  Computing the gradient through a recurrent neural network is straightforward.
Gradients obtained by back-propagation may then be used with any general-purpose gradient-based techniques to train an RNN.
To gain some intuition for how the BPTT algorithm behaves, we provide an example of how to compute gradients by BPTT for the RNN equations above (equation and equation ).
The nodes of our computational graph include10.8 10.12 the parameters U , V ,W , b and c as well as the sequence of nodes indexed by  t for x( )t , h( )t , o( )t and L( )t .
For each node N we need to compute the gradient  ∇NL recursively, based on the gradient computed at nodes that follow it in the graph.
(10.17)  In this derivation we assume that the outputs o( )t are used as the argument to the softmax function to obtain the vector ŷ of probabilities over the output.
We also assume that the loss is the negative log-likelihood of the true target y( )t given the  input so far.
The gradient ∇ o( )t L on the outputs at time step t, for all i, t , is as  follows:  (∇ o( )t L)i=  ∂L  ∂o ( )t i  = ∂L  ∂L( )t ∂L( )t  ∂o ( )t i  = ŷ ( )t i − 1i,y( )t .
At the final time step ,τ h( )τ only has o( )τ as a descendent, so its gradient is simple:  ∇ h( )τ L = V ∇  o( )τ L. (10.19)  We can then iterate backwards in time to back-propagate gradients through time, from t = τ − 1 down to t = 1, noting that h( )t (for t < τ) has as descendents both o( )t and h( +1)t .
Its gradient is thus given by  ∇ h( )t L =   ∂h( +1)t  ∂h( )t   (∇  h( +1)t L) +   ∂o( )t  ∂h( )t   (∇  o( )t L) (10.20)  = W (∇ h ( +1)t  L) diag   1 −   h( +1)t  2 + V  (∇  o( )t L) (10.21)  where diag   1 −  h( +1)t  2 indicates the diagonal matrix containing the elements  1 − (h( +1)ti )2 .
This is the Jacobian of the hyperbolic tangent associated with the hidden unit at time .i t+ 1  385    CHAPTER 10.
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  Once the gradients on the internal nodes of the computational graph are obtained, we can obtain the gradients on the parameter nodes.
Because the parameters are shared across many time steps, we must take some care when denoting calculus operations involving these variables.
The equations we wish to implement use the bprop method of section , that computes the contribution6.5.6 of a single edge in the computational graph to the gradient.
However, the ∇W f operator used in calculus takes into account the contribution of W to the value of f due to edges in the computational graph.
To resolve this ambiguity, weall  introduce dummy variables W( )t that are defined to be copies of W but with each W ( )t used only at time step t. We may then use ∇  W ( )t to denote the contribution  of the weights at time step to the gradient.t  Using this notation, the gradient on the remaining parameters is given by:  ∇cL =   t   ∂o( )t  ∂c   ∇  o( )t L =    t  ∇ o( )t L (10.22)  ∇bL =   t   ∂h( )t  ∂b( )t   ∇  h ( )t L =    t  diag   1 −   h( )t  2 ∇  h( )t L(10.23)  ∇VL =   t    i   ∂L  ∂o ( )t i   ∇V o( )ti =    t  (∇ o( )t L)h( )t   (10.24)  ∇WL =   t    i   ∂L  ∂h ( )t i   ∇  W ( )t h ( )t i (10.25)  =   t  diag   1 −   h( )t  2 (∇  h( )t L)h( 1)t−   (10.26)  ∇UL =   t    i   ∂L  ∂h ( )t i   ∇  U( )t h ( )t i (10.27)  =   t  diag   1 −   h( )t  2 (∇  h( )t L)x( )t   (10.28)  We do not need to compute the gradient with respect to x( )t for training because  it does not have any parameters as ancestors in the computational graph defining the loss.
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  10.2.3 Recurrent Networks as Directed Graphical Models  In the example recurrent network we have developed so far, the losses L( )t were  cross-entropies between training targets y( )t and outputs o( )t .
As with a feedforward network, it is in principle possible to use almost any loss with a recurrent network.
As with a feedforward network, we usually wish to interpret the output of the RNN as a probability distribution, and we usually use the cross-entropy associated with that distribution to define the loss.
Mean squared error is the cross-entropy loss associated with an output distribution that is a unit Gaussian, for example, just as with a feedforward network.
When we use a predictive log-likelihood training objective, such as equa- tion , we train the RNN to estimate the conditional distribution of the next10.12 sequence element y( )t given the past inputs.
,x( )t ), (10.29) or, if the model includes connections from the output at one time step to the next time step,  log (p y( )t | x(1) , .
(10.30) Decomposing the joint probability over the sequence of y values as a series of one-step probabilistic predictions is one way to capture the full joint distribution  across the whole sequence.
When we do not feed past y values as inputs that condition the next step prediction, the directed graphical model contains no edges from any y( )i in the past to the current y( )t .
When we do feed the actual y values (not their prediction, but the actual observed or generated values) back into the network, the directed graphical model contains edges from all y( )i  values in the past to the current y( )t value.
As a simple example, let us consider the case where the RNN models only a sequence of scalar random variables Y = {y(1), .
We parametrize the joint  distribution of these observations using the chain rule (equation ) for conditional3.6 probabilities:  P P( ) = Y (y (1), .
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  y(1)y(1) y(2)y(2) y(3)y(3) y (4)y (4) y(5)y(5) y ( )...y ( )...
: every past observation y( )i may influence the conditional distribution of some y( )t (for t > i), given the previous values.
Parametrizing the graphical model directly according to this graph (as in equation ) might be very inefficient, with an ever growing number of10.6 inputs and parameters for each element of the sequence.
RNNs obtain the same full connectivity but efficient parametrization, as illustrated in figure .10.8  is L =    t  L( )t (10.32)  where L( )t = log (− P y( )t = y( )t | y( 1)t− , y ( 2)t− , .
(10.33)  y(1)y(1) y(2)y(2) y (3)y (3) y (4)y (4) y(5)y(5) y( )...y( )...  h(1)h(1) h(2)h(2) h(3)h(3) h(4)h(4) h(5)h(5) h( )...h( )...
Figure 10.8: Introducing the state variable in the graphical model of the RNN, even though it is a deterministic function of its inputs, helps to see how we can obtain a very efficient parametrization, based on equation .
Every stage in the sequence (for10.5 h( )t  and y( )t ) involves the same structure (the same number of inputs for each node) and can share the same parameters with the other stages.
Many graphical models aim to achieve statistical and computational efficiency by omitting edges that do not correspond to strong interactions.
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  example, it is common to make the Markov assumption that the graphical model should only contain edges from {y( )t k− , .
However, in some cases, we believe that all past inputs should have an influence on the next element of the sequence.
RNNs are useful when we believe that the distribution over y( )t may depend on a value of y( )i  from the distant past in a way that is not captured by the effect of y( )i on y( 1)t− .
One way to interpret an RNN as a graphical model is to view the RNN as defining a graphical model whose structure is the complete graph, able to represent  direct dependencies between any pair of y values.
The complete10.7 graph interpretation of the RNN is based on ignoring the hidden units h( )t by marginalizing them out of the model.
It is more interesting to consider the graphical model structure of RNNs that results from regarding the hidden units h( )t as random variables.1 Including the hidden units in the graphical model reveals that the RNN provides a very efficient parametrization of the joint distribution over the observations.
Suppose that we represented an arbitrary joint distribution over discrete values with a tabular representation—an array containing a separate entry for each possible assignment of values, with the value of that entry giving the probability of that assignment  occurring.
By comparison, due to parameter sharing, the number of parameters in the RNN is O(1) as a function of sequence length.
The number of parameters in the RNN may be adjusted to control model capacity but is not forced to scale with sequence length.
Equation shows that the RNN parametrizes10.5 long-term relationships between variables efficiently, using recurrent applications of the same function f and same parameters θ at each time step.
Incorporating the h( )t nodes in the graphical model decouples the past and the future, acting as an intermediate quantity between them.
A variable y( )i in the distant past may influence a variable y( )t via its effect on h. The structure of this graph shows that the model can be efficiently parametrized by using the same conditional probability distributions at  each time step, and that when the variables are all observed, the probability of the joint assignment of all variables can be evaluated efficiently.
Even with the efficient parametrization of the graphical model, some operations remain computationally challenging.
For example, it is difficult to predict missing  1 The conditional distribution over these variables given their parents is deterministic.
This is  perfectly legitimate, though it is somewhat rare to design a graphical model with such deterministic  hidden units.
The price recurrent networks pay for their reduced number of parameters is that the parameters may be difficult.optimizing  The parameter sharing used in recurrent networks relies on the assumption that the same parameters can be used for different time steps.
Equivalently, the assumption is that the conditional probability distribution over the variables at time t+1 given the variables at time t is stationary , meaning that the relationship between the previous time step and the next time step does not depend on t. In  principle, it would be possible to use t as an extra input at each time step and let the learner discover any time-dependence while sharing as much as it can between different time steps.
This would already be much better than using a different conditional probability distribution for each t, but the network would then have to extrapolate when faced with new values of .t  To complete our view of an RNN as a graphical model, we must describe how to draw samples from the model.
The main operation that we need to perform is simply to sample from the conditional distribution at each time step.
In the case when the output is a symbol taken from a vocabulary, one can  add a special symbol corresponding to the end of a sequence (Schmidhuber 2012, ).
In the training set, we insert this symbol as an extra member of the sequence, immediately after x( )τ  in each training example.
Another option is to introduce an extra Bernoulli output to the model that represents the decision to either continue generation or halt generation at each time step.
This approach is more general than the approach of adding an extra symbol to the vocabulary, because it may be applied to any RNN, rather than only RNNs that output a sequence of symbols.
In this approach the sigmoid is  trained to maximize the log-probability of the correct prediction as to whether the sequence ends or continues at each time step.
Another way to determine the sequence length τ is to add an extra output to the model that predicts the integer τ itself.
This approach requires adding an extra input to the recurrent update at each time step so that the recurrent update is aware of whether it is near the end of the generated sequence.
This extra input can either consist of the value of τ or can consist of τ t− , the number of remaining  390    CHAPTER 10.
Without this extra input, the RNN might generate sequences that end abruptly, such as a sentence that ends before it is complete.
( ).2014d  10.2.4 Modeling Sequences Conditioned on Context with RNNs  In the previous section we described how an RNN could correspond to a directed graphical model over a sequence of random variables y( )t with no inputs x.
In general, RNNs allow the extension of the graphical model view to represent not only a joint distribution over the y variables but also a conditional distribution over y given x.
As discussed in the context of feedforward networks in section , any model representing a variable6.2.1.1 P (y ; θ) can be reinterpreted as a model representing a conditional distribution P (y ω| ) with ω = θ.
We can extend such a model to represent a distribution P (y x| ) by using the same P(y ω| ) as before, but making ω a function of x.
When x is a fixed-size vector, we can simply make it an extra input of the RNN that generates the y sequence.
Some common ways of providing an extra input to an RNN are:  1. as an extra input at each time step, or  2. as the initial state h(0), or  3. both.
The interaction10.9 between the input x and each hidden unit vector h( )t is parametrized by a newly  introduced weight matrix R that was absent from the model of only the sequence of y values.
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  of xR that is effectively a new bias parameter used for each of the hidden units.
We can think of this model as taking the parameters θ of the non-conditional model and turning them into ω, where the bias parameters within are now a function of the input.ω  o(t−1)o(t−1) o( )to( )t o( +1)to( +1)t  L(t−1)L(t−1) L( )tL( )t L( +1)tL( +1)t  y (t−1)y (t−1) y( )ty( )t y( +1)ty( +1)t  h(t−1)h(t−1) h( )th( )t h( +1)th( +1)t WW W W  s( )...s( )... h( )...h( )...  V V V  U U U  xx  y ( )...y ( )...  R R R R R  Figure 10.9: An RNN that maps a fixed-length vector x into a distribution over sequences Y.
This RNN is appropriate for tasks such as image captioning, where a single image is used as input to a model that then produces a sequence of words describing the image.
Each element y( )t of the observed output sequence serves both as input (for the current time step) and, during training, as target (for the previous time step).
Rather than receiving only a single vector x as input, the RNN may receive a sequence of vectors x( )t as input.
,x( )τ ) that makes a conditional independence assumption that this distribution factorizes as    t  P (y( )t | x(1) , .
(10.35)  To remove the conditional independence assumption, we can add connections from the output at time t to the hidden unit at time t+ 1, as shown in figure .
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  o(t−1)o(t−1) o( )to( )t o( +1)to( +1)t  L(t−1)L(t−1) L( )tL( )t L( +1)tL( +1)t  y(t−1)y(t−1) y ( )ty ( )t y ( +1)ty ( +1)t  h(t−1)h(t−1) h( )th( )t h( +1)th( +1)t WW W W  h( )...h( )... h( )...h( )...  V V V  U U U  x(t−1)x(t−1)  R  x( )tx( )t x( +1)tx( +1)t  R R  Figure 10.10: A conditional recurrent neural network mapping a variable-length sequence of x values into a distribution over sequences of y values of the same length.
Compared to figure , this RNN contains connections from the previous output to the current state.10.3 These connections allow this RNN to model an arbitrary distribution over sequences of y given sequences of x of the same length.
The RNN of figure is only able to represent10.3 distributions in which the y values are conditionally independent from each other given the values.x  393    CHAPTER 10.
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  sequence still has one restriction, which is that the length of both sequences must be the same.
We describe how to remove this restriction in section .10.4  o(t−1)o(t−1) o( )to( )t o( +1)to( +1)t  L(t−1)L(t−1) L( )tL( )t L( +1)tL( +1)t  y(t−1)y(t−1) y( )ty( )t y ( +1)ty ( +1)t  h(t−1)h(t−1) h( )th( )t h( +1)th( +1)t  x(t−1)x(t−1) x( )tx( )t x( +1)tx( +1)t  g (t−1)g (t−1) g ( )tg ( )t g ( +1)tg ( +1)t  Figure 10.11: Computation of a typical bidirectional recurrent neural network, meant to learn to map input sequences x to target sequences y, with loss L( )t at each step t. The h recurrence propagates information forward in time (towards the right) while the g recurrence propagates information backward in time (towards the left).
Thus at each point t , the output units o( )t can benefit from a relevant summary of the past in its h( )t  input and from a relevant summary of the future in its g( )t input.
10.3 Bidirectional RNNs  All of the recurrent networks we have considered up to now have a “causal” struc- ture, meaning that the state at time t only captures information from the past, x(1) , .
Some of the models we have discussed also allow information from past y values to affect the current state when the y values are available.
For example, in speech recognition, the correct interpretation of the current sound as a phoneme may depend on the next few phonemes because of co-articulation and potentially may even depend on the next few words because of the linguistic dependencies between nearby words: if there are two interpretations of the current word that are both acoustically plausible, we may have to look far into the future (and the past) to disambiguate them.
This is also true of handwriting recognition and many other sequence-to-sequence learning tasks, described in the next section.
Bidirectional recurrent neural networks (or bidirectional RNNs) were invented to address that need (Schuster and Paliwal 1997, ).
They have been extremely suc- cessful (Graves 2012, ) in applications where that need arises, such as handwriting recognition (Graves 2008 Graves and Schmidhuber 2009et al., ; , ), speech recogni- tion (Graves and Schmidhuber 2005 Graves 2013 Baldi, ; et al., ) and bioinformatics ( et al., ).1999  As the name suggests, bidirectional RNNs combine an RNN that moves forward through time beginning from the start of the sequence with another RNN that moves backward through time beginning from the end of the sequence.
Figure 10.11 illustrates the typical bidirectional RNN, with h( )t standing for the state of the sub-RNN that moves forward through time and g( )t standing for the state of the  sub-RNN that moves backward through time.
This allows the output units o( )t  to compute a representation that depends on both the past and the future but is most sensitive to the input values around time t, without having to specify a fixed-size window around t (as one would have to do with a feedforward network, a convolutional network, or a regular RNN with a fixed-size look-ahead buffer).
This idea can be naturally extended to 2-dimensional input, such as images, by having RNNs, each one going in one of the four directions: up, down, left,four right.
At each point (i, j) of a 2-D grid, an output Oi,j could then compute a representation that would capture mostly local information but could also depend on long-range inputs, if the RNN is able to learn to carry that information.
Compared to a convolutional network, RNNs applied to images are typically more  expensive but allow for long-range lateral interactions between features in the same feature map ( , ;Visin et al.
Indeed, the forward propagation equations for such RNNs may be written in a form that shows they use a convolution that computes the bottom-up input to each layer, prior to the recurrent propagation across the feature map that incorporates the lateral interactions.
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  10.4 Encoder-Decoder Sequence-to-Sequence Architec-  tures  We have seen in figure how an RNN can map an input sequence to a fixed-size10.5 vector.
We have seen in figures , , and how an RNN can10.3 10.4 10.10 10.11 map an input sequence to an output sequence of the same length.
Encoder  …  x(1)x(1) x(2)x(2) x( )...x( )... x(nx)x(nx)  Decoder  …  y (1)y (1) y (2)y (2) y ( )...y ( )... y (ny)y (ny)  CC  Figure 10.12: Example of an encoder-decoder or sequence-to-sequence RNN architecture, for learning to generate an output sequence (y(1), .
It is composed of an encoder RNN that reads the input sequence and a decoder RNN that generates the output sequence (or computes the probability of a given output sequence).
The final hidden state of the encoder RNN is used to compute a generally fixed-size context variable C which represents a semantic summary of the input sequence and is given as input to the decoder RNN.
Here we discuss how an RNN can be trained to map an input sequence to an output sequence which is not necessarily of the same length.
This comes up in many applications, such as speech recognition, machine translation or question  396    CHAPTER 10.
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  answering, where the input and output sequences in the training set are generally not of the same length (although their lengths might be related).
We often call the input to the RNN the “context.” We want to produce a representation of this context, C .
The context C might be a vector or sequence of vectors that summarize the input sequence X x= ( (1), .
The simplest RNN architecture for mapping a variable-length sequence to another variable-length sequence was first proposed by ( ) andCho et al.
( ), who independently developed that archi-  tecture and were the first to obtain state-of-the-art translation using this approach.
The former system is based on scoring proposals generated by another machine translation system, while the latter uses a standalone recurrent network to generate the translations.
These authors respectively called this architecture, illustrated in figure , the encoder-decoder or sequence-to-sequence architecture.
(2) a decoder or writer or output RNN is conditioned on that fixed-length vector (just like in figure ) to generate the output sequence10.9 Y = (y(1) , .
The innovation of this kind of architecture over those presented in earlier sections of this chapter is that the lengths nx and ny can  vary from each other, while previous architectures constrained nx = ny = τ .
In a sequence-to-sequence architecture, the two RNNs are trained jointly to maximize the average of logP (y(1), .
The last state hnx of the encoder RNN is typically used as a representation C of the input sequence that is provided as input to the decoder RNN.
If the context C is a vector, then the decoder RNN is simply a vector-to- sequence RNN as described in section .
The input can be provided as the initial state of the RNN, or the input can be connected to the hidden units at each time step.
One clear limitation of this architecture is when the context C output by the encoder RNN has a dimension that is too small to properly summarize a long sequence.
Additionally, they introduced an attention mechanism that learns to associate elements of the sequence C to elements of the output  397    CHAPTER 10.
See section for more details.12.4.5.1  10.5 Deep Recurrent Networks  The computation in most RNNs can be decomposed into three blocks of parameters and associated transformations:  1. from the input to the hidden state,  2. from the previous hidden state to the next hidden state, and  3. from the hidden state to the output.
With the RNN architecture of figure , each of these three blocks is associated10.3 with a single weight matrix.
By a shallow transformation, we mean a transformation that would be represented by a single layer within a deep MLP.
Typically this is a transformation represented by a learned affine transformation followed by a fixed nonlinearity.
The experimental evidence is in agreement with the idea that we need enough depth in order to perform the required mappings.
See also Schmidhuber 1992( ), El Hihi and Bengio 1996 Jaeger 2007a( ), or ( ) for earlier work on deep RNNs.
( ) were the first to show a significant benefit of decomposing the state of an RNN into multiple layers as in figure (left).
We can think10.13 of the lower layers in the hierarchy depicted in figure a as playing a role10.13 in transforming the raw input into a representation that is more appropriate, at the higher levels of the hidden state.
( ) go a step further and propose to have a separate MLP (possibly deep) for each of the three blocks enumerated above, as illustrated in figure b.
Considerations of representational10.13 capacity suggest to allocate enough capacity in each of these three steps, but doing so by adding depth may hurt learning by making optimization difficult.
In general, it is easier to optimize shallower architectures, and adding the extra depth of figure b makes the shortest path from a variable in time step10.13 t to a variable in time step t+ 1 become longer.
For example, if an MLP with a single hidden  layer is used for the state-to-state transition, we have doubled the length of the shortest path between variables in any two different time steps, compared with the ordinary RNN of figure .
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  h  y  x  z  (a) (b) (c)  x  h  y  x  h  y  Figure 10.13: A recurrent neural network can be made deep in many ways (Pascanu et al., ).
Deeper computation (e.g., an MLP) can be introduced in the input-to-(b) hidden, hidden-to-hidden and hidden-to-output parts.
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  can be mitigated by introducing skip connections in the hidden-to-hidden path, as illustrated in figure c.10.13  10.6 Recursive Neural Networks  x(1)x(1) x(2)x(2) x(3)x(3)  V V V  yy  LL  x(4)x(4)  V  oo  U W U W  U W  Figure 10.14: A recursive network has a computational graph that generalizes that of the recurrent network from a chain to a tree.
,x( )t can be mapped to a fixed-size representation (the output o), with a fixed set of parameters (the weight matrices U, V ,W ).
The figure illustrates a supervised learning case in which some target is provided which is associated with the whole sequence.y  Recursive neural networks2 represent yet another generalization of recurrent networks, with a different kind of computational graph, which is structured as a deep tree, rather than the chain-like structure of RNNs.
Recursive neural10.14  2 We suggest to not abbreviate “recursive neural network” as “RNN” to avoid confusion with  “recurrent neural network.”  400    CHAPTER 10.
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  networks were introduced by Pollack 1990( ) and their potential use for learning to reason was described by ( ).
Recursive networks have been successfullyBottou 2011 applied to processing data structures as input to neural nets (Frasconi 1997et al., , 1998 Socher 2011a c 2013a), in natural language processing ( et al., , , ) as well as in computer vision ( , ).Socher et al.
2011b  One clear advantage of recursive nets over recurrent nets is that for a sequence of the same length τ, the depth (measured as the number of compositions of nonlinear operations) can be drastically reduced from τ to O(log τ ), which might  help deal with long-term dependencies.
One option is to have a tree structure which does not depend on the data, such as a balanced binary tree.
For example, when processing natural language sentences, the tree structure for the recursive network can be fixed to the structure of the parse tree of the sentence provided by a natural language parser ( , , ).
2011a 2013a discover and infer the tree structure that is appropriate for any given input, as suggested by ( ).Bottou 2011  Many variants of the recursive net idea are possible.
( ) associate the data with a tree structure,  and associate the inputs and targets with individual nodes of the tree.
The computation performed by each node does not have to be the traditional artificial neuron computation (affine transformation of all inputs followed by a monotone nonlinearity).
2013a and bilinear forms, which have previously been found useful to model relationships between concepts (Weston 2010 Bordes 2012et al., ; et al., ) when the concepts are represented by continuous vectors (embeddings).
10.7 The Challenge of Long-Term Dependencies  The mathematical challenge of learning long-term dependencies in recurrent net-  works was introduced in section .
The basic problem is that gradients prop-8.2.5 agated over many stages tend to either vanish (most of the time) or explode (rarely, but with much damage to the optimization).
Even if we assume that the parameters are such that the recurrent network is stable (can store memories, with gradients not exploding), the difficulty with long-term dependencies arises from the exponentially smaller weights given to long-term interactions (involving the multiplication of many Jacobians) compared to short-term ones.
Many other sources provide a deeper treatment ( , ;Hochreiter 1991 Doya 1993 Bengio, ; et al.,  401    CHAPTER 10.
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  − − −60 40 20 0 20 40 60 Input coordinate  −4 −3 −2 −1 0  1  2  3  4  P ro je ct io n o f o u tp u t  0  1  2  3  4  5  Figure 10.15: When composing many nonlinear functions (like the linear-tanh layer shown here), the result is highly nonlinear, typically with most of the values associated with a tiny derivative, some values with a large derivative, and many alternations between increasing and decreasing.
In this plot, we plot a linear projection of a 100-dimensional hidden state down to a single dimension, plotted on the y-axis.
The x-axis is the coordinate of the initial state along a random direction in the 100-dimensional space.
The plots show the function after each time step, or equivalently, after each number of times the transition function has been composed.
These compositions can result in extremely nonlinear behavior, as illustrated in figure .10.15  In particular, the function composition employed by recurrent neural networks somewhat resembles matrix multiplication.
We can think of the recurrence relation  h( )t = Wh( 1)t− (10.36)  as a very simple recurrent neural network lacking a nonlinear activation function, and lacking inputs x.
It may be simplified to  h( )t =  W t   h(0) , (10.37)  and if admits an eigendecomposition of the formW  W Q Q= Λ , (10.38)  402    CHAPTER 10.
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  with orthogonal , the recurrence may be simplified further toQ  h( )t = QΛtQh(0) .
(10.39)  The eigenvalues are raised to the power of t causing eigenvalues with magnitude less than one to decay to zero and eigenvalues with magnitude greater than one to explode.
The product wt will either vanish or  explode depending on the magnitude of w. However, if we make a non-recurrent network that has a different weight w( )t at each time step, the situation is different.
Suppose  that the w( )t values are generated randomly, independently from one another, with zero mean and variance v. The variance of the product is O(vn).
Very deep feedforward networks with carefully chosen scaling can thus avoid the vanishing and exploding gradient problem, as argued by ( ).Sussillo 2014  The vanishing and exploding gradient problem for RNNs was independently discovered by separate researchers ( , ; , , ).Hochreiter 1991 Bengio et al.
1993 1994 One may hope that the problem can be avoided simply by staying in a region of parameter space where the gradients do not vanish or explode.
Unfortunately, in  order to store memories in a way that is robust to small perturbations, the RNN must enter a region of parameter space where gradients vanish ( , ,Bengio et al.
Specifically, whenever the model is able to represent long term dependencies, the gradient of a long term interaction has exponentially smaller magnitude than the gradient of a short term interaction.
It does not mean that it is impossible to learn, but that it might take a very long time to learn long-term dependencies, because the signal about these dependencies will tend to be hidden by the smallest fluctuations arising from short-term dependencies.
In practice, the experiments in ( ) show that as we increase the span of the dependencies thatBengio et al.
1994 need to be captured, gradient-based optimization becomes increasingly difficult, with the probability of successful training of a traditional RNN via SGD rapidly  reaching 0 for sequences of only length 10 or 20.
For a deeper treatment of recurrent networks as dynamical systems, see Doya ( ), ( ) and ( ), with a review1993 Bengio et al.
The remaining sections of this chapter discuss various approaches that have been proposed to reduce the difficulty of learning long- term dependencies (in some cases allowing an RNN to learn dependencies across  403    CHAPTER 10.
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  hundreds of steps), but the problem of learning long-term dependencies remains one of the main challenges in deep learning.
10.8 Echo State Networks  The recurrent weights mapping from h( 1)t− to h( )t and the input weights mapping from x( )t to h( )t are some of the most difficult parameters to learn in a recurrent  network.
2002 Jaeger and Haas 2004 Jaeger 2007b, ) approach to avoiding this difficulty is to set the recurrent weights such that the recurrent hidden units do a good job of capturing the history of past inputs, and learn only the output weights.
This is the idea that was independently proposed for echo state networks or ESNs ( , ; , )Jaeger and Haas 2004 Jaeger 2007b and liquid state machines ( , ).
2002 that it uses spiking neurons (with binary outputs) instead of the continuous-valued hidden units used for ESNs.
Both ESNs and liquid state machines are termed reservoir computing (Lukoševičius and Jaeger 2009, ) to denote the fact that the hidden units form of reservoir of temporal features which may capture different aspects of the history of inputs.
One way to think about these reservoir computing recurrent networks is that they are similar to kernel machines: they map an arbitrary length sequence (the history of inputs up to time t) into a fixed-length vector (the recurrent state h( )t ), on which a linear predictor (typically a linear regression) can be applied to solve the problem of interest.
For example, if the output consists of linear regression from the hidden units to the output targets, and the training criterion is mean squared error, then it is convex and may be solved reliably with simple learning algorithms ( , ).Jaeger 2003  The important question is therefore: how do we set the input and recurrent weights so that a rich set of histories can be represented in the recurrent neural network state?
The answer proposed in the reservoir computing literature is to  view the recurrent net as a dynamical system, and set the input and recurrent weights such that the dynamical system is near the edge of stability.
The original idea was to make the eigenvalues of the Jacobian of the state-to- state transition function be close to .
As explained in section , an important1 8.2.5 characteristic of a recurrent network is the eigenvalue spectrum of the Jacobians  J( )t = ∂s ( )t  ∂s( 1)t− .
Of particular importance is the spectral radius of J ( )t , defined to  be the maximum of the absolute values of its eigenvalues.
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  To understand the effect of the spectral radius, consider the simple case of back-propagation with a Jacobian matrix J that does not change with t. This case happens, for example, when the network is purely linear.
If we begin with a gradient vector g , then after one step of back-propagation, we will have Jg, and after n steps we will have Jng.
Now consider what happens if we instead back-propagate a perturbed version of g. If we begin with g + δv, then after one step, we will  have J(g + δv).
From this we can see that back-propagation starting from g and back-propagation starting from g+ δv diverge by δJ nv after n steps of back-propagation.
If v is chosen to be a unit eigenvector of J with eigenvalue λ , then multiplication by the Jacobian simply scales the difference at each step.
When v corresponds to the largest value of | |λ , this perturbation achieves the widest possible separation of an initial perturbation of size .δ  When | |λ > 1, the deviation size δ λ| |n grows exponentially large.
Of course, this example assumed that the Jacobian was the same at every  time step, corresponding to a recurrent network with no nonlinearity.
When a nonlinearity is present, the derivative of the nonlinearity will approach zero on many time steps, and help to prevent the explosion resulting from a large spectral radius.
Indeed, the most recent work on echo state networks advocates using a spectral radius much larger than unity ( , ; , ).Yildiz et al.
2012 Jaeger 2012  Everything we have said about back-propagation via repeated matrix multipli- cation applies equally to forward propagation in a network with no nonlinearity, where the state h( +1)t = h( )t W .
When a linear map W  always shrinks h as measured by the L2 norm, then we say that the map is contractive.
When the spectral radius is less than one, the mapping from h( )t to h( +1)t is contractive, so a small change becomes smaller  after each time step.
This necessarily makes the network forget information about the past when we use a finite level of precision (such as 32 bit integers) to store the state vector.
The Jacobian matrix tells us how a small change of h ( )t propagates one step forward, or equivalently, how the gradient on h( +1)t propagates one step backward, during back-propagation.
Note that neither W nor J need to be symmetric (al- though they are square and real), so they can have complex-valued eigenvalues and eigenvectors, with imaginary components corresponding to potentially oscillatory  405    CHAPTER 10.
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  behavior (if the same Jacobian was applied iteratively).
Even though h( )t or a small variation of h ( )t of interest in back-propagation are real-valued, they can be expressed in such a complex-valued basis.
What matters is what happens to the magnitude (complex absolute value) of these possibly complex-valued basis coefficients, when we multiply the matrix by the vector.
An eigenvalue with magnitude greater than one corresponds to magnification (exponential growth, if applied iteratively) or shrinking (exponential decay, if applied iteratively).
However, it remains true that a small initial variation can turn into a large variation after several steps.
One difference between the purely linear case and the nonlinear case is that the use of a squashing nonlinearity such as tanh can cause the recurrent dynamics to become bounded.
Note that it is possible for back-propagation to retain unbounded dynamics even when forward propagation has bounded dynamics, for example, when a sequence of tanh units are all in the middle of their linear regime and are connected by weight matrices with spectral radius greater than .
However, it is1 rare for all of the units to simultaneously lie at their linear activation point.tanh  The strategy of echo state networks is simply to fix the weights to have some spectral radius such as , where information is carried forward through time but3  does not explode due to the stabilizing effect of saturating nonlinearities like tanh.
More recently, it has been shown that the techniques used to set the weights in ESNs could be used to the weights in a fully trainable recurrent net-initialize work (with the hidden-to-hidden recurrent weights trained using back-propagation through time), helping to learn long-term dependencies (Sutskever 2012 Sutskever, ; et al., ).
In this setting, an initial spectral radius of 1.2 performs well, combined2013 with the sparse initialization scheme described in section .8.4  10.9 Leaky Units and Other Strategies for Multiple  Time Scales  One way to deal with long-term dependencies is to design a model that operates at multiple time scales, so that some parts of the model operate at fine-grained  time scales and can handle small details, while other parts operate at coarse time scales and transfer information from the distant past to the present more efficiently.
These include the addition of skip connections across time, “leaky units” that integrate signals with different time constants, and the removal of some of the connections  406    CHAPTER 10.
10.9.1 Adding Skip Connections through Time  One way to obtain coarse time scales is to add direct connections from variables in the distant past to variables in the present.
The idea of using such skip connections  dates back to ( ) and follows from the idea of incorporating delays inLin et al.
In an ordinary recurrentLang and Hinton 1988 network, a recurrent connection goes from a unit at time t to a unit at time t+ 1.
It is possible to construct recurrent networks with longer delays ( , ).Bengio 1991  As we have seen in section , gradients may vanish or explode exponentially8.2.5 with respect to the number of time steps.
Since there are both delayed and single step connections, gradients may still explode exponentially in τ.
This allows the learning algorithm to capture longer dependencies although not all long-term dependencies may be represented well in this way.
10.9.2 Leaky Units and a Spectrum of Different Time Scales  Another way to obtain paths on which the product of derivatives is close to one is to have units with linear self-connections and a weight near one on these connections.
When we accumulate a running average µ( )t of some value v( )t by applying the update µ( )t ← αµ( 1)t− + (1 − α)v( )t the α parameter is an example of a linear self- connection from µ( 1)t− to µ( )t .
When α is near one, the running average remembers information about the past for a long time, and when α is near zero, information about the past is rapidly discarded.
Skip connections through d time steps are a way of ensuring that a unit can always learn to be influenced by a value from d time steps earlier.
The use of a linear self-connection with a weight near one is a different way of ensuring that the unit can access values from the past.
The linear self-connection approach allows this effect to be adapted more smoothly and flexibly by adjusting the real-valued α rather than by adjusting the integer-valued skip length.
These ideas were proposed by ( ) and by ( ).Mozer 1992 El Hihi and Bengio 1996  Leaky units were also found to be useful in the context of echo state networks ( , ).Jaeger et al.
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  There are two basic strategies for setting the time constants used by leaky units.
One strategy is to manually fix them to values that remain constant, for example by sampling their values from some distribution once at initialization time.
Having such leaky units at different time scales appears to help with long-term dependencies ( , ;Mozer 1992 Pascanu 2013et al., ).
10.9.3 Removing Connections  Another approach to handle long-term dependencies is the idea of organizing the state of the RNN at multiple time-scales ( , ), withEl Hihi and Bengio 1996 information flowing more easily through long distances at the slower time scales.
This idea differs from the skip connections through time discussed earlier because it involves actively removing length-one connections and replacing them with longer connections.
Units receiving suchadd new connections may learn to operate on a long time scale but may also choose to  focus on their other short-term connections.
There are different ways in which a group of recurrent units can be forced to operate at different time scales.
One option is to make the recurrent units leaky, but to have different groups of units associated with different fixed time scales.
Another option is to have explicit and discrete updates taking place2013 at different times, with a different frequency for different groups of units.
10.10 The Long Short-Term Memory and Other Gated  RNNs  As of this writing, the most effective sequence models used in practical applications are called gated RNNs.
These include the long short-term memory and networks based on the .gated recurrent unit  Like leaky units, gated RNNs are based on the idea of creating paths through time that have derivatives that neither vanish nor explode.
Leaky units did this with connection weights that were either manually chosen constants or were parameters.
×  input input gate forget gate output gate  output  state  self-loop  ×  + ×  Figure 10.16: Block diagram of the LSTM recurrent network “cell.” Cells are connected recurrently to each other, replacing the usual hidden units of ordinary recurrent networks.
All the gating units have a sigmoid nonlinearity, while the input unit can have any squashing nonlinearity.
Leaky units allow the network to accumulate information (such as evidence for a particular feature or category) over a long duration.
However, once that information has been used, it might be useful for the neural network to forget the old state.
For example, if a sequence is made of sub-sequences and we want a leaky unit to accumulate evidence inside each sub-subsequence, we need a mechanism to forget the old state by setting it to zero.
Instead of manually deciding when to clear the state, we want the neural network to learn to decide when to do it.
10.10.1 LSTM  The clever idea of introducing self-loops to produce paths where the gradient can flow for long durations is a core contribution of the initial long short-term  memory (LSTM) model (Hochreiter and Schmidhuber 1997, ).
A crucial addition has been to make the weight on this self-loop conditioned on the context, rather than fixed ( , ).
In this case, we mean that even for an LSTM with fixed parameters, the time scale of integration can change based on the input sequence, because the time constants are output by the model itself.
The LSTM has been found extremely successful in many applications, such as unconstrained handwriting recognition (Graves et al., ), speech recognition (2009 Graves 2013 Graves and Jaitly 2014et al., ; , ), handwriting generation (Graves 2013, ), machine translation (Sutskever 2014et al., ), image captioning ( , ;Kiros et al.
The corresponding10.16 forward propagation equations are given below, in the case of a shallow recurrent network architecture.
Instead of a unit that simply applies an element- wise nonlinearity to the affine transformation of inputs and recurrent units, LSTM recurrent networks have “LSTM cells” that have an internal recurrence (a self-loop), in addition to the outer recurrence of the RNN.
Each cell has the same inputs and outputs as an ordinary recurrent network, but has more parameters and a system of gating units that controls the flow of information.
The most important  component is the state unit s ( )t i that has a linear self-loop similar to the leaky  units described in the previous section.
However, here, the self-loop weight (or the  associated time constant) is controlled by a forget gate unit f ( )t i (for time step t  and cell ), that sets this weight to a value between 0 and 1 via a sigmoid unit:i  f ( )t i = σ    bfi +   j  U fi,j x ( )t j +    j  Wfi,jh ( 1)t− j    , (10.40)  where x( )t is the current input vector and h( )t is the current hidden layer vector, containing the outputs of all the LSTM cells, and bf ,Uf , Wf are respectively biases, input weights and recurrent weights for the forget gates.
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  internal state is thus updated as follows, but with a conditional self-loop weight  f ( )t i :  s ( )t i = f  ( )t i s  ( 1)t− i + g  ( )t i σ    b i+   j  Ui,jx ( )t j +    j  Wi,jh ( 1)t− j     , (10.41)  where b, U andW respectively denote the biases, input weights and recurrent  weights into the LSTM cell.
The external input gate unit g ( )t i is computed  similarly to the forget gate (with a sigmoid unit to obtain a gating value between 0 and 1), but with its own parameters:  g ( )t i = σ    bgi +   j  U gi,jx ( )t j +    j  W gi,jh ( 1)t− j     .
(10.42)  The output h ( )t i of the LSTM cell can also be shut off, via the output gate q  ( )t i ,  which also uses a sigmoid unit for gating:  h ( )t i = tanh   s ( )t i   q ( )t i (10.43)  q ( )t i = σ    boi +   j  Uoi,jx ( )t j +    j  W oi,jh ( 1)t− j     (10.44)  which has parameters bo, U o, W o for its biases, input weights and recurrent  weights, respectively.
Among the variants, one can choose to use the cell state s ( )t i  as an extra input (with its weight) into the three gates of the i-th unit, as shown in figure .
This would require three additional parameters.10.16  LSTM networks have been shown to learn long-term dependencies more easily than the simple recurrent architectures, first on artificial data sets designed for testing the ability to learn long-term dependencies ( , ;Bengio et al.
1994 Hochreiter and Schmidhuber 1997 Hochreiter 2001, ; et al., ), then on challenging sequence processing tasks where state-of-the-art performance was obtained (Graves 2012, ; Graves 2013 Sutskever 2014et al., ; et al., ).
What other successful architectures could be designed that allow the network to dynamically control the time scale and forgetting behavior of different units?
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  Some answers to these questions are given with the recent work on gated RNNs, whose units are also known as gated recurrent units or GRUs ( , ;Cho et al.
The main difference with the LSTM is that a single gating unit simultaneously controls the forgetting factor and the decision to update the state unit.
The update equations are the following:  h ( )t i = u  ( 1)t− i h  ( 1)t− i + (1 − u  ( 1)t− i )σ    bi +   j  Ui,jx ( 1)t− j +    j  Wi,jr ( 1)t− j h  ( 1)t− j     ,  (10.45)  where u stands for “update” gate and r for “reset” gate.
Their value is defined as usual:  u ( )t i = σ    bui +   j  Uui,jx ( )t j +    j  Wui,jh ( )t j     (10.46)  and  r ( )t i = σ    bri +   j  U ri,jx ( )t j +    j  Wri,jh ( )t j     .
The update gates act like conditional leaky integrators that can linearly gate any dimension, thus choosing to copy it (at one extreme of the sigmoid) or completely ignore it (at the other extreme) by replacing it by the new “target state” value (towards which the leaky integrator wants to converge).
The reset gates control which parts of the state get used to compute the next target state, introducing an  additional nonlinear effect in the relationship between past state and future state.
Alternately, the product of a global gate (covering a whole group of units, such as an entire layer) and a local gate (per unit) could be used to combine global control and local control.
However, several investigations over architectural variations of the LSTM and GRU found no variant that would clearly beat both of these across a wide range of tasks ( , ;Greff et al.
( ) found that adding a bias of 1 to the LSTM forget gate, a practice2015 advocated by ( ), makes the LSTM as strong as the best of theGers et al.
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  10.11 Optimization for Long-Term Dependencies  Section and section have described the vanishing and exploding gradient8.2.5 10.7 problems that occur when optimizing RNNs over many time steps.
An interesting idea proposed by Martens and Sutskever 2011( ) is that second derivatives may vanish at the same time that first derivatives vanish.
Second-order  optimization algorithms may roughly be understood as dividing the first derivative by the second derivative (in higher dimension, multiplying the gradient by the inverse Hessian).
If the second derivative shrinks at a similar rate to the first derivative, then the ratio of first and second derivatives may remain relatively constant.
Unfortunately, second-order methods have many drawbacks, including high computational cost, the need for a large minibatch, and a tendency to be attracted to saddle points.
( ) found that simpler methods such as Nesterov momentum with careful initialization could achieve similar results.
Both of these approaches have largely been replaced by simply using SGD (even without momentum) applied to LSTMs.
This is part of a continuing theme in machine learning that it is often  much easier to design a model that is easy to optimize than it is to design a more powerful optimization algorithm.
10.11.1 Clipping Gradients  As discussed in section , strongly nonlinear functions such as those computed8.2.4 by a recurrent net over many time steps tend to have derivatives that can be either very large or very small in magnitude.
This is illustrated in figure and8.3 figure , in which we see that the objective function (as a function of the10.17  parameters) has a “landscape” in which one finds “cliffs”: wide and rather flat regions separated by tiny regions where the objective function changes quickly, forming a kind of cliff.
The difficulty that arises is that when the parameter gradient is very large, a gradient descent parameter update could throw the parameters very far, into a region where the objective function is larger, undoing much of the work that had been done to reach the current solution.
The gradient tells us the direction that corresponds to the steepest descent within an infinitesimal region surrounding the current parameters.
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  decay slowly enough that consecutive steps have approximately the same learning rate.
A step size that is appropriate for a relatively linear part of the landscape is often inappropriate and causes uphill motion if we enter a more curved part of the landscape on the next step.
                          Figure 10.17: Example of the effect of gradient clipping in a recurrent network with two parameters w and b. Gradient clipping can make gradient descent perform more reasonably in the vicinity of extremely steep cliffs.
These steep cliffs commonly occur in recurrent networks near where a recurrent network behaves approximately linearly.
The cliff is exponentially steep in the number of time steps because the weight matrix is multiplied by itself once for each time step.
(Left)Gradient descent without gradient clipping overshoots the bottom of this small ravine, then receives a very large gradient from the cliff face.
While it does ascend the cliff face, the step size is restricted so that it cannot be propelled away from steep region near the solution.
One option is to clip the parameter gradient from a minibatch element-wise (Mikolov 2012, ) just before the parameter update.
Another is to clip the norm || ||g of the gradient g (Pascanu 2013et al., ) just before the parameter update:  if || ||g > v (10.48)  g ← gv|| ||g (10.49)  414    CHAPTER 10.
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  where v is the norm threshold and g is used to update parameters.
Because the gradient of all the parameters (including different groups of parameters, such as weights and biases) is renormalized jointly with a single scaling factor, the latter method has the advantage that it guarantees that each step is still in the gradient direction, but experiments suggest that both forms work similarly.
Although the parameter update has the same direction as the true gradient, with gradient norm clipping, the parameter update vector norm is now bounded.
In  fact, even simply taking a random step when the gradient magnitude is above a threshold tends to work almost as well.
If the explosion is so severe that the gradient is numerically Inf or Nan (considered infinite or not-a-number), then a random step of size v can be taken and will typically move away from the numerically unstable configuration.
Clipping the gradient norm per-minibatch will not change the direction of the gradient for an individual minibatch.
However, taking the average of the norm-clipped gradient from many minibatches is not equivalent to clipping the norm of the true gradient (the gradient formed from using all examples).
Examples that have large gradient norm, as well as examples that appear in the same minibatch as such examples, will have their contribution to the final direction diminished.
This stands in contrast to traditional minibatch gradient descent, where the true gradient direction is equal to the average over all  minibatch gradients.
Put another way, traditional stochastic gradient descent uses an unbiased estimate of the gradient, while gradient descent with norm clipping introduces a heuristic bias that we know empirically to be useful.
With element- wise clipping, the direction of the update is not aligned with the true gradient or the minibatch gradient, but it is still a descent direction.
It has also been proposed (Graves 2013, ) to clip the back-propagated gradient (with respect to hidden units) but no comparison has been published between these variants; we conjecture that all these methods behave similarly.
10.11.2 Regularizing to Encourage Information Flow  Gradient clipping helps to deal with exploding gradients, but it does not help with vanishing gradients.
To address vanishing gradients and better capture long-term dependencies, we discussed the idea of creating paths in the computational graph of the unfolded recurrent architecture along which the product of gradients associated with arcs is near 1.
One approach to achieve this is with LSTMs and other self- loops and gating mechanisms, described above in section .
Another idea is10.10 to regularize or constrain the parameters so as to encourage “information flow.” In particular, we would like the gradient vector ∇  h( )t L being back-propagated to  415    CHAPTER 10.
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  maintain its magnitude, even if the loss function only penalizes the output at the end of the sequence.
Formally, we want  (∇ h( )t L)  ∂h( )t  ∂h( 1)t− (10.50)  to be as large as  ∇ h( )t L. (10.51)  With this objective, Pascanu 2013et al.
( ) propose the following regularizer:  Ω =   t      | ∇( h ( )t L) ∂h ( )t  ∂h( 1)t−   | ||∇  h( )t L| | − 1     2  .
( ) propose an approximation in which we consider the back-propagated2013  vectors ∇ h( )t L as if they were constants (for the purpose of this regularizer, so  that there is no need to back-propagate through them).
The experiments with this regularizer suggest that, if combined with the norm clipping heuristic (which handles gradient explosion), the regularizer can considerably increase the span of the dependencies that an RNN can learn.
Because it keeps the RNN dynamics on the edge of explosive gradients, the gradient clipping is particularly important.
A key weakness of this approach is that it is not as effective as the LSTM for tasks where data is abundant, such as language modeling.
10.12 Explicit Memory  Intelligence requires knowledge and acquiring knowledge can be done via learning, which has motivated the development of large-scale deep architectures.
Some knowledge can be implicit, sub- conscious, and difficult to verbalize—such as how to walk, or how a dog looks different from a cat.
Other knowledge can be explicit, declarative, and relatively straightforward to put into words—every day commonsense knowledge, like “a cat is a kind of animal,” or very specific facts that you need to know to accomplish your current goals, like “the meeting with the sales team is at 3:00 PM in room 141.”  Neural networks excel at storing implicit knowledge.
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  Task network,  controlling the memory  Memory cells  Writing  mechanism  Reading  mechanism  Figure 10.18: A schematic of an example of a network with an explicit memory, capturing some of the key design elements of the neural Turing machine.
In this diagram we distinguish the “representation” part of the model (the “task network,” here a recurrent net in the bottom) from the “memory” part of the model (the set of cells), which can store facts.
The task network learns to “control” the memory, deciding where to read from and where to write to within the memory (through the reading and writing mechanisms, indicated by bold arrows pointing at the reading and writing addresses).
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  same input before it can be stored in a neural network parameters, and even then, that input will not be stored especially precisely.
( ) hypothesized that this is because neural networks lack the equivalent of the working memory system that allows human beings to explicitly hold and manipulate pieces of information that are relevant to achieving some goal.
Such explicit memory components would allow our systems not only to rapidly and “intentionally” store and retrieve specific facts but also to sequentially reason with them.
The need for neural networks that can process information in a sequence of steps, changing  the way the input is fed into the network at each step, has long been recognized as important for the ability to reason rather than to make automatic, intuitive responses to the input ( , ).Hinton 1990  To resolve this difficulty, Weston 2014et al.
( ) introduced memory networks that include a set of memory cells that can be accessed via an addressing mecha- nism.
Memory networks originally required a supervision signal instructing them how to use their memory cells.
( ) introduced the neural Turing machine , which is able to learn to read from and write arbitrary content to memory cells without explicit supervision about which actions to undertake, and allowed end-to-end training without this supervision signal, via the use of a content-based soft attention mechanism (see ( ) and sec-Bahdanau et al.
This soft addressing mechanism has become standard with other12.4.5.1 related architectures emulating algorithmic mechanisms in a way that still allows gradient-based optimization ( , ;Sukhbaatar et al.
2015 Joulin and Mikolov 2015, ; Kumar 2015 Vinyals 2015a Grefenstette 2015et al., ; et al., ; et al., ).
The difference is that the network outputs an internal state that chooses which cell to read from or write to, just as memory accesses in a digital computer read from or write to a specific address.
The coefficients for these operations are chosen to be focused on a small number of cells, for example, by producing them via a softmax function.
Using these weights with non-zero derivatives allows the functions controlling access to the memory to be optimized using gradient descent.
The gradient on these coefficients indicates whether each of them should be increased or decreased, but the gradient will typically be large only for those memory addresses receiving a large coefficient.
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  the single scalar stored by an LSTM or GRU memory cell.
We pay the computational cost of producing a coefficient for many cells, but we expect these coefficients to cluster around a small number of cells.
Another reason to use vector-valued memory cells is that they allow for content-based addressing, where the weight used to read to or write from a cell is a function of that cell.
Vector-valued cells allow us to retrieve a  complete vector-valued memory if we are able to produce a pattern that matches some but not all of its elements.
We can think of a content-based read instruction as saying, “Retrieve the lyrics of the song that has the chorus ‘We all live in a yellow submarine.’ ” Content-based addressing is more useful when we make the objects to be retrieved large—if every letter of the song was stored in a separate memory cell, we would not be able to find them this way.
We can think of a location-based read instruction as saying “Retrieve the lyrics of the song in slot 347.” Location-based addressing can often be a perfectly sensible mechanism even when the memory cells are small.
If the content of a memory cell is copied (not forgotten) at most time steps, then the information it contains can be propagated forward in time and the gradients propagated backward in time without either vanishing or exploding.
The explicit memory approach is illustrated in figure , where we see that10.18 a “task neural network” is coupled with a memory.
Although that task neural network could be feedforward or recurrent, the overall system is a recurrent network.
One reason for this advantage may be because information and gradients can be propagated (forward in time or backwards in time, respectively) for very long durations.
As an alternative to back-propagation through weighted averages of memory cells, we can interpret the memory addressing coefficients as probabilities and stochastically read just one cell (Zaremba and Sutskever 2015, ).
Optimizing models that make discrete decisions requires specialized optimization algorithms, described in section .
So far, training these stochastic architectures that make discrete20.9.1 decisions remains harder than training deterministic algorithms that make soft decisions.
SEQUENCE MODELING: RECURRENT AND RECURSIVE NETS  mechanism for choosing an address is in its form identical to the attention mechanism which had been previously introduced in the context of machine translation ( , ) and discussed in section .
2015 12.4.5.1 of attention mechanisms for neural networks was introduced even earlier, in the context of handwriting generation (Graves 2013, ), with an attention mechanism that was constrained to move only forward in time through the sequence.
In the case of machine translation and memory networks, at each step, the focus of attention can move to a completely different place, compared to the previous step.
Our discussion now moves to how to choose and use these tools and how to apply them to real-world tasks.
                                     Chapter 11  Practical Methodology  Successfully applying deep learning techniques requires more than just a good knowledge of what algorithms exist and the principles that explain how they work.
A good machine learning practitioner also needs to know how to choose an algorithm for a particular application and how to monitor and respond to feedback  obtained from experiments in order to improve a machine learning system.
During day to day development of machine learning systems, practitioners need to decide whether to gather more data, increase or decrease model capacity, add or remove regularizing features, improve the optimization of a model, improve approximate inference in a model, or debug the software implementation of the model.
All of these operations are at the very least time-consuming to try out, so it is important to be able to determine the right course of action rather than blindly guessing.
Most of this book is about different machine learning models, training algo- rithms, and objective functions.
This may give the impression that the most important ingredient to being a machine learning expert is knowing a wide variety of machine learning techniques and being good at different kinds of math.
In prac-  tice, one can usually do much better with a correct application of a commonplace algorithm than by sloppily applying an obscure algorithm.
Many of the recommendations in this chapter are adapted from ( ).Ng 2015  We recommend the following practical design process:  • Determine your goals—what error metric to use, and your target value for this error metric.
These goals and error metrics should be driven by the problem that the application is intended to solve.
Diag- nose which components are performing worse than expected and whether it is due to overfitting, underfitting, or a defect in the data or software.
• Repeatedly make incremental changes such as gathering new data, adjusting hyperparameters, or changing algorithms, based on specific findings from your instrumentation.
Street View cars photograph the buildings and record  the GPS coordinates associated with each photograph.
A convolutional network recognizes the address number in each photograph, allowing the Google Maps database to add that address in the correct location.
The story of how this commercial application was developed gives an example of how to follow the design methodology we advocate.
11.1 Performance Metrics  Determining your goals, in terms of which error metric to use, is a necessary first  step because your error metric will guide all of your future actions.
The Bayes error defines the minimum error rate that you can hope to achieve, even if you have infinite training data and can recover the true probability distribution.
This is because your input features may not contain complete information about the output variable, or because the system might be intrinsically stochastic.
When your goal is to build the best possible real-world product or service, you can typically collect more data but must determine the value of reducing error further and weigh  this against the cost of collecting more data.
Data collection can require time, money, or human suffering (for example, if your data collection process involves performing invasive medical tests).
When your goal is to answer a scientific question about which algorithm performs better on a fixed benchmark, the benchmark  422    CHAPTER 11.
PRACTICAL METHODOLOGY  specification usually determines the training set and you are not allowed to collect more data.
Typically, in the academic setting, we have some estimate of the error rate that is attainable based on previously published benchmark results.
In the real-word setting, we have some idea of the error rate that is necessary for an application to be safe, cost-effective, or appealing to consumers.
Once you have determined your realistic desired error rate, your design decisions will be guided by reaching this error rate.
Another important consideration besides the target value of the performance metric is the choice of which metric to use.
Several different performance metrics may be used to measure the effectiveness of a complete application that includes machine learning components.
As described in section , it is5.1.2 common to measure the accuracy, or equivalently, the error rate, of a system.
For example, an e-mail spam detection system can make two kinds of mistakes: incorrectly classifying a legitimate message as spam, and incorrectly allowing a spam message to appear in the inbox.
It is much worse to block a legitimate  message than to allow a questionable message to pass through.
Rather than measuring the error rate of a spam classifier, we may wish to measure some form of total cost, where the cost of blocking legitimate messages is higher than the cost of allowing spam messages.
We can easily achieve 99.9999% accuracy on the detection task, by simply hard-coding the classifier to always report that the disease is absent.
Precision is the fraction of detections  reported by the model that were correct, while recall is the fraction of true events that were detected.
A detector that says everyone has the disease would achieve perfect recall, but precision equal to the percentage of people who have the disease (0.0001% in our example of a disease that only one people in a million have).
When using precision and recall, it is common to plot a PR curve, with precision on the y-axis and recall on the x-axis.
PRACTICAL METHODOLOGY  network designed to detect a disease outputs ŷ = P (y = 1 | x), estimating the probability that a person whose medical results are described by features x has the disease.
In many cases, we wish to summarize the performance of the classifier with a single number rather than a curve.
This is useful when the machine learning algorithm can estimate  how confident it should be about a decision, especially if a wrong decision can be harmful and if a human operator is able to occasionally take over.
The task is to transcribe the address number from a photograph in order to associate the location where the photo was taken with the correct address in a map.
Because the value of the map degrades considerably if the map is inaccurate, it is important to add an address only if the transcription is correct.
If the machine learning system thinks that it is less likely than a human being to obtain the correct transcription, then the best course of action is to allow a human to transcribe the photo instead.
Of course, the machine learning system is only useful if it is able to dramatically reduce the amount of photos that the human operators must process.
Coverage is the fraction  of examples for which the machine learning system is able to produce a response.
One can always obtain 100% accuracy by refusing to process any example, but this reduces the coverage to 0%.
For the Street View task, the goal for the project was to reach human-level transcription accuracy while maintaining 95% coverage.
What is important is to determine which performance metric to improve ahead of time, then concentrate on improving this metric.
Without clearly defined goals,  it can be difficult to tell whether changes to a machine learning system make progress or not.
PRACTICAL METHODOLOGY  11.2 Default Baseline Models  After choosing performance metrics and goals, the next step in any practical application is to establish a reasonable end-to-end system as soon as possible.
In this section, we provide recommendations for which algorithms to use as the first baseline approach in various situations.
Keep in mind that deep learning research progresses quickly, so better default algorithms are likely to become available soon  after this writing.
If your problem has a chance of being solved by just choosing a few linear weights correctly, you may want to begin with a simple statistical model like logistic regression.
If you know that your problem falls into an “AI-complete” category like object recognition, speech recognition, machine translation, and so on, then you are likely to do well by beginning with an appropriate deep learning model.
If you want to perform supervised learning with fixed-size vectors as input,  use a feedforward network with fully connected layers.
If the input has known topological structure (for example, if the input is an image), use a convolutional network.
In these cases, you should begin by using some kind of piecewise linear unit (ReLUs or their generalizations like Leaky ReLUs, PreLus and maxout).
A reasonable choice of optimization algorithm is SGD with momentum with a decaying learning rate (popular decay schemes that perform better or worse on different problems include decaying linearly until reaching a fixed minimum learning rate, decaying exponentially, or decreasing the learning rate by a factor of 2-10 each time validation error plateaus).
Batch normalization can have a dramatic effect on optimization performance,  especially for convolutional networks and networks with sigmoidal nonlinearities.
While it is reasonable to omit batch normalization from the very first baseline, it should be introduced quickly if optimization appears to be problematic.
Unless your training set contains tens of millions of examples or more, you should include some mild forms of regularization from the start.
Dropout is an excellent regularizer that is easy to implement and compatible with many models and training algorithms.
Batch normalization also sometimes reduces generalization error and allows dropout to be omitted, due to the noise in the estimate of the statistics used to normalize each variable.
PRACTICAL METHODOLOGY  If your task is similar to another task that has been studied extensively, you will probably do well by first copying the model and algorithm that is already known to perform best on the previously studied task.
For example, it is common to use the features from a convolutional network trained on ImageNet to solve other computer vision tasks ( , ).Girshick et al.
2015  A common question is whether to begin by using unsupervised learning, de- scribed further in part .
Some domains, suchIII  as natural language processing, are known to benefit tremendously from unsuper- vised learning techniques such as learning unsupervised word embeddings.
In other domains, such as computer vision, current unsupervised learning techniques do not bring a benefit, except in the semi-supervised setting, when the number of labeled examples is very small ( , ;Kingma et al.
If your application is in a context where unsupervised learning is known to be important, then include it in your first end-to-end baseline.
Otherwise, only use unsupervised learning in your first attempt if the task you want to solve is unsupervised.
You can always try adding unsupervised learning later if you observe that your initial baseline overfits.
11.3 Determining Whether to Gather More Data  After the first end-to-end system is established, it is time to measure the perfor- mance of the algorithm and determine how to improve it.
Many machine learning novices are tempted to make improvements by trying out many different algorithms.
If performance on the training set is poor, the learning algorithm is not using the training data that is already available, so there is no reason to gather more data.
Instead, try increasing the  size of the model by adding more layers or adding more hidden units to each layer.
If large models and carefully tuned optimization algorithms do not work well, then the problem might be the of the training data.
Thequality data may be too noisy or may not include the right inputs needed to predict the desired outputs.
If test set performance is much worse than training set performance, then gathering more data is one of the most effective solutions.
The key considerations are the cost and feasibility of gathering more data, the cost and feasibility of reducing the test error by other means, and the amount of data that is expected to be necessary to improve test set performance significantly.
At large internet companies with millions or billions of users, it is feasible to gather large datasets, and the expense of doing so can be considerably  less than the other alternatives, so the answer is almost always to gather more training data.
For example, the development of large labeled datasets was one of the most important factors in solving object recognition.
A simple alternative to gathering more data is to reduce the size of the model or improve regularization, by adjusting hyperparameters such as weight decay coefficients, or by adding regularization strategies such as dropout.
If you find that the gap between train and test performance is still unacceptable even after tuning the regularization hyperparameters, then gathering more data is advisable.
It is helpful to plot curves showing the relationship between  training set size and generalization error, like in figure .
By extrapolating such5.4 curves, one can predict how much additional training data would be needed to achieve a certain level of performance.
Usually, adding a small fraction of the total number of examples will not have a noticeable impact on generalization error.
It is therefore recommended to experiment with training set sizes on a logarithmic scale, for example doubling the number of examples between consecutive experiments.
If gathering much more data is not feasible, the only other way to improve generalization error is to improve the learning algorithm itself.
11.4 Selecting Hyperparameters  Most deep learning algorithms come with many hyperparameters that control many aspects of the algorithm’s behavior.
Some of these hyperparameters affect the quality of the model recovered by the training process and its ability to infer correct results when deployed on new inputs.
There are two basic approaches to choosing these hyperparameters: choosing them manually and choosing them automatically.
PRACTICAL METHODOLOGY  manually requires understanding what the hyperparameters do and how machine learning models achieve good generalization.
Automatic hyperparameter selection algorithms greatly reduce the need to understand these ideas, but they are often much more computationally costly.
11.4.1 Manual Hyperparameter Tuning  To set hyperparameters manually, one must understand the relationship between hyperparameters, training error, generalization error and computational resources (memory and runtime).
This means establishing a solid foundation on the fun- damental ideas concerning the effective capacity of a learning algorithm from chapter .5  The goal of manual hyperparameter search is usually to find the lowest general- ization error subject to some runtime and memory budget.
We do not discuss how to determine the runtime and memory impact of various hyperparameters here because this is highly platform-dependent.
The primary goal of manual hyperparameter search is to adjust the effective capacity of the model to match the complexity of the task.
Effective capacity is constrained by three factors: the representational capacity of the model, the ability of the learning algorithm to successfully minimize the cost function used to train the model, and the degree to which the cost function and training procedure regularize the model.
A model with more layers and more hidden units per layer has higher representational capacity—it is capable of representing more complicated functions.
It can not necessarily actually learn all of these functions though, if the training algorithm cannot discover that certain functions do a good job of minimizing the training cost, or if regularization terms such as weight decay forbid some of these functions.
The generalization error typically follows a U-shaped curve when plotted as  a function of one of the hyperparameters, as in figure .
At one extreme, the5.3 hyperparameter value corresponds to low capacity, and generalization error is high because training error is high.
At the other extreme, the hyperparameter value corresponds to high capacity, and the generalization error is high because the gap between training and test error is high.
Somewhere in the middle lies the optimal model capacity, which achieves the lowest possible generalization error, by adding a medium generalization gap to a medium amount of training error.
PRACTICAL METHODOLOGY  because increasing the number of hidden units increases the capacity of the model.
For example, the smallest allowable weight decay coefficient of zero corresponds to the greatest effective capacity of the learning algorithm.
Many hyperparameters are discrete, such as the number of units in a layer or the number of linear pieces in a maxout unit, so it is only possible to visit a few points along the curve.
Usually these hyperparameters  are switches that specify whether or not to use some optional component of the learning algorithm, such as a preprocessing step that normalizes the input features by subtracting their mean and dividing by their standard deviation.
Other hyperparameters have some minimum or maximum value that prevents them from exploring some part of the curve.
This means that if the model is underfitting when weight decay is zero, we can not enter the overfitting region by modifying the weight decay coefficient.
It con-  trols the effective capacity of the model in a more complicated way than other hyperparameters—the effective capacity of the model is highest when the learning rate is correct for the optimization problem, not when the learning rate is especially large or especially small.
When the learning rate is too large, gradient descent11.1 can inadvertently increase rather than decrease the training error.
In the idealized quadratic case, this occurs if the learning rate is at least twice as large as its optimal value ( , ).
Tuning the parameters other than the learning rate requires monitoring both  training and test error to diagnose whether your model is overfitting or underfitting, then adjusting its capacity appropriately.
If your error on the training set is higher than your target error rate, you have no choice but to increase capacity.
If you are not using regularization and you are confident that your optimization algorithm is performing correctly, then you must add more layers to your network or add more hidden units.
If your error on the test set is higher than than your target error rate, you can  429    CHAPTER 11.
PRACTICAL METHODOLOGY  10−2 10−1 100  Learning rate (logarithmic scale)  0  1  2  3  4  5  6  7  8  T ra in in g er ro r  Figure 11.1: Typical relationship between the learning rate and the training error.
This is for a fixed training time, as a smaller learning rate may sometimes only slow down training by a factor proportional to the learning rate reduction.
Generalization error can follow this curve or be complicated by regularization effects arising out of having a too large or too small learning rates, since poor optimization can, to some degree, reduce or prevent overfitting, and even points with equivalent training error can have different generalization error.
Neural networks typically perform best when the training  error is very low (and thus, when capacity is high) and the test error is primarily driven by the gap between train and test error.
To reduce the gap, change regularization hyperparameters to reduce effective model capacity, such as by adding dropout or weight decay.
Usually the best performance comes from a large model that is regularized well, for example by using dropout.
Some examples are included in Table .11.1  While manually tuning hyperparameters, do not lose sight of your end goal: good performance on the test set.
As long as you have low training error, you can always reduce general- ization error by collecting more training data.
The brute force way to practically guarantee success is to continually increase model capacity and training set size until the task is solved.
This approach does of course increase the computational cost of training and inference, so it is only feasible given appropriate resources.
Reason Caveats  Number of hid- den units  increased Increasing the number of hidden units increases the representational capacity of the model.
Increasing the number of hidden units increases both the time and memory cost of essentially every op- eration on the model.
Learning rate tuned op- timally  An improper learning rate, whether too high or too low, results in a model with low effective capacity due to optimization failure  Convolution ker- nel width  increased Increasing the kernel width increases the number of pa- rameters in the model  A wider kernel results in a narrower output dimen- sion, reducing model ca- pacity unless you use im- plicit zero padding to re- duce this effect.
Wider kernels require more mem- ory for parameter storage and increase runtime, but a narrower output reduces memory cost.
Implicit zero padding  increased Adding implicit zeros be- fore convolution keeps the representation size large  Increased time and mem- ory cost of most opera- tions.
Weight decay co- efficient  decreased Decreasing the weight de- cay coefficient frees the model parameters to be- come larger  Dropout rate decreased Dropping units less often gives the units more oppor- tunities to “conspire” with each other to fit the train- ing set  Table 11.1: The effect of various hyperparameters on model capacity.
PRACTICAL METHODOLOGY  principle, this approach could fail due to optimization difficulties, but for many problems optimization does not seem to be a significant barrier, provided that the model is chosen appropriately.
11.4.2 Automatic Hyperparameter Optimization Algorithms  The ideal learning algorithm just takes a dataset and outputs a function, without requiring hand-tuning of hyperparameters.
The popularity of several learning algorithms such as logistic regression and SVMs stems in part from their ability to perform well with only one or two tuned hyperparameters.
Neural networks can sometimes perform well with only a small number of tuned hyperparameters, but often benefit significantly from tuning of forty or more hyperparameters.
Manual hyperparameter tuning can work very well when the user has a good starting point, such as one determined by others having worked on the same type of application and architecture, or when the user has months or years of experience in exploring hyperparameter values for neural networks applied to similar tasks.
If we think about the way in which the user of a learning algorithm searches for good values of the hyperparameters, we realize that an optimization is taking place: we are trying to find a value of the hyperparameters that optimizes an objective function, such as validation error, sometimes under constraints (such as a budget for training time, memory or recognition time).
It is therefore possible, in principle, to develop hyperparameter optimization algorithms that wrap a learning algorithm and choose its hyperparameters, thus hiding the hyperparameters of the learning algorithm from the user.
Unfortunately, hyperparameter optimization algorithms often have their own hyperparameters, such as the range of values that should be explored for each of the learning algorithm’s hyperparameters.
However,  these secondary hyperparameters are usually easier to choose, in the sense that acceptable performance may be achieved on a wide range of tasks using the same secondary hyperparameters for all tasks.
11.4.3 Grid Search  When there are three or fewer hyperparameters, the common practice is to perform grid search.
The grid search algorithm then trains a model for every joint  specification of hyperparameter values in the Cartesian product of the set of values for each individual hyperparameter.
For illustration purposes we display two hyperparameters but we are typically interested in having many more.
The search algorithm runs training for every joint hyperparameter setting in the cross product of these sets.
To perform random search, we provide a probability distribution over joint(Right) hyperparameter configurations.
Common choices for the distribution over a single hyperparameter include uniform and log-uniform (to sample from a log-uniform distribution, take the exp of a sample from a uniform distribution).
The search algorithm then randomly samples joint hyperparameter configurations and runs training with each of them.
Both grid search and random search evaluate the validation set error and return the best configuration.
The figure illustrates the typical case where only some hyperparameters have a significant influence on the result.
Grid search wastes an amount of computation that is exponential in the number of non-influential hyperparameters, while random search tests a unique value of every influential hyperparameter on nearly every trial.
See the left of figure for an illustration of a grid of hyperparameter values.11.2  How should the lists of values to search over be chosen?
In the case of numerical (ordered) hyperparameters, the smallest and largest element of each list is chosen conservatively, based on prior experience with similar experiments, to make sure that the optimal value is very likely to be in the selected range.
Typically, a grid search involves picking values approximately on a logarithmic scale, e.g., a learning rate taken within the set {.1, .01, 10−3, 10−4 ,10−5}, or a number of hidden units taken with the set .
{ }50 100 200 500 1000 2000, , , , ,  Grid search usually performs best when it is performed repeatedly.
If the best value found is , then we underestimated the range in which the best1 α lies and we should shift the grid and run another search with α in, for example, {1,2, 3}.
If we find that the best value of α is , then we may wish to refine our0 estimate by zooming in and running a grid search over .
, , .1 0 1  The obvious problem with grid search is that its computational cost grows exponentially with the number of hyperparameters.
If there are m hyperparameters, each taking at most n values, then the number of training and evaluation trials required grows as O(nm).
The trials may be run in parallel and exploit loose  parallelism (with almost no need for communication between different machines carrying out the search) Unfortunately, due to the exponential cost of grid search, even parallelization may not provide a satisfactory size of search.
11.4.4 Random Search  Fortunately, there is an alternative to grid search that is as simple to program, more  convenient to use, and converges much faster to good values of the hyperparameters: random search ( , ).Bergstra and Bengio 2012  A random search proceeds as follows.
First we define a marginal distribution for each hyperparameter, e.g., a Bernoulli or multinoulli for binary or discrete hyperparameters, or a uniform distribution on a log-scale for positive real-valued hyperparameters.
PRACTICAL METHODOLOGY  Unlike in the case of a grid search, one should not discretize or bin the values of the hyperparameters.
In fact, as illustrated in figure , a11.2 random search can be exponentially more efficient than a grid search, when there are several hyperparameters that do not strongly affect the performance measure.
This is studied at length in ( ), who found that randomBergstra and Bengio 2012 search reduces the validation set error much faster than grid search, in terms of the number of trials run by each method.
As with grid search, one may often want to run repeated versions of random search, to refine the search based on the results of the first run.
The main reason why random search finds good solutions faster than grid search is that there are no wasted experimental runs, unlike in the case of grid search, when two values of a hyperparameter (given values of the other hyperparameters) would give the same result.
In the case of grid search, the other hyperparameters would have the same values for these two runs, whereas with random search, they would usually have different values.
Hence if the change between these two values does not marginally make much difference in terms of validation set error, grid search will unnecessarily repeat two equivalent experiments while random search will still give two independent explorations of the other hyperparameters.
11.4.5 Model-Based Hyperparameter Optimization  The search for good hyperparameters can be cast as an optimization problem.
The cost to be optimized is the validation set error that results from training using these hyperparameters.
In simplified settings where it is feasible to compute the gradient of some differentiable error measure on the validation set with respect to the hyperparameters, we can simply follow this gradient ( , ; , ; ,Bengio et al.
Unfortunately, in most practical settings, this gradient is unavailable, either due to its high computation and memory cost, or due to hyperparameters having intrinsically non-differentiable interactions with the validation set error, as in the case of discrete-valued hyperparameters.
To compensate for this lack of a gradient, we can build a model of the validation set error, then propose new hyperparameter guesses by performing optimization within this model.
Most model-based algorithms for hyperparameter search use a Bayesian regression model to estimate both the expected value of the validation set error for each hyperparameter and the uncertainty around this expectation.
Opti- mization thus involves a tradeoff between exploration (proposing hyperparameters  435    CHAPTER 11.
PRACTICAL METHODOLOGY  for which there is high uncertainty, which may lead to a large improvement but may also perform poorly) and exploitation (proposing hyperparameters which the model is confident will perform as well as any hyperparameters it has seen so far—usually hyperparameters that are very similar to ones it has seen before).
2011  Currently, we cannot unambiguously recommend Bayesian hyperparameter optimization as an established tool for achieving better deep learning results or  for obtaining those results with less effort.
Bayesian hyperparameter optimization sometimes performs comparably to human experts, sometimes better, but fails catastrophically on other problems.
It may be worth trying to see if it works on a particular problem but is not yet sufficiently mature or reliable.
That being said, hyperparameter optimization is an important field of research that, while often driven primarily by the needs of deep learning, holds the potential to benefit not only the entire field of machine learning but the discipline of engineering in general.
One drawback common to most hyperparameter optimization algorithms with more sophistication than random search is that they require for a training ex- periment to run to completion before they are able to extract any information  from the experiment.
This is much less efficient, in the sense of how much infor- mation can be gleaned early in an experiment, than manual search by a human practitioner, since one can usually tell early on if some set of hyperparameters is completely pathological.
At various time points, the hyperparameter optimization algorithm can choose to begin a new experiment, to “freeze” a running experiment that is not promising, or to “thaw” and resume an experiment that was earlier frozen but now appears promising given more information.
11.5 Debugging Strategies  When a machine learning system performs poorly, it is usually difficult to tell whether the poor performance is intrinsic to the algorithm itself or whether there is a bug in the implementation of the algorithm.
In fact, the entire point of using machine learning is that it will discover useful behavior that we were not able to specify ourselves.
PRACTICAL METHODOLOGY  neural network on a classification task and it achieves 5% test error, we havenew no straightforward way of knowing if this is the expected behavior or sub-optimal behavior.
A further difficulty is that most machine learning models have multiple parts that are each adaptive.
For example, suppose that we are training a neural net with several layers parametrized by weightsW and biases b.
Suppose further that we have manually implemented the gradient descent rule for each  parameter separately, and we made an error in the update for the biases:  b b← − α (11.4)  where α is the learning rate.
It causes the biases to constantly become negative throughout learning, which is clearly not a correct implementation of any reasonable learning algorithm.
Depending on the distribution of the input, the weights may be able to adapt to  compensate for the negative biases.
Most debugging strategies for neural nets are designed to get around one or both of these two difficulties.
Either we design a case that is so simple that the correct behavior actually can be predicted, or we design a test that exercises one part of the neural net implementation in isolation.
Some important debugging tests include:  Visualize the model in action : When training a model to detect objects in images, view some images with the detections proposed by the model displayed superimposed on the image.
This may seem obvious, but it is easy to fall into the practice of only looking at quantitative performance measurements  like accuracy or log-likelihood.
Directly observing the machine learning model performing its task will help to determine whether the quantitative performance numbers it achieves seem reasonable.
Evaluation bugs can be some of the most devastating bugs because they can mislead you into believing your system is performing well when it is not.
Visualize the worst mistakes : Most models are able to output some sort of confidence measure for the task they perform.
The probability assigned to the most likely class thus gives an estimate of the confidence the model has in its classification decision.
Typically, maximum likelihood training results in these values being overestimates rather than accurate probabilities of correct prediction,  437    CHAPTER 11.
PRACTICAL METHODOLOGY  but they are somewhat useful in the sense that examples that are actually less likely to be correctly labeled receive smaller probabilities under the model.
By viewing the training set examples that are the hardest to model correctly, one can often discover problems with the way the data has been preprocessed or labeled.
For example, the Street View transcription system originally had a problem where the address number detection system would crop the image too tightly and omit some of the digits.
Sorting the images to identify the most  confident mistakes showed that there was a systematic problem with the cropping.
Modifying the detection system to crop much wider images resulted in much better performance of the overall system, even though the transcription network needed to be able to process greater variation in the position and scale of the address numbers.
Reasoning about software using train and test error: It is often difficult to determine whether the underlying software is correctly implemented.
If training error is low but test error is high, then it is likely that that the training procedure works correctly, and the model is overfitting for fundamental algorithmic reasons.
An alternative possibility is that the test error is measured incorrectly due to a problem with saving the  model after training then reloading it for test set evaluation, or if the test data was prepared differently from the training data.
If both train and test error are high, then it is difficult to determine whether there is a software defect or whether the model is underfitting due to fundamental algorithmic reasons.
Fit a tiny dataset: If you have high error on the training set, determine whether it is due to genuine underfitting or due to a software defect.
For example, a classification dataset with only one example can be fit just by setting the biases of the output layer correctly.
Usually if you cannot train a classifier to correctly label a single example, an autoencoder to successfully reproduce a single example with high fidelity, or a generative model to consistently emit samples resembling a  single example, there is a software defect preventing successful optimization on the training set.
Compare back-propagated derivatives to numerical derivatives: If you are using a software framework that requires you to implement your own gradient com- putations, or if you are adding a new operation to a differentiation library and must define its bprop method, then a common source of error is implementing this gradient expression incorrectly.
PRACTICAL METHODOLOGY  is to compare the derivatives computed by your implementation of automatic differentiation to the derivatives computed by a .
Becausefinite differences  f ( ) = limx →0  f x  f x( + ) − ( )   , (11.5)  we can approximate the derivative by using a small, finite :  f ( ) x ≈ f x  f x( + ) − ( )   .
(11.6)  We can improve the accuracy of the approximation by using the centered differ- ence:  f ( ) x ≈ f x( + 1 2 f x) − ( − 12 )   .
(11.7)  The perturbation size  must chosen to be large enough to ensure that the pertur- bation is not rounded down too much by finite-precision numerical computations.
We can either run finite differencing mn times to evaluate all of the partial derivatives of g, or we can apply the test to a new function that uses random projections at both the input and output of g. For example, we can apply  our test of the implementation of the derivatives to f(x) where f (x) = uT g(vx), where u and v are randomly chosen vectors.
Computing f (x) correctly requires being able to back-propagate through g correctly, yet is efficient to do with finite differences because f has only a single input and a single output.
It is usually a good idea to repeat this test for more than one value of u and v to reduce the chance that the test overlooks mistakes that are orthogonal to the random projection.
If one has access to numerical computation on complex numbers, then there is a very efficient way to numerically estimate the gradient by using complex numbers as input to the function (Squire and Trapp 1998, ).
The method is based on the observation that  f x i f x if( + ) = ( ) + ( ) + (x O 2) (11.8)  real( ( + )) = ( ) + (f x i f x O 2) imag(, f x i( + )   ) = f ( ) + (x O 2), (11.9)  where i= √  −1.
Unlike in the real-valued case above, there is no cancellation effect due to taking the difference between the value of f at different points.
This allows the use of tiny values of  like  = 10−150, which make the O(2) error insignificant for all practical purposes.
PRACTICAL METHODOLOGY  Monitor histograms of activations and gradient: It is often useful to visualize statistics of neural network activations and gradients, collected over a large amount of training iterations (maybe one epoch).
For tanh units, the average of the absolute value of the pre-activations tells us how saturated the unit is.
In a deep network where the propagated gradients quickly grow or quickly vanish, optimization may be hampered.
Finally, it is useful to compare the  magnitude of parameter gradients to the magnitude of the parameters themselves.
As suggested by ( ), we would like the magnitude of parameter updatesBottou 2015 over a minibatch to represent something like 1% of the magnitude of the parameter, not 50% or 0.001% (which would make the parameters move too slowly).
When the data is sparse (like in natural language), some parameters may be very rarely updated, and this should be kept in mind when monitoring their evolution.
Finally, many deep learning algorithms provide some sort of guarantee about the results produced at each step.
For example, in part , we will see some approx-III imate inference algorithms that work by using algebraic solutions to optimization  problems.
Some guarantees that some optimization algorithms offer include that the objective function will never increase after one step of the algorithm, that the gradient with respect to some subset of variables will be zero after each step of the algorithm, and that the gradient with respect to all variables will be zero at convergence.
Usually due to rounding error, these conditions will not hold exactly in a digital computer, so the debugging test should include some tolerance parameter.
11.6 Example: Multi-Digit Number Recognition  To provide an end-to-end description of how to apply our design methodology  in practice, we present a brief account of the Street View transcription system, from the point of view of designing the deep learning components.
Obviously, many other components of the complete system, such as the Street View cars, the database infrastructure, and so on, were of paramount importance.
The transcription task was preceded by a significant amount of dataset curation, including using other machine learning techniques to detect the house  440    CHAPTER 11.
The transcription project began with a choice of performance metrics and desired values for these metrics.
An important general principle is to tailor the choice of metric to the business goals for the project.
Because maps are only useful if they have high accuracy, it was important to set a high accuracy requirement for this project.
Coverage thus became the main performance metric optimized during the project, with accuracy held at 98%.
As the convolutional network improved, it became possible to reduce the confidence threshold below which the network refuses to transcribe the input, eventually exceeding the goal of 95% coverage.
After choosing quantitative goals, the next step in our recommended methodol- ogy is to rapidly establish a sensible baseline system.
In order to begin with the simplest possible baseline, the first implementation of the output layer of the model consisted of n different softmax units to predict a sequence of n characters.
These softmax units  were trained exactly the same as if the task were classification, with each softmax unit trained independently.
Our recommended methodology is to iteratively refine the baseline and test whether each change makes an improvement.
The first change to the Street View transcription system was motivated by a theoretical understanding of the coverage metric and the structure of the data.
Specifically, the network refuses to classify an input x whenever the probability of the output sequence p(y x| ) < t for some threshold t. Initially, the definition of p(y x| ) was ad-hoc, based on simply multiplying all of the softmax outputs together.
This motivated the development of a specialized output layer and cost function that actually computed a principled log-likelihood.
At this point, coverage was still below 90%, yet there were no obvious theoretical problems with the approach.
Our methodology therefore suggests to instrument the train and test set performance in order to determine whether the problem is underfitting or overfitting.
Indeed, the main reason this project proceeded so smoothly was the availability of a dataset with tens of millions of labeled examples.
Because train and test set error were so similar, this suggested that the problem was either due  441    CHAPTER 11.
In this case, that meant visualizing the incorrect training set transcriptions that the model gave the highest confidence.
These proved to mostly consist of examples where the input image had been cropped too tightly, with some of the digits of the address being removed by the cropping operation.
For example, a photo of an address “1849” might be cropped too tightly, with only the “849” remaining visible.
This problem could have been resolved by spending weeks improving the accuracy of the address  number detection system responsible for determining the cropping regions.
Instead, the team took a much more practical decision, to simply expand the width of the crop region to be systematically wider than the address number detection system predicted.
This mostly consisted of making the model larger while main- taining some restrictions on its computational cost.
Because train and test error remained roughly equal, it was always clear that any performance deficits were due to underfitting, as well as due to a few remaining problems with the dataset itself.
Overall, the transcription project was a great success, and allowed hundreds of  millions of addresses to be transcribed both faster and at lower cost than would have been possible via human effort.
We hope that the design principles described in this chapter will lead to many other similar successes.
                                     Chapter 12  Applications  In this chapter, we describe how to use deep learning to solve applications in com- puter vision, speech recognition, natural language processing, and other application areas of commercial interest.
We begin by discussing the large scale neural network implementations required for most serious AI applications.
While one goal of deep learning is to design algorithms that are capable of solving a broad variety of tasks, so far some degree of specialization is needed.
Language tasks require modeling a large number of possible values (words in the vocabulary) per input feature.
12.1 Large-Scale Deep Learning  Deep learning is based on the philosophy of connectionism: while an individual  biological neuron or an individual feature in a machine learning model is not intelligent, a large population of these neurons or features acting together can exhibit intelligent behavior.
One of the key factors responsible for the improvement in neural network’s accuracy and the improvement of the complexity of tasks they can solve between the 1980s and today is the dramatic increase in the size of the networks we use.
As we saw in section , network sizes have1.2.3 grown exponentially for the past three decades, yet artificial neural networks are only as large as the nervous systems of insects.
12.1.1 Fast CPU Implementations  Traditionally, neural networks were trained using the CPU of a single machine.
Before moving to these expensive setups, researchers worked hard to demonstrate that CPUs could not manage the high computational workload required by neural networks.
A description of how to implement efficient numerical CPU code is beyond the scope of this book, but we emphasize here that careful implementation for specific CPU families can yield large improvements.
For example, in 2011, the best CPUs available could run neural network workloads faster when using fixed-point arithmetic rather than floating-point arithmetic.
Each new model of CPU has different performance characteristics, so sometimes floating-point implementations can be faster too.
The important principle is that careful specialization of numerical computation routines can yield a large payoff.
Other strategies, besides choosing whether to use fixed or floating point, include optimizing data structures to avoid cache misses and using vector instructions.
Many machine learning researchers neglect these implementation details, but when the performance of an implementation restricts the size of the model, the accuracy of the model suffers.
12.1.2 GPU Implementations  Most modern neural network implementations are based on graphics processing units.
Graphics processing units (GPUs) are specialized hardware components that were originally developed for graphics applications.
The performance characteristics needed for good video gaming systems turn out to be beneficial for neural networks as well.
Models of characters and environments are specified in terms of lists of 3-D coordinates of vertices.
Graphics cards must perform matrix multiplication and division on many vertices in parallel to convert these 3-D coordinates into 2-D on-screen coordinates.
The graphics card must then perform many computations  at each pixel in parallel to determine the color of each pixel.
APPLICATIONS  computations are fairly simple and do not involve much branching compared to the computational workload that a CPU usually encounters.
For example, each vertex in the same rigid object will be multiplied by the same matrix; there is no need to evaluate an if statement per-vertex to determine which matrix to multiply by.
The computations also involve processing massive buffers of memory, containing bitmaps describing the texture (color pattern) of each object to be rendered.
Together, this results in graphics cards having been designed to  have a high degree of parallelism and high memory bandwidth, at the cost of having a lower clock speed and less branching capability relative to traditional CPUs.
Neural network algorithms require the same performance characteristics as the real-time graphics algorithms described above.
Neural networks usually involve large and numerous buffers of parameters, activation values, and gradient values, each of which must be completely updated during every step of training.
These buffers are large enough to fall outside the cache of a traditional desktop computer so the memory bandwidth of the system often becomes the rate limiting factor.
Neural network training algorithms typically do not involve much branching or  sophisticated control, so they are appropriate for GPU hardware.
Since neural networks can be divided into multiple individual “neurons” that can be processed independently from the other neurons in the same layer, neural networks easily benefit from the parallelism of GPU computing.
Over time, GPU hardware became more flexible, allowing custom subroutines to be used to transform the coordinates of vertices or assign colors to pixels.
In principle, there was no requirement that these pixel values actually be based on a rendering task.
These GPUs could be used for scientific computing by writing the output of a computation to a buffer of pixel values.
( ) implemented a two-layer fully connected neural network on a GPU and2005 reported a threefold speedup over their CPU-based baseline.
( ) demonstrated that the same technique could be used to accelerate supervised convolutional networks.
The popularity of graphics cards for neural network training exploded after the advent of general purpose GPUs.
With their relatively convenient programming model, massive parallelism, and high memory  445    CHAPTER 12.
This platform was rapidly adopted by deep learning researchers soon after it became available ( , ; , ).Raina et al.
For example, good CPU-based code is usually designed to read information from the cache as much as possible.
On GPU, most writable memory locations are not cached, so it can actually be faster to compute  the same value twice, rather than compute it once and read it back from memory.
GPU code is also inherently multi-threaded and the different threads must be coordinated with each other carefully.
Coalesced reads or writes occur when several threads can each read or write a value that they need simultaneously, as part of a single memory transaction.
Typically, memory operations are easier to coalesce if among n threads, thread i accesses byte i+ j of memory, and j is a multiple of some power of 2.
Another common consideration for GPUs is making sure that each thread in a group executes the same instruction simultaneously.
Each thread in a warp executes the same instruction during each cycle, so if different threads within the same warp need to execute different code paths, these different code paths must be traversed sequentially rather than in parallel.
Due to the difficulty of writing high performance GPU code, researchers should structure their workflow to avoid needing to write new GPU code in order to test new models or algorithms.
Typically, one can do this by building a software library of high performance operations like convolution and matrix multiplication, then specifying models in terms of calls to this library of operations.
For example, the machine learning library Pylearn2 (Goodfellow 2013cet al., ) specifies all of its machine learning algorithms in terms of calls to Theano ( , ;Bergstra et al.
2010 Bastien 2012et al., ) and cuda-convnet ( , ), which provide theseKrizhevsky 2010  high-performance operations.
For example, the same Theano program can run on either CPU or GPU, without needing to change any of the calls to Theano itself.
APPLICATIONS  12.1.3 Large-Scale Distributed Implementations  In many cases, the computational resources available on a single machine are  insufficient.
Distributing inference is simple, because each input example we want to process can be run by a separate machine.
This is known as .data parallelism  It is also possible to get model parallelism, where multiple machines work together on a single datapoint, with each machine running a different part of the model.
We can increase the size of the minibatch used for a single SGD step, but usually we get less than linear returns in terms of optimization performance.
It would be better to allow multiple machines to compute multiple gradient descent steps in parallel.
Unfortunately,  the standard definition of gradient descent is as a completely sequential algorithm: the gradient at step is a function of the parameters produced by step .t t − 1  This can be solved using asynchronous stochastic gradient descent (Ben- gio 2001 Recht 2011et al., ; et al., ).
Each core reads parameters without a lock, then computes a gradient, then increments the parameters without a lock.
This reduces the average amount of improvement that each gradient descent step yields, because some of the cores overwrite each other’s progress, but the increased rate of production of steps causes the learning process to be faster overall.
( ) pioneered the multi-machine implementation of this lock-free approach2012 to gradient descent, where the parameters are managed by a parameter server  rather than stored in shared memory.
Distributed asynchronous gradient descent remains the primary strategy for training large deep networks and is used by most major deep learning groups in industry ( , ;Chilimbi et al.
Academic deep learning researchers typically cannot afford the same scale of distributed learning systems but some research has focused on how to build distributed networks with relatively low-cost hardware available in the university setting ( , ).Coates et al.
2013  12.1.4 Model Compression  In many commercial applications, it is much more important that the time and memory cost of running inference in a machine learning model be low than that the time and memory cost of training be low.
APPLICATIONS  personalization, it is possible to train a model once, then deploy it to be used by billions of users.
For example, one might train a speech recognition network with a powerful computer cluster, then deploy it on mobile phones.
The basic idea of model compression is to replace the original, expensive model with a smaller model that requires less memory and runtime to store and evaluate.
Model compression is applicable when the size of the original model is driven primarily by a need to prevent overfitting.
In most cases, the model with the lowest generalization error is an ensemble of several independently trained models.
Sometimes, even a single model generalizes better if it is large (for example, if it is regularized with dropout).
These large models learn some function f(x), but do so using many more parameters than are necessary for the task.
As soon as we have fit this function f (x), we can generate a training set containing infinitely many examples, simply by applying f to randomly sampled points x.
In order to most efficiently use the capacity  of the new, small model, it is best to sample the new x points from a distribution resembling the actual test inputs that will be supplied to the model later.
This can be done by corrupting training examples or by drawing points from a generative model trained on the original training set.
Alternatively, one can train the smaller model only on the original training points, but train it to copy other features of the model, such as its posterior distribution over the incorrect classes (Hinton 2014 2015et al., , ).
12.1.5 Dynamic Structure  One strategy for accelerating data processing systems in general is to build systems that have dynamic structure in the graph describing the computation needed to process an input.
Data processing systems can dynamically determine which subset of many neural networks should be run on a given input.
Individual neural networks can also exhibit dynamic structure internally by determining which subset of features (hidden units) to compute given information from the input.
This form of dynamic structure inside neural networks is sometimes called conditional computation ( , ; , ).
2013b the architecture may be relevant only for a small amount of possible inputs, the  448    CHAPTER 12.
Dynamic structure of computations is a basic computer science principle applied generally throughout the software engineering discipline.
The simplest versions of dynamic structure applied to neural networks are based on determining which subset of some group of neural networks (or other machine learning models) should be applied to a particular input.
The cascade strategy may be applied when the goal is to detect the  presence of a rare object (or event).
To know for sure that the object is present, we must use a sophisticated classifier with high capacity, that is expensive to run.
However, because the object is rare, we can usually use much less computation to reject inputs as not containing the object.
In other words, they are trained to make sure we do not wrongly reject an input when the object is present.
At test time, we run inference by running the classifiers in a sequence, abandoning any example as soon as any one element in the cascade rejects it.
Overall, this allows us to verify the presence of objects with high confidence, using a high capacity model, but does not force us to pay the cost  of full inference for every example.
In this case, the system as a whole obviously has high capacity, because some of its individual members do.
It is also possible to make a cascade in which every individual model has low capacity but the system as a whole has high capacity due to the combination of many small models.
Viola and Jones 2001( ) used a cascade of boosted decision trees to implement a fast and robust face detector suitable for use in handheld digital cameras.
Their classifier localizes a face using essentially a sliding window approach in which many windows are examined and rejected if they do not contain faces.
Another version of cascades uses the earlier models to implement a sort of hard attention mechanism: the early members of the cascade localize an object and later members of the cascade  perform further processing given the location of the object.
For example, Google transcribes address numbers from Street View imagery using a two-step cascade that first locates the address number with one machine learning model and then transcribes it with another (Goodfellow 2014det al., ).
Decision trees themselves are an example of dynamic structure, because each node in the tree determines which of its subtrees should be evaluated for each input.
APPLICATIONS  is to train a decision tree in which each node uses a neural network to make the splitting decision ( , ), though this has typically not beenGuo and Gelfand 1992 done with the primary goal of accelerating inference computations.
In the same spirit, one can use a neural network, called the gater to select which one out of several expert networks will be used to compute the output, given the current input.
The first version of this idea is called the mixture of experts (Nowlan 1990 Jacobs 1991, ; et al., ), in which the gater outputs a set of probabilities or weights (obtained via a softmax nonlinearity), one per expert,  and the final output is obtained by the weighted combination of the output of the experts.
In that case, the use of the gater does not offer a reduction in computational cost, but if a single expert is chosen by the gater for each example, we obtain the hard mixture of experts ( , , ), whichCollobert et al.
This strategy works well when the number of gating decisions is small because it is not combinatorial.
But when we want to select different subsets of units or parameters, it is not possible to use a “soft switch” because it requires enumerating (and computing outputs for) all the gater configurations.
2015a gradient) to learn a form of conditional dropout on blocks of hidden units and get an actual reduction in computational cost without impacting negatively on the quality of the approximation.
Another kind of dynamic structure is a switch, where a hidden unit can receive input from different units depending on the context.
Contemporary approaches instead use a weighted average over many possible inputs, and thus do not achieve all of the possible computational benefits of dynamic structure.
Contemporary attention mechanisms are described in section .12.4.5.1  One major obstacle to using dynamically structured systems is the decreased degree of parallelism that results from the system following different code branches for different inputs.
This means that few operations in the network can be described as matrix multiplication or batch convolution on a minibatch of examples.
We can write more specialized sub-routines that convolve each example with different kernels or multiply each row of a design matrix by a different set of columns of weights.
APPLICATIONS  coherence and GPU implementations will be slow due to the lack of coalesced memory transactions and the need to serialize warps when members of a warp take different branches.
In some cases, these issues can be mitigated by partitioning the examples into groups that all take the same branch, and processing these groups of examples simultaneously.
This can be an acceptable strategy for minimizing the time required to process a fixed amount of examples in an offline setting.
In a real-time setting where examples must be processed continuously, partitioning the workload can result in load-balancing issues.
For example, if we assign one  machine to process the first step in a cascade and another machine to process the last step in a cascade, then the first will tend to be overloaded and the last will tend to be underloaded.
Similar issues arise if each machine is assigned to implement different nodes of a neural decision tree.
12.1.6 Specialized Hardware Implementations of Deep Networks  Since the early days of neural networks research, hardware designers have worked on specialized hardware implementations that could speed up training and/or  inference of neural network algorithms.
See early and more recent reviews of specialized hardware for deep networks ( , ; ,Lindsey and Lindblad 1994 Beiu et al.
Different forms of specialized hardware (Graf and Jackel 1989 Mead and, ; Ismail 2012 Kim 2009 Pham 2012 Chen 2014a b, ; et al., ; et al., ; et al., , ) have been developed over the last decades, either with ASICs (application-specific inte- grated circuit), either with digital (based on binary representations of numbers), analog (Graf and Jackel 1989 Mead and Ismail 2012, ; , ) (based on physical imple- mentations of continuous values as voltages or currents) or hybrid implementations (combining digital and analog components).
In recent years more flexible FPGA (field programmable gated array) implementations (where the particulars of the  circuit can be written on the chip after it has been built) have been developed.
Though software implementations on general-purpose processing units (CPUs and GPUs) typically use 32 or 64 bits of precision to represent floating point numbers, it has long been known that it was possible to use less precision, at least at inference time (Holt and Baker 1991 Holi and Hwang 1993 Presley, ; , ; and Haggard 1994 Simard and Graf 1994 Wawrzynek 1996 Savich, ; , ; et al., ; et al., 2007).
This has become a more pressing issue in recent years as deep learning has gained in popularity in industrial products, and as the great impact of faster hardware was demonstrated with GPUs.
Another factor that motivates current research on specialized hardware for deep networks is that the rate of progress of a single CPU or GPU core has slowed down, and most recent improvements in  451    CHAPTER 12.
This is very different from the situation of the 1990s (the previous neural network era) where the hardware implementations of neural networks (which might take two years from inception to availability of a chip) could not keep up with the rapid progress and low prices of general-purpose CPUs.
Building specialized hardware is thus a way to push the envelope further, at a time when new hardware designs are being developed for low-power devices such as phones, aiming for general-public applications of deep learning (e.g., with speech, computer vision or  natural language).
Recent work on low-precision implementations of backprop-based neural nets (Vanhoucke 2011 Courbariaux 2015 Gupta 2015et al., ; et al., ; et al., ) suggests that between 8 and 16 bits of precision can suffice for using or training deep neural networks with back-propagation.
What is clear is that more precision is required during training than at inference time, and that some forms of dynamic fixed point representation of numbers can be used to reduce how many bits are required per number.
Traditional fixed point numbers are restricted to a fixed range (which corresponds to a given exponent in a floating point representation).
Dynamic fixed point representations share that range among a set of numbers (such as all the weights in one layer).
Using fixed point rather than floating point  representations and using less bits per number reduces the hardware surface area, power requirements and computing time needed for performing multiplications, and multiplications are the most demanding of the operations needed to use or train a modern deep network with backprop.
12.2 Computer Vision  Computer vision has traditionally been one of the most active research areas for deep learning applications, because vision is a task that is effortless for humans and many animals but challenging for computers ( , ).
1983 the most popular standard benchmark tasks for deep learning algorithms are forms  of object recognition or optical character recognition.
Computer vision is a very broad field encompassing a wide variety of ways of processing images, and an amazing diversity of applications.
Applications of computer vision range from reproducing human visual abilities, such as recognizing faces, to creating entirely new categories of visual abilities.
As an example of the latter category, one recent computer vision application is to recognize sound waves from the vibrations they induce in objects visible in a video ( ,Davis et al.
APPLICATIONS  exotic applications that expand the realm of what is possible with imagery but rather a small core of AI goals aimed at replicating human abilities.
Most deep learning for computer vision is used for object recognition or detection of some form, whether this means reporting which object is present in an image, annotating an image with bounding boxes around each object, transcribing a sequence of symbols from an image, or labeling each pixel in an image with the identity of the object it belongs to.
Because generative modeling has been a guiding principle of deep learning research, there is also a large body of work on image synthesis  using deep models.
While image synthesis is usually not considered aex nihilo computer vision endeavor, models capable of image synthesis are usually useful for image restoration, a computer vision task involving repairing defects in images or removing objects from images.
12.2.1 Preprocessing  Many application areas require sophisticated preprocessing because the original input comes in a form that is difficult for many deep learning architectures to  represent.
The images should be standardized so that their pixels all lie in the same, reasonable range, like [0,1] or [-1, 1].
Formatting images to have the same scale is the only kind of preprocessing that is strictly necessary.
Many computer vision architectures require images of a standard size, so images must be cropped or scaled to fit that size.
Some convolutional models accept variably-sized inputs and dynamically adjust the size of their pooling regions to keep the output size constant (Waibel et al., 1989).
Other convolutional models have variable-sized output that automatically scales in size with the input, such as models that denoise or label each pixel in an  image ( , ).Hadsell et al.
Dataset augmentation is an excellent way to reduce the generalization error of most computer vision models.
A related idea applicable at test time is to show the model many different versions of the same input (for example, the same image cropped at slightly different locations) and have the different instantiations of the model vote to determine the output.
This latter idea can be interpreted as an ensemble approach, and helps to reduce generalization error.
Other kinds of preprocessing are applied to both the train and the test set with the goal of putting each example into a more canonical form in order to reduce the amount of variation that the model needs to account for.
APPLICATIONS  variation in the data can both reduce generalization error and reduce the size of the model needed to fit the training set.
Simpler tasks may be solved by smaller models, and simpler solutions are more likely to generalize well.
Preprocessing of this kind is usually designed to remove some kind of variability in the input data that is easy for a human designer to describe and that the human designer is confident has no relevance to the task.
When training with large datasets and large models, this kind of preprocessing is often unnecessary, and it is best to just let the model learn which kinds of variability it should become invariant to.
For  example, the AlexNet system for classifying ImageNet only has one preprocessing step: subtracting the mean across training examples of each pixel (Krizhevsky et al., ).2012  12.2.1.1 Contrast Normalization  One of the most obvious sources of variation that can be safely removed for many tasks is the amount of contrast in the image.
Contrast simply refers to the magnitude of the difference between the bright and the dark pixels in an image.
In the context of  deep learning, contrast usually refers to the standard deviation of the pixels in an image or region of an image.
Suppose we have an image represented by a tensor X ∈ Rr c× ×3 , with Xi,j,1 being the red intensity at row i and column j , Xi,j,2 giving the green intensity and Xi,j,3 giving the blue intensity.
Then the contrast of the entire image is given by   1 3rc  r  i=1  c  j=1  3  k=1   Xi,j,k − X̄  2 (12.1)  where X̄ is the mean intensity of the entire image:  X̄ = 1  3rc  r  i=1  c  j=1  3  k=1  Xi,j,k.
(12.2)  Global contrast normalization (GCN) aims to prevent images from having varying amounts of contrast by subtracting the mean from each image, then rescaling it so that the standard deviation across its pixels is equal to some constant s. This approach is complicated by the fact that no scaling factor can change the contrast of a zero-contrast image (one whose pixels all have equal intensity).
This motivates introducing a small, positive regularization parameter λ to bias the estimate of the standard deviation.
Given an input image X, GCN produces an output image X, defined such that  X  i,j,k = s  Xi,j,k − X̄  max   ,  λ + 13rc  r i=1  c j=1  3 k=1   Xi,j,k − X̄  2  .
(12.3)  Datasets consisting of large images cropped to interesting objects are unlikely to contain any images with nearly constant intensity.
In these cases, it is safe to practically ignore the small denominator problem by setting λ = 0 and avoid division by 0 in extremely rare cases by setting  to an extremely low value like  10−8.
Small images cropped randomly are more likely to have nearly constant intensity, making aggressive regularization more useful.
2011 or chosen to make each individual pixel have standard deviation across examples close to 1, as done by ( ).Goodfellow et al.
2013a  The standard deviation in equation is just a rescaling of the12.3 L2 norm of the image (assuming the mean of the image has already been removed).
It is preferable to define GCN in terms of standard deviation rather than L2 norm because the standard deviation includes division by the number of pixels, so GCN based on standard deviation allows the same s to be used regardless of image  size.
However, the observation that the L2 norm is proportional to the standard deviation can help build a useful intuition.
This can be a12.1 useful property because neural networks are often better at responding to directions in space rather than exact locations.
Responding to multiple distances in the same direction requires hidden units with collinear weight vectors but different biases.
Additionally, many shallow graphical models have problems with representing multiple separated modes along the same line.
GCN avoids these problems by reducing each example to a direction rather than a direction and a distance.
Counterintuitively, there is a preprocessing operation known as sphering and  it is not the same operation as GCN.
Sphering does not refer to making the data lie on a spherical shell, but rather to rescaling the principal components to have  455    CHAPTER 12.
Because we use GCN based on normalizing the standard deviation rather than the L2 norm, the resulting sphere is not the unit sphere.
(Right)Regularized GCN, with λ > 0, draws examples toward the sphere but does not completely discard the variation in their norm.
We leave and the same as before.s   equal variance, so that the multivariate normal distribution used by PCA has spherical contours.
Sphering is more commonly known as .whitening  Global contrast normalization will often fail to highlight image features we would like to stand out, such as edges and corners.
If we have a scene with a large dark area and a large bright area (such as a city square with half the image in the shadow of a building) then global contrast normalization will ensure there is a large difference between the brightness of the dark area and the brightness of the light area.
Local contrast normalization ensures that the contrast is normalized across each small window, rather than over the image as a whole.
In all cases, one modifies each pixel by subtracting a mean of nearby pixels and dividing by a standard deviation of nearby pixels.
In some cases, this is literally the mean and standard deviation of all pixels in a rectangular window centered on the pixel to be modified ( , ).
APPLICATIONS  Input image GCN LCN  Figure 12.2: A comparison of global and local contrast normalization.
It places all images on roughly the same scale, which reduces the burden on the learning algorithm to handle multiple scales.
Local contrast normalization modifies the image much more, discarding all regions of constant intensity.
Regions of fine texture, such as the houses in the second row, may lose some detail due to the bandwidth of the normalization kernel being too high.
channels separately while others combine information from different channels to normalize each pixel ( , ).Sermanet et al.
2012  Local contrast normalization can usually be implemented efficiently by using separable convolution (see section ) to compute feature maps of local means and9.8 local standard deviations, then using element-wise subtraction and element-wise division on different feature maps.
Local contrast normalization is a differentiable operation and can also be used as  a nonlinearity applied to the hidden layers of a network, as well as a preprocessing operation applied to the input.
As with global contrast normalization, we typically need to regularize local contrast normalization to avoid division by zero.
In fact, because local contrast normalization typically acts on smaller windows, it is even more important to regularize.
Smaller windows are more likely to contain values that are all nearly the same as each other, and thus more likely to have zero standard deviation.
APPLICATIONS  12.2.1.2 Dataset Augmentation  As described in section , it is easy to improve the generalization of a classifier7.4  by increasing the size of the training set by adding extra copies of the training examples that have been modified with transformations that do not change the class.
Object recognition is a classification task that is especially amenable to this form of dataset augmentation because the class is invariant to so many transformations and the input can be easily transformed with many geometric operations.
As described before, classifiers can benefit from random translations, rotations, and in some cases, flips of the input to augment the dataset.
In specialized computer vision applications, more advanced transformations are commonly used for dataset augmentation.
These schemes include random perturbation of the colors in an image ( , ) and nonlinear geometric distortions ofKrizhevsky et al.
1998b  12.3 Speech Recognition  The task of speech recognition is to map an acoustic signal containing a spoken natural language utterance into the corresponding sequence of words intended by the speaker.
,x( )T ) denote the sequence of acoustic input  vectors (traditionally produced by splitting the audio into 20ms frames).
Most speech recognition systems preprocess the input using specialized hand-designed features, but some ( , ) deep learning systems learn featuresJaitly and Hinton 2011 from raw input.
The automatic speech recognition (ASR) task consists of creating a function f ∗ASR that computes the most probable linguistic sequence given the acoustic sequence :y X  f∗ASR( ) = arg maxX y  P ∗( = )y X| X (12.4)  where P ∗ is the true conditional distribution relating the inputs X to the targets y.
Since the 1980s and until about 2009–2012, state-of-the art speech recognition systems primarily combined hidden Markov models (HMMs) and Gaussian mixture models (GMMs).
GMMs modeled the association between acoustic features and phonemes ( , ), while HMMs modeled the sequence of phonemes.Bahl et al.
1987 The GMM-HMM model family treats acoustic waveforms as being generated by the following process: first an HMM generates a sequence of phonemes and discrete sub-phonemic states (such as the beginning, middle, and end of each  458    CHAPTER 12.
APPLICATIONS  phoneme), then a GMM transforms each discrete symbol into a brief segment of audio waveform.
Although GMM-HMM systems dominated ASR until recently, speech recognition was actually one of the first areas where neural networks were applied, and numerous ASR systems from the late 1980s and early 1990s used neural nets (Bourlard and Wellekens 1989 Waibel 1989 Robinson and, ; et al., ; Fallside 1991 Bengio 1991 1992 Konig 1996, ; et al., , ; et al., ).
At the time, the performance of ASR based on neural nets approximately matched the performance of GMM-HMM systems.
For example, Robinson and Fallside 1991( ) achieved  26% phoneme error rate on the TIMIT ( , ) corpus (with 39Garofolo et al.
Since then, TIMIT has been a benchmark for phoneme recognition, playing a role similar to the role MNIST plays for object recognition.
However, because of the complex engineering involved in software systems for speech recognition and the effort that had been invested in building these systems on the basis of GMM-HMMs, the industry did not see a compelling argument for switching to neural networks.
As a consequence, until the late 2000s, both academic and industrial research in using neural nets for speech recognition mostly focused on using neural nets to learn extra features for GMM-HMM systems.
Later, with much larger and deeper models and much larger datasets, recognition  accuracy was dramatically improved by using neural networks to replace GMMs for the task of associating acoustic features to phonemes (or sub-phonemic states).
Starting in 2009, speech researchers applied a form of deep learning based on unsupervised learning to speech recognition.
This approach to deep learning was based on training undirected probabilistic models called restricted Boltzmann machines (RBMs) to model the input data.
RBMs will be described in part .III To solve speech recognition tasks, unsupervised pretraining was used to build deep feedforward networks whose layers were each initialized by training an RBM.
These networks take spectral acoustic representations in a fixed-size input window (around a center frame) and predict the conditional probabilities of HMM states for that center frame.
Training such deep networks helped to significantly improve the recognition rate on TIMIT ( , , ), bringing down theMohamed et al.
Extensions to the basic phone recognition pipeline included the addition of speaker-adaptive features (Mohamed et al., ) that further reduced the error rate.
This was quickly followed up2011 by work to expand the architecture from phoneme recognition (which is what TIMIT is focused on) to large-vocabulary speech recognition ( , ),Dahl et al.
2012 which involves not just recognizing phonemes but also recognizing sequences of words from a large vocabulary.
APPLICATIONS  shifted from being based on pretraining and Boltzmann machines to being based on techniques such as rectified linear units and dropout ( , ;Zeiler et al.
By that time, several of the major speech groups in industry had2013 started exploring deep learning in collaboration with academic researchers.
( ) describe the breakthroughs achieved by these collaborators, which2012a are now deployed in products such as mobile phones.
Later, as these groups explored larger and larger labeled datasets and incorpo- rated some of the methods for initializing, training, and setting up the architecture  of deep nets, they realized that the unsupervised pretraining phase was either unnecessary or did not bring any significant improvement.
These breakthroughs in recognition performance for word error rate in speech recognition were unprecedented (around 30% improvement) and were following a long period of about ten years during which error rates did not improve much with the traditional GMM-HMM technology, in spite of the continuously growing size of training sets (see figure 2.4 of Deng and Yu 2014( )).
In a matter of roughly two years, most of the industrial products for speech recognition incorporated deep neural networks and this success spurred a new wave of research into deep learning algorithms and architectures for ASR, which is still ongoing today.
2013) that replicate weights across time and frequency, improving over the earlier time-delay neural networks that replicated weights only across time.
The new two-dimensional convolutional models regard the input spectrogram not as one long vector but as an image, with one axis corresponding to time and the other to frequency of spectral components.
Another important push, still ongoing, has been towards end-to-end deep learning speech recognition systems that completely remove the HMM.
( ) who trained a deep LSTM RNN (see section ), using MAP inference over the frame-to-10.10 phoneme alignment, as in ( ) and in the CTC framework (LeCun et al.
A deep RNN ( et al., ) has state variables from several layers at each time step, giving the unfolded graph two kinds of depth: ordinary depth due to a stack of layers, and depth due to time unfolding.
Another contemporary step toward end-to-end deep learning ASR is to let the system learn how to “align” the acoustic-level information with the phonetic-level  460    CHAPTER 12.
2015  12.4 Natural Language Processing  Natural language processing (NLP) is the use of human languages, such as English or French, by a computer.
Computer programs typically read and emit specialized languages designed to allow efficient and unambiguous parsing by simple  programs.
Natural language processing includes applications such as machine translation, in which the learner must read a sentence in one human language and emit an equivalent sentence in another human language.
Many NLP applications are based on language models that define a probability distribution over sequences of words, characters or bytes in a natural language.
As with the other applications discussed in this chapter, very generic neural network techniques can be successfully applied to natural language processing.
However, to achieve excellent performance and to scale well to large applications, some domain-specific strategies become important.
To build an efficient model of natural language, we must usually use techniques that are specialized for processing  sequential data.
In many cases, we choose to regard natural language as a sequence of words, rather than a sequence of individual characters or bytes.
Because the total number of possible words is so large, word-based language models must operate on an extremely high-dimensional and sparse discrete space.
Several strategies have been developed to make models of such a space efficient, both in a computational and in a statistical sense.
12.4.1 -gramsn  A language model defines a probability distribution over sequences of tokens in a natural language.
The earliest successful language models were based on models of fixed-length sequences of tokens called -grams.
An -gram is a sequence of tokens.n n n  Models based on n-grams define the conditional probability of the n-th token given the preceding n− 1 tokens.
The model uses products of these conditional distributions to define the probability distribution over longer sequences:  P x( 1 , .
, xn−1)may be modeled by a different model with a smaller value of .n  Training n-gram models is straightforward because the maximum likelihood estimate can be computed simply by counting how many times each possible n gram occurs in the training set.
Models based on n-grams have been the core building block of statistical language modeling for many decades (Jelinek and Mercer 1980 Katz 1987 Chen and Goodman 1999, ; , ; , ).
For small values of n, models have particular names: unigram for n=1, bigram for n=2, and trigram for n=3.
These names derive from the Latin prefixes for the corresponding numbers and the Greek suffix “-gram” denoting something that is written.
For this to exactly reproduce  inference in Pn, we must omit the final character from each sequence when we train Pn−1.
As an example, we demonstrate how a trigram model computes the probability of the sentence “THE DOG RAN AWAY.” The first words of the sentence cannot be handled by the default formula based on conditional probability because there is no context at the beginning of the sentence.
Finally, the last word may be predicted using the typical case, of using the condi- tional distribution P(AWAY DOG RAN| ).
Putting this together with equation ,12.6 we obtain:  P P( ) = THE DOG RAN AWAY 3 ( )THE DOG RAN P3( )DOG RAN AWAY /P 2( )DOG RAN .
(12.7)  A fundamental limitation of maximum likelihood for n-gram models is that Pn as estimated from training set counts is very likely to be zero in many cases, even though the tuple (x t n− +1, .
One basicChen and Goodman 1999 technique consists of adding non-zero probability mass to all of the possible next symbol values.
This method can be justified as Bayesian inference with a uniform or Dirichlet prior over the count parameters.
Another very popular idea is to form a mixture model containing higher-order and lower-order n-gram models, with the higher-order models providing more capacity and the lower-order models being more likely to avoid counts of zero.
In other words, it can be viewed as a local non-parametric predictor, similar to k-nearest neighbors.
The problem for a language model5.11.2  is even more severe than usual, because any two different words have the same dis- tance from each other in one-hot vector space.
It is thus difficult to leverage much information from any “neighbors”—only training examples that repeat literally the same context are useful for local generalization.
To overcome these problems, a language model must be able to share knowledge between one word and other semantically similar words.
To improve the statistical efficiency of n-gram models, class-based language models (Brown 1992 Ney and Kneser 1993 Niesler 1998et al., ; , ; et al., ) introduce the notion of word categories and then share statistical strength between words that are in the same category.
The idea is to use a clustering algorithm to partition the set of words into clusters or classes, based on their co-occurrence frequencies with other words.
The model can then use word class IDs rather than individual word  IDs to represent the context on the right side of the conditioning bar.
Composite models combining word-based and class-based models via mixing or back-off are also possible.
Although word classes provide a way to generalize between sequences in which some word is replaced by another of the same class, much information is lost in this representation.
APPLICATIONS  12.4.2 Neural Language Models  Neural language models or NLMs are a class of language model designed  to overcome the curse of dimensionality problem for modeling natural language sequences by using a distributed representation of words ( , ).Bengio et al.
2001 Unlike class-based n-gram models, neural language models are able to recognize that two words are similar without losing the ability to encode each word as distinct from the other.
Neural language models share statistical strength between one word (and its context) and other similar words and contexts.
The distributed representation the model learns for each word enables this sharing by allowing the model to treat words that have features in common similarly.
For example, if the word dog and the word cat map to representations that share many attributes, then sentences that contain the word cat can inform the predictions that will be made by the model for sentences that contain the word dog, and vice-versa.
Because there  are many such attributes, there are many ways in which generalization can happen, transferring information from each training sentence to an exponentially large number of semantically related sentences.
The curse of dimensionality requires the model to generalize to a number of sentences that is exponential in the sentence length.
The model counters this curse by relating each training sentence to an exponential number of similar sentences.
In this interpretation, we view the raw symbols as points in a space of dimension equal to the vocabulary size.
In the original space, every word is represented by a one-hot vector, so every pair of words is at Euclidean distance  √ 2 from each  other.
In the embedding space, words that frequently appear in similar contexts  (or any pair of words sharing some “features” learned by the model) are close to each other.
Figure zooms in on specific areas of a learned word embedding space to show12.3 how semantically similar words map to representations that are close to each other.
For example, a hidden layer of a convolutional network provides an “image embedding.” Usually NLP practitioners are much more interested in this idea of embeddings because natural language does not originally lie in a real-valued vector space.
The hidden layer has provided a more qualitatively dramatic change in the way the data is represented.
The basic idea of using distributed representations to improve models for natural language processing is not restricted to neural networks.
It may also be used with graphical models that have distributed representations in the form of  464    CHAPTER 12.
− − − − −34 32 30 28 26 −14  −13  −12  −11  −10  −9  −8  −7  −6  Canada  Europe Ontario  North  English  Canadian  UnionAfricanAfrica  British  France  RussianChina  Germany  French  AssemblyEU Japan  Iraq  South  European  35 0 35 5 36 0 36 5 37 0 37 5 38 0. .
17  18  19  20  21  22  1995 199619971998  1999 2000  2001  2002  2003 2004  2005  2006  2007  20082009  Figure 12.3: Two-dimensional visualizations of word embeddings obtained from a neural machine translation model ( , ), zooming in on specific areas whereBahdanau et al.
In real applications, embeddings typically have higher dimensionality and can simultaneously capture many kinds of similarity between words.
12.4.3 High-Dimensional Outputs  In many natural language applications, we often want our models to produce  words (rather than characters) as the fundamental unit of the output.
For large vocabularies, it can be very computationally expensive to represent an output distribution over the choice of a word, because the vocabulary size is large.
The naive approach to representing such a distribution is to apply an affine transformation from a hidden representation to the output space, then apply the softmax function.
The weight matrix describing the linear component of this affine transformation is very large, because its output dimension is | |V .
This imposes a high memory cost to represent the matrix, and a high computational cost to multiply by it.
Because the softmax is normalized across all  | |V outputs, it is necessary to perform the full matrix multiplication at training time as well as test time—we cannot calculate only the dot product with the weight vector for the correct output.
The high computational costs of the output layer thus arise both at training time (to compute the likelihood and its gradient) and at test time (to compute probabilities for all or selected words).
2015 the standard cross-entropy loss applied to a traditional softmax output layer poses many difficulties.
If we parametrize the transformation from h to ŷ with learned weights W and learned biases b, then the affine-softmax output layer performs the following computations:  ai = bi+   j  Wijhj ∀ ∈ { | |}i 1, .
With nh in the thousands and | |V in the hundreds of thousands, this operation dominates the computation of most neural language models.
12.4.3.1 Use of a Short List  The first neural language models ( , , ) dealt with the high costBengio et al.
2001 2003 of using a softmax over a large number of output words by limiting the vocabulary size to 10,000 or 20,000 words.
Schwenk and Gauvain 2002 Schwenk 2007( ) and ( ) built upon this approach by splitting the vocabulary V into a shortlist L of most frequent words (handled by the neural net) and a tail T = V L\ of more rare words (handled by an n-gram model).
To be able to combine the two predictions, the  neural net also has to predict the probability that a word appearing after context C belongs to the tail list.
The extra output can then be used to achieve an estimate of the probability distribution over all words in as follows:V  P y i C( = | ) =1i∈LP y i C, i P i C( = | ∈ −L)(1 ( ∈ |T )) + 1i∈TP y i C, i P i C( = | ∈ T) ( ∈ |T ) (12.10)  where P (y = i C, i| ∈ L) is provided by the neural language model and P (y = i | C, i ∈ T) is provided by the n-gram model.
With slight modification, this approach can also work using an extra output value in the neural language model’s softmax  layer, rather than a separate sigmoid unit.
An obvious disadvantage of the short list approach is that the potential gener- alization advantage of the neural language models is limited to the most frequent  466    CHAPTER 12.
This disadvantage has stimulated the exploration of alternative methods to deal with high-dimensional outputs, described below.
12.4.3.2 Hierarchical Softmax  A classical approach ( , ) to reducing the computational burdenGoodman 2001 of high-dimensional output layers over large vocabulary sets V is to decompose probabilities hierarchically.
Instead of necessitating a number of computations proportional to | |V (and also proportional to the number of hidden units, nh), the | |V factor can be reduced to as low as log | |V .
( ) andBengio 2002 Morin and Bengio 2005( ) introduced this factorized approach to the context of neural language models.
One can think of this hierarchy as building categories of words, then categories of categories of words, then categories of categories of categories of words, etc.
The probability of a choosing a word is given by the product of the probabilities of choosing the branch leading to that word at every node on a path from the root of the tree to the leaf containing the word.
( ) also describe12.4 Mnih and Hinton 2009 how to use multiple paths to identify a single word in order to better model words that have multiple meanings.
Computing the probability of a word then involves summation over all of the paths that lead to that word.
To predict the conditional probabilities required at each node of the tree, we typically use a logistic regression model at each node of the tree, and provide the  same context C as input to all of these models.
Because the correct output is encoded in the training set, we can use supervised learning to train the logistic regression models.
This is typically done using a standard cross-entropy loss, corresponding to maximizing the log-likelihood of the correct sequence of decisions.
Because the output log-likelihood can be computed efficiently (as low as log | |V rather than | |V ), its gradients may also be computed efficiently.
This includes not only the gradient with respect to the output parameters but also the gradients with respect to the hidden layer activations.
It is possible but usually not practical to optimize the tree structure to minimize the expected number of computations.
Tools from information theory specify how to choose the optimal binary code given the relative frequencies of the words.
To  do so, we could structure the tree so that the number of bits associated with a word is approximately equal to the logarithm of the frequency of that word.
APPLICATIONS  (1)(0)  (0,0,0) (0,0,1) (0,1,0) (0,1,1) (1,0,0) (1,0,1) (1,1,0) (1,1,1)  (1,1)(1,0)(0,1)(0,0)  w0w0 w1w1 w2w2 w3w3 w4w4 w5w5 w6w6 w7w7  Figure 12.4: Illustration of a simple hierarchy of word categories, with 8 words w0, .
Any node can be indexed by the sequence of binary decisions (0=left, 1=right) to reach the node from the root.
Super-class (0) contains the classes (0, 0) (0and , 1), which respectively contain the sets of words {w0, w1} and {w2, w3}, and similarly super-class contains the classes(1) (1,0) (1and , 1), which respectively contain the words (w4, w5) (and w6, w7).
If the tree is sufficiently balanced, the maximum depth (number of binary decisions) is on the order of the logarithm of the number of words | |V : the choice of one out of | |V words can be obtained by doing O(log | |V ) operations (one for each of the nodes on the path from the root).
In this example, computing the probability of a word y can be done by multiplying three probabilities, associated with the binary decisions to move left or right at each node on the path from the root to a node y.
The probability of sampling an output y decomposes into a product of conditional probabilities, using the chain rule for conditional probabilities, with each node indexed by the prefix of these bits.
For example, node (1,0) corresponds to the prefix (b0(w4) = 1, b1(w4) = 0), and the probability of w4 can be decomposed as follows:  P w( = y 4) = (P b0 = 1,b1 = 0,b2 = 0) (12.11)  = (P b0 = 1) (P b1 = 0 | b0 = 1) (P b2 = 0 | b0 = 1,b1 = 0).
APPLICATIONS  practice, the computational savings are typically not worth the effort because the computation of the output probabilities is only one part of the total computation in the neural language model.
Let nb be the weighted average of the number of bits required to identify a word, with the weighting given by the frequency of these words.
In this example, the number of operations needed to compute the hidden activations grows as as O(ln2h) while the output computations grow as O(nhnb).
Because the size of the vocabulary rarely exceeds a million words and log2(10  6) ≈ 20, it is possible to reduce nb to about ,20 but nh is often much larger, around 10  3 or more.
Rather than carefully optimizing a tree with a branching factor of , one can instead define a tree with depth two2 and a branching factor of   | |V .
The simple approach based on a tree of depth two captures most of the computational benefit of the hierarchical strategy.
One question that remains somewhat open is how to best define these word classes, or how to define the word hierarchy in general.
Early work used existing hierarchies ( , ) but the hierarchy can also be learned, ideallyMorin and Bengio 2005 jointly with the neural language model.
An exact  optimization of the log-likelihood appears intractable because the choice of a word hierarchy is a discrete one, not amenable to gradient-based optimization.
However, one could use discrete optimization to approximately optimize the partition of words into word classes.
An important advantage of the hierarchical softmax is that it brings computa- tional benefits both at training time and at test time, if at test time we want to compute the probability of specific words.
Of course, computing the probability of all | |V words will remain expensive even with the hierarchical softmax.
A disadvantage is that in practice the hierarchical softmax tends to give worse test results than sampling-based methods we will describe next.
12.4.3.3 Importance Sampling  One way to speed up the training of neural language models is to avoid explicitly computing the contribution of the gradient from all of the words that do not appear  469    CHAPTER 12.
Using the notation introduced in equation , the gradient can be written as follows:12.8  ∂ P y Clog ( | ) ∂θ  = ∂ log softmaxy ( )a  ∂θ (12.13)  = ∂  ∂θ log  eay i e ai  (12.14)  = ∂  ∂θ (a y− log    i  ea i) (12.15)  = ∂ay  ∂θ −    i  P y i C( = | ) ∂ai ∂θ  (12.16)  where a is the vector of pre-softmax activations (or scores), with one element per word.
The first term is the positive phase term (pushing ay up) while the second term is the negative phase term (pushing ai down for all i, with weight P (i C| ).
Sampling from the model requires computing P (i C| ) for all i in the vocabulary, which is precisely what we are trying to avoid.
Instead of sampling from the model, one can sample from another distribution, called the proposal distribution (denoted q ), and use appropriate weights to correct for the bias introduced by sampling from the wrong distribution (Bengio and Sénécal 2003 Bengio and Sénécal 2008, ; , ).
This is an application of a more general  technique called importance sampling, which will be described in more detail in section .
Unfortunately, even exact importance sampling is not efficient17.2 because it requires computing weights pi/qi , where pi = P (i C| ), which can only be computed if all the scores ai are computed.
The solution adopted for this application is called biased importance sampling, where the importance weights are normalized to sum to 1.
When negative word ni is sampled, the associated gradient is weighted by  wi = pni/qn iN j=1 pnj/qnj  .
(12.17)  These weights are used to give the appropriate importance to the m negative samples from q used to form the estimated negative phase contribution to the  470    CHAPTER 12.
After estimating the parameters, it is also possible to sample from such a distribution very efficiently.
More generally, it is useful for accelerating training with large sparse output layers, where the output is a sparse vector rather than a -of-1 n choice.
A bag of words is a sparse vector v where vi indicates the presence or absence of word i from the vocabulary in the  document.
Machine learning models that emit such sparse vectors can be expensive to train for a variety of reasons.
Moreover, the loss function we use for training might most naturally be described in terms of comparing every element of the output to every element of the target.
This means that it is not always clear that there is a computational benefit to using sparse outputs, because the model may choose to make the majority of the output non-zero and all of these non-zero values need to be compared to the corresponding training target, even if the training target is zero.
The efficient algorithm minimizes the loss reconstruction for  the “positive words” (those that are non-zero in the target) and an equal number of “negative words.” The negative words are chosen randomly, using a heuristic to sample words that are more likely to be mistaken.
In all of these cases, the computational complexity of gradient estimation for the output layer is reduced to be proportional to the number of negative samples rather than proportional to the size of the output vector.
12.4.3.4 Noise-Contrastive Estimation and Ranking Loss  Other approaches based on sampling have been proposed to reduce the computa- tional cost of training neural language models with large vocabularies.
An early example is the ranking loss proposed by Collobert and Weston 2008a( ), which views the output of the neural language model for each word as a score and tries to make the score of the correct word ay be ranked high in comparison to the other  471    CHAPTER 12.
(12.19)  The gradient is zero for the i-th term if the score of the observed word, ay, is greater than the score of the negative word ai by a margin of 1.
One issue with this criterion is that it does not provide estimated conditional probabilities, which are useful in some applications, including speech recognition and text generation (including conditional text generation tasks such as translation).
A more recently used training objective for neural language model is noise- contrastive estimation, which is introduced in section .
This approach has18.6  been successfully applied to neural language models (Mnih and Teh 2012 Mnih, ; and Kavukcuoglu 2013, ).
12.4.4 Combining Neural Language Models with -gramsn  A major advantage of n-gram models over neural networks is that n-gram models  achieve high model capacity (by storing the frequencies of very many tuples) while requiring very little computation to process an example (by looking up only a few tuples that match the current context).
If we use hash tables or trees to access the counts, the computation used for n-grams is almost independent of capacity.
In comparison, doubling a neural network’s number of parameters typically also roughly doubles its computation time.
Embedding layers index only a single embedding in each pass, so we can increase the vocabulary size without increasing the computation time per example.
Some other models, such as tiled convolutional networks, can add parameters while reducing the degree of parameter sharing in order to maintain the same amount of computation.
However, typical neural  network layers based on matrix multiplication use an amount of computation proportional to the number of parameters.
One easy way to add capacity is thus to combine both approaches in an ensemble consisting of a neural language model and an n-gram language model (Bengio et al., , ).
As with any ensemble, this technique can reduce test error if2001 2003 the ensemble members make independent mistakes.
The field of ensemble learning provides many ways of combining the ensemble members’ predictions, including uniform weighting and weights chosen on a validation set.
It is also possible to pair a neural network with a maximum entropy model and train both jointly (Mikolov 2011bet al., ).
APPLICATIONS  a neural network with an extra set of inputs that are connected directly to the output, and not connected to any other part of the model.
The extra inputs are indicators for the presence of particular n-grams in the input context, so these variables are very high-dimensional and very sparse.
The increase in model capacity is huge—the new portion of the architecture contains up to | |sV n parameters—but the amount of added computation needed to process an input is minimal because the extra inputs are very sparse.
12.4.5 Neural Machine Translation  Machine translation is the task of reading a sentence in one natural language and emitting a sentence with the equivalent meaning in another language.
For example, many languages put adjectives after nouns, so when translated to English directly they yield phrases such as “apple red.” The proposal mechanism suggests  many variants of the suggested translation, ideally including “red apple.” A second component of the translation system, a language model, evaluates the proposed translations, and can score “red apple” as better than “apple red.”  The earliest use of neural networks for machine translation was to upgrade the language model of a translation system by using a neural language model (Schwenk et al., ;2006 Schwenk 2010, ).
The n-gram based models used for machine translation include not just traditional back-off n-gram models (Jelinek and Mercer 1980 Katz 1987 Chen and Goodman 1999, ; , ; , ) but also maximum entropy language models ( , ), in which an affine-softmax layerBerger et al.
1996 predicts the next word given the presence of frequent -grams in the context.n  Traditional language models simply report the probability of a natural language sentence.
Because machine translation involves producing an output sentence given an input sentence, it makes sense to extend the natural language model to be conditional.
As described in section , it is straightforward to extend a model6.2.1.1 that defines a marginal distribution over some variable to define a conditional distribution over that variable given a context C, where C might be a single variable or a list of variables.
The estimate formed by this MLP replaces the estimate provided by conditional -gram models.n  473    CHAPTER 12.
APPLICATIONS  Decoder  Output object (English   sentence)  Intermediate, semantic representation  Source object (French sentence or image)  Encoder  Figure 12.5: The encoder-decoder architecture to map back and forth between a surface representation (such as a sequence of words or an image) and a semantic representation.
By using the output of an encoder of data from one modality (such as the encoder mapping from French sentences to hidden representations capturing the meaning of sentences) as the input to a decoder for another modality (such as the decoder mapping from hidden representations capturing the meaning of sentences to English), we can train systems that translate from one modality to another.
This idea has been applied successfully not just to machine translation but also to caption generation from images.
A drawback of the MLP-based approach is that it requires the sequences to be preprocessed to be of fixed length.
To make the translation more flexible, we would like to use a model that can accommodate variable length inputs and variable length outputs.
Section describes several ways10.2.4 of constructing an RNN that represents a conditional distribution over a sequence given some input, and section describes how to accomplish this conditioning10.4 when the input is a sequence.
In all cases, one model first reads the input sequence and emits a data structure that summarizes the input sequence.
2014a Sutskever 2014 Jean 2014et al., ; et al., ) or a convolutional network (Kalchbrenner and Blunsom 2013, ).
A second model, usually an RNN, then reads the context C and generates a sentence in the target language.
This general idea of an encoder-decoder framework for machine translation is illustrated in figure .12.5  In order to generate an entire sentence conditioned on the source sentence, the model must have a way to represent the entire source sentence.
APPLICATIONS  learning point of view, it can be useful to learn a representation in which sentences that have the same meaning have similar representations regardless of whether they were written in the source language or the target language.
This strategy was explored first using a combination of convolutions and RNNs (Kalchbrenner and Blunsom 2013, ).
Later work introduced the use of an RNN for scoring proposed translations ( , ) and for generating translated sentences (Cho et al.
et al., ).2014 Jean ( ) scaled these models to larger vocabularies.2014  12.4.5.1 Using an Attention Mechanism and Aligning Pieces of Data  α(t−1)α(t−1) α( )tα( )t α( +1)tα( +1)t  h(t−1)h(t−1) h( )th( )t h( +1)th( +1)t  cc  ×× ×× ××  +  Figure 12.6: A modern attention mechanism, as introduced by ( ), isBahdanau et al.
A context vector c is formed by taking a weighted average of feature vectors h( )t with weights α( )t .
In some applications, the feature vectors h are hidden units of a neural network, but they may also be raw input to the model.
They are usually values in the interval [0, 1] and are intended to concentrate around just one h( )t so that the weighted average approximates reading that one specific time step precisely.
The weights α( )t are usually produced by applying a softmax function to relevance scores emitted by another portion of the model.
The attention mechanism is more expensive computationally than directly indexing the desired h( )t , but direct indexing cannot be trained with gradient descent.
The attention mechanism based on weighted averages is a smooth, differentiable approximation that can be trained with existing optimization algorithms.
Using a fixed-size representation to capture all the semantic details of a very long sentence of say 60 words is very difficult.
It can be achieved by training a sufficiently large RNN well enough and for long enough, as demonstrated by Cho et al.
However, a more efficient approach is to read the whole sentence or paragraph (to get the context and the gist of what  475    CHAPTER 12.
APPLICATIONS  is being expressed), then produce the translated words one at a time, each time focusing on a different part of the input sentence in order to gather the semantic details that are required to produce the next output word.
2015 to focus on specific parts of the input sequence at each time step is illustrated in figure .12.6  We can think of an attention-based system as having three components:  1.
A process that “reads” raw data (such as source words in a source sentence), and converts them into distributed representations, with one feature vector associated with each word position.
This can be understood as a “ ” containing a sequence of facts, which can bememory retrieved later, not necessarily in the same order, without having to visit all of them.
A process that “ ” the content of the memory to sequentially performexploits a task, at each time step having the ability put attention on the content of one memory element (or a few, with a different weight).
When words in a sentence written in one language are aligned with correspond- ing words in a translated sentence in another language, it becomes possible to relate the corresponding word embeddings.
Earlier work showed that one could learn a kind of translation matrix relating the word embeddings in one language with the word embeddings in another (Kočiský 2014et al., ), yielding lower alignment error rates than traditional approaches based on the frequency counts in the phrase table.
For example, more efficient cross-lingual alignment ( , ) allows training on larger datasets.Gouws et al.
2014  12.4.6 Historical Perspective  The idea of distributed representations for symbols was introduced by Rumelhart et al.
( ) in one of the first explorations of back-propagation, with symbols1986a corresponding to the identity of family members and the neural network capturing the relationships between family members, with training examples forming triplets such as (Colin, Mother, Victoria).
APPLICATIONS  might represent which family tree Colin was in, what branch of that tree he was in, what generation he was from, etc.
One can think of the neural network as computing learned rules relating these attributes together in order to obtain the desired predictions.
The idea of forming an embedding for a symbol was extended to the idea of an embedding for a word by Deerwester 1990et al.
The history of natural language processing is marked by transitions in the popularity of different ways of representing the input to the model.
Following this early work on symbols or words, some of the earliest applications of neural networks to NLP ( , ;Miikkulainen and Dyer 1991 Schmidhuber 1996, ) represented the input as a sequence of characters.
( ) returned the focus to modeling words and introduced neural language models, which produce interpretable word embeddings.
These neural models have scaled up from defining representations of a small set of symbols in the 1980s to millions of words (including proper nouns and misspellings) in modern applications.
This computational scaling effort led to the invention of the techniques described above in section .12.4.3  Initially, the use of words as the fundamental units of language models yielded improved language modeling performance ( , ).
2001 new techniques continually push both character-based models (Sutskever et al., 2011) and word-based models forward, with recent work ( , ) evenGillick et al.
The ideas behind neural language models have been extended into several natural language processing applications, such as parsing ( , , ;Henderson 2003 2004 Collobert 2011, ), part-of-speech tagging, semantic role labeling, chunking, etc, sometimes using a single multi-task learning architecture (Collobert and Weston, 2008a Collobert 2011a; et al., ) in which the word embeddings are shared across tasks.
Two-dimensional visualizations of embeddings became a popular tool for an- alyzing language models following the development of the t-SNE dimensionality reduction algorithm (van der Maaten and Hinton 2008, ) and its high-profile appli- cation to visualization word embeddings by Joseph Turian in 2009.
APPLICATIONS  12.5 Other Applications  In this section we cover a few other types of applications of deep learning that are different from the standard object recognition, speech recognition and natural language processing tasks discussed above.
Part of this book will expand thatIII scope even further to tasks that remain primarily research areas.
12.5.1 Recommender Systems  One of the major families of applications of machine learning in the information technology sector is the ability to make recommendations of items to potential users or customers.
Two major types of applications can be distinguished: online advertising and item recommendations (often these recommendations are still for the purpose of selling a product).
Both rely on predicting the association between a user and an item, either to predict the probability of some action (the user  buying the product, or some proxy for this action) or the expected gain (which may depend on the value of the product) if an ad is shown or a recommendation is made regarding that product to that user.
Companies including Amazon and eBay use machine learning, including deep learning, for their product recommendations.
Examples include selecting posts to display on social network news feeds, recommending movies to watch, recommending jokes, recommending advice from experts, matching players for video games, or matching people in dating services.
Often, this association problem is handled like a supervised learning problem: given some information about the item and about the user, predict the proxy of  interest (user clicks on ad, user enters a rating, user clicks on a “like” button, user buys product, user spends some amount of money on the product, user spends time visiting a page for the product, etc).
This often ends up being either a regression problem (predicting some conditional expected value) or a probabilistic classification problem (predicting the conditional probability of some discrete event).
The early work on recommender systems relied on minimal information as inputs for these predictions: the user ID and the item ID.
In this context, the only way to generalize is to rely on the similarity between the patterns of values of the target variable for different users or for different items.
Suppose that user 1 and user 2 both like items A, B and C. From this, we may infer that user 1 and  478    CHAPTER 12.
If user 1 likes item D, then this should be a strong cue that user 2 will also like D. Algorithms based on this principle come under the name of collaborative filtering.
Both non-parametric approaches (such as nearest-neighbor methods based on the estimated similarity between patterns of preferences) and parametric methods are possible.
Parametric methods often rely on learning a distributed representation (also called an embedding) for each user and for each item.
Bilinear prediction of the target variable (such as a rating) is a simple parametric method that is highly successful and often found as a component  of state-of-the-art systems.
The prediction is obtained by the dot product between the user embedding and the item embedding (possibly corrected by constants that depend only on either the user ID or the item ID).
Let R̂ be the matrix containing our predictions, A a matrix with user embeddings in its rows and B a matrix with item embeddings in its columns.
Let b and c be vectors that contain respectively a kind of bias for each user (representing how grumpy or positive that user is in general) and for each item (representing its general popularity).
(12.20)  Typically one wants to minimize the squared error between predicted ratings R̂u,i and actual ratings Ru,i .
User embeddings and item embeddings can then be conveniently visualized when they are first reduced to a low dimension (two or three), or they can be used to compare users or items against each other, just like word embeddings.
One way to obtain these embeddings is by performing a  singular value decomposition of the matrix R of actual targets (such as ratings).
This corresponds to factorizing R = UDV  (or a normalized variant) into the product of two factors, the lower rank matrices A = UD and B = V  .
One problem with the SVD is that it treats the missing entries in an arbitrary way, as if they corresponded to a target value of 0.
Fortunately, the sum of squared errors on the observed ratings can also be easily minimized by gradient- based optimization.
The SVD and the bilinear prediction of equation both12.20 performed very well in the competition for the Netflix prize ( ,Bennett and Lanning 2007), aiming at predicting ratings for films, based only on previous ratings by a large set of anonymous users.
Many machine learning experts participated in this competition, which took place between 2006 and 2009.
It raised the level of  research in recommender systems using advanced machine learning and yielded improvements in recommender systems.
Even though it did not win by itself, the simple bilinear prediction or SVD was a component of the ensemble models  479    CHAPTER 12.
Beyond these bilinear models with distributed representations, one of the first uses of neural networks for collaborative filtering is based on the RBM undirected probabilistic model (Salakhutdinov 2007et al., ).
RBMs were an important element of the ensemble of methods that won the Netflix competition (Töscher 2009et al., ; Koren 2009, ).
More advanced variants on the idea of factorizing the ratings matrix have also been explored in the neural networks community (Salakhutdinov and  Mnih 2008, ).
However, there is a basic limitation of collaborative filtering systems: when a new item or a new user is introduced, its lack of rating history means that there is no way to evaluate its similarity with other items or users (respectively), or the degree of association between, say, that new user and existing items.
A general way of solving the cold-start recommendation problem is to introduce extra information about the individual users and items.
The mapping from a rich set of user features or item features to an embedding can be learned through a  deep learning architecture ( , ;Huang et al.
Specialized deep learning architectures such as convolutional networks have also been applied to learn to extract features from rich content such as from musical audio tracks, for music recommendation (van den Oörd 2013et al., ).
In that work, the convolutional net takes acoustic features as input and computes an embedding for the associated song.
The dot product between this song embedding and the embedding for a user is then used to predict whether a user will listen to the song.
12.5.1.1 Exploration Versus Exploitation  When making recommendations to users, an issue arises that goes beyond ordinary supervised learning and into the realm of reinforcement learning.
Many recom- mendation problems are most accurately described theoretically as contextual bandits ( , ; , ).
2010 use the recommendation system to collect data, we get a biased and incomplete view of the preferences of users: we only see the responses of users to the items they were recommended and not to the other items.
In addition, in some cases  we may not get any information on users for whom no recommendation has been made (for example, with ad auctions, it may be that the price proposed for an  480    CHAPTER 12.
APPLICATIONS  ad was below a minimum price threshold, or does not win the auction, so the ad is not shown at all).
More importantly, we get no information about what outcome would have resulted from recommending any of the other items.
This would be like training a classifier by picking one class ŷ for each training example x (typically the class with the highest probability according to the model) and then only getting as feedback whether this was the correct class or not.
Clearly, each example conveys less information than in the supervised case where the true label y is directly accessible, so more examples are necessary.
Worse, if we are not  careful, we could end up with a system that continues picking the wrong decisions even as more and more data is collected, because the correct decision initially had a very low probability: until the learner picks that correct decision, it does not learn about the correct decision.
This is similar to the situation in reinforcement learning where only the reward for the selected action is observed.
The bandits scenario is a special case of reinforcement learning, in which the learner takes only a single action and receives a single reward.
The bandit problem is easier in the sense that the learner knows which reward is associated with which action.
In the general reinforcement learning scenario, a high reward or a low reward might have been caused by a recent action or by an action in the distant past.
The term contextual bandits refers to the case where the action is taken in the context of  some input variable that can inform the decision.
The feedback loop between the learner and the data distribution (which now depends on the actions of the learner) is a central research issue in the reinforcement learning and bandits literature.
Exploitation refers to taking actions that come from the current, best version of the learned policy—actions that we know will achieve a high reward.
If we know that given context x, action a gives us a reward of 1, we do not know whether that is the best possible reward.
We may want to exploit our current  policy and continue taking action a in order to be relatively sure of obtaining a reward of 1.
Either way, we at least gain some knowledge.0  Exploration can be implemented in many ways, ranging from occasionally taking random actions intended to cover the entire space of possible actions, to model-based approaches that compute a choice of action based on its expected reward and the model’s amount of uncertainty about that reward.
If the agent has a long time to accrue reward, then we begin with more exploration so that future actions can be planned more effectively with more knowledge.
Supervised learning has no tradeoff between exploration and exploitation  because the supervision signal always specifies which output is correct for each input.
There is no need to try out different outputs to determine if one is better than the model’s current output—we always know that the label is the best output.
Another difficulty arising in the context of reinforcement learning, besides the exploration-exploitation trade-off, is the difficulty of evaluating and comparing different policies.
This feedback loop means that it is not straightforward to evaluate the learner’s performance using a fixed set of test set input values.
12.5.2 Knowledge Representation, Reasoning and Question An- swering  Deep learning approaches have been very successful in language modeling, machine translation and natural language processing due to the use of embeddings for symbols ( , ) and words (Rumelhart et al.
Search engines already use machine learning for this purpose but much more remains to be done to improve these more advanced representations.
12.5.2.1 Knowledge, Relations and Question Answering  One interesting research direction is determining how distributed representations can be trained to capture the relations between two entities.
Pairs that are in the set are said to have the relation while those who are not in the set  482    CHAPTER 12.
For example, we can define the relation “is less than” on the set of entities {1, 2,3} by defining the set of ordered pairs S = {(1,2), (1, 3), (2,3)}.
We could define a relation containing tuples like ( , ).is_a_type_of dog mammal  In the context of AI, we think of a relation as a sentence in a syntactically simple and highly structured language.
The relation plays the role of a verb,  while two arguments to the relation play the role of its subject and object.
These sentences take the form of a triplet of tokens  (subject verb object), , (12.21)  with values (entityi, relationj, entityk).
(12.22)  We can also define an attribute, a concept analogous to a relation, but taking  only one argument: (entityi, attribute j).
We can infer relations between entities from training datasets consisting of unstructured natural language.
A common structure for these databases is the relational database, which stores this same kind of information, albeit not formatted as three token sentences.
When a database is intended to convey commonsense knowledge about everyday life or expert knowledge about an application area to an artificial intelligence system, we call the database a knowledge base.
to more specialized knowledge bases, like GeneOntology.2 Representations for entities and relations can be learned by considering each triplet in a knowledge base as a training example and maximizing a training objective that captures their joint distribution (Bordes et al., ).2013a  1 Respectively available from these web sites: freebase.com, cyc.com/opencyc, wordnet.
They also learn about interactions between words, such as which word is likely to come after a sequence of words, by learning functions of these vectors.
We can extend this approach to entities and relations by learning an embedding vector for each relation.
In fact, the parallel between modeling language and modeling knowledge encoded as relations is so close that researchers  have trained representations of such entities by using both andknowledge bases natural language sentences ( , , ;Bordes et al.
Early work on learning about relations between entities ( ,Paccanaro and Hinton 2000) posited highly constrained parametric forms (“linear relational embeddings”), often using a different form of representation for the relation than for the entities.
( ) used vectors for entities and matrices for relations, with the idea that a relation acts like an operator on entities.
Alternatively, relations can be considered as any other entity (Bordes et al., ), allowing us to make statements about relations, but more flexibility is2012 put in the machinery that combines them in order to model their joint distribution.
A practical short-term application of such models is link prediction : predict- ing missing arcs in the knowledge graph.
Most of the knowledge bases that currently exist have been constructed through manual labor, which tends to leave many and probably the majority of true relations absent from the knowledge base.
Evaluating the performance of a model on a link prediction task is difficult because we have only a dataset of positive examples (facts that are known to be true).
If the model proposes a fact that is not in the dataset, we are unsure whether the model has made a mistake or discovered a new, previously unknown  fact.
The metrics are thus somewhat imprecise and are based on testing how the model ranks a held-out of set of known true positive facts compared to other facts that are less likely to be true.
A common way to construct interesting examples that are probably negative (facts that are probably false) is to begin with a true fact and create corrupted versions of that fact, for example by replacing one entity in the relation with a different entity selected at random.
The popular precision at 10% metric counts how many times the model ranks a “correct” fact among the top 10% of all corrupted versions of that fact.
APPLICATIONS  Another application of knowledge bases and distributed representations for them is word-sense disambiguation (Navigli and Velardi 2005 Bordes, ; et al., 2012), which is the task of deciding which of the senses of a word is the appropriate one, in some context.
Eventually, knowledge of relations combined with a reasoning process and understanding of natural language could allow us to build a general question answering system.
A general question answering system must be able to process input information and remember important facts, organized in a way that enables  it to retrieve and reason about them later.
Currently, the best approach to remembering and retrieving specific declarative facts is to use an explicit memory mechanism, as described in section .
Memory networks were10.12 first proposed to solve a toy question answering task (Weston 2014 Kumaret al., ).
( ) have proposed an extension that uses GRU recurrent nets to read2015 the input into the memory and to produce the answer given the contents of the memory.
Deep learning has been applied to many other applications besides the ones described here, and will surely be applied to even more after this writing.
It would be impossible to describe anything remotely resembling a comprehensive coverage  of such a topic.
This concludes part , which has described modern practices involving deepII networks, comprising all of the most successful methods.
Generally speaking, these methods involve using the gradient of a cost function to find the parameters of a model that approximates some desired function.
We now turn to part , in which we step into theIII territory of research—methods that are designed to work with less training data or to perform a greater variety of tasks, where the challenges are more difficult and not as close to being solved as the situations we have described so far.
                                     Part III  Deep Learning Research  486    This part of the book describes the more ambitious and advanced approaches to deep learning, currently pursued by the research community.
In the previous parts of the book, we have shown how to solve supervised learning problems—how to learn to map one vector to another, given enough examples of the mapping.
We may wish to generate new examples, or determine how likely some point is, or handle missing values and take advantage of a large set of unlabeled examples or examples  from related tasks.
A shortcoming of the current state of the art for industrial applications is that our learning algorithms require large amounts of supervised data to achieve good accuracy.
In this part of the book, we discuss some of the speculative approaches to reducing the amount of labeled data necessary for existing models to work well and be applicable across a broader range of tasks.
Many deep learning algorithms have been designed to tackle unsupervised learning problems, but none have truly solved the problem in the same way that deep learning has largely solved the supervised learning problem for a wide variety of tasks.
In this part of the book, we describe the existing approaches to unsupervised  learning and some of the popular thought about how we can make progress in this field.
A central cause of the difficulties with unsupervised learning is the high di- mensionality of the random variables being modeled.
The statistical challenge regards generalization: the number of configurations we may want to distinguish can grow exponentially with the number of dimensions of interest, and this quickly becomes much larger than the number of examples one can possibly have (or use with bounded computational resources).
The computational challenge associated with high-dimensional distributions arises because many algorithms for learning or using a trained model (especially those based on estimating an explicit  probability function) involve intractable computations that grow exponentially with the number of dimensions.
With probabilistic models, this computational challenge arises from the need to perform intractable inference or simply from the need to normalize the distribution.
It regards19 the question of guessing the probable values of some variables a, given other variables b, with respect to a model that captures the joint distribution over  487    a, b and c. In order to even compute such conditional probabilities one needs to sum over the values of the variables c, as well as compute a normalization constant which sums over the values of a and c.  • Intractable normalization constants (the partition function): the partition function is discussed mostly in chapter .
Normalizing constants of proba-18 bility functions come up in inference (above) as well as in learning.
Unfortunately, learning such a model often requires computing the gradient of the loga- rithm of the partition function with respect to the model parameters.
Monte Carlo Markov chain (MCMC) methods (chapter ) are of-17 ten used to deal with the partition function (computing it or its gradient).
Unfortunately, MCMC methods suffer when the modes of the model distribu- tion are numerous and well-separated, especially in high-dimensional spaces (section ).17.5  One way to confront these intractable computations is to approximate them, and many approaches have been proposed as discussed in this third part of the book.
Another interesting way, also discussed here, would be to avoid these intractable computations altogether by design, and methods that do not require such computations are thus very appealing.
A wide variety of contemporary  approaches to generative modeling are discussed in chapter .20  Part is the most important for a researcher—someone who wants to un-III derstand the breadth of perspectives that have been brought to the field of deep learning, and push the field forward towards true artificial intelligence.
                                     Chapter 13  Linear Factor Models  Many of the research frontiers in deep learning involve building a probabilistic model of the input, pmodel(x).
Such a model can, in principle, use probabilistic inference to predict any of the variables in its environment given any of the other variables.
Distributed representations based on latent variables can obtain all of the advantages of representation learning that we have seen with deep feedforward and recurrent networks.
In this chapter, we describe some of the simplest probabilistic models with latent variables: linear factor models.
These models are sometimes used as building blocks of mixture models (Hinton 1995a Ghahramani and Hinton 1996et al., ; , ; Roweis 2002 Tang 2012et al., ) or larger, deep probabilistic models ( et al., ).
They also show many of the basic approaches necessary to build generative models that the more advanced deep models will extend further.
A linear factor model is defined by the use of a stochastic, linear decoder  function that generates by adding noise to a linear transformation of .x h  These models are interesting because they allow us to discover explanatory factors that have a simple joint distribution.
The simplicity of using a linear decoder made these models some of the first latent variable models to be extensively studied.
First, we sample the explanatory factors from a distributionh  h ∼ p ,( )h (13.1)  where p(h) is a factorial distribution, with p(h) =  i p(hi), so that it is easy to  489    CHAPTER 13.
Next we sample the real-valued observable variables given the factors:  x Wh b= + + noise (13.2)  where the noise is typically Gaussian and diagonal (independent across dimensions).
This is illustrated in figure .13.1  h1h1 h2h2 h3h3  x1x1 x2x2 x3x3  x h n ois ex h n ois e=W + +b=W + +b  Figure 13.1: The directed graphical model describing the linear factor model family, in which we assume that an observed data vector x is obtained by a linear combination of independent latent factors h, plus some noise.
Different models, such as probabilistic PCA, factor analysis or ICA, make different choices about the form of the noise and of the prior .p( )h  13.1 Probabilistic PCA and Factor Analysis  Probabilistic PCA (principal components analysis), factor analysis and other linear factor models are special cases of the above equations ( and ) and only13.1 13.2 differ in the choices made for the noise distribution and the model’s prior over latent variables before observing .h x  In factor analysis ( , ; , ), the latent variableBartholomew 1987 Basilevsky 1994 prior is just the unit variance Gaussian  h 0∼ N ( ;h , I) (13.3)  while the observed variables xi are assumed to be conditionally independent,  given h. Specifically, the noise is assumed to be drawn from a diagonal co- variance Gaussian distribution, with covariance matrix ψ = diag(σ2), with σ2 = [σ21, σ  2 2, .
The role of the latent variables is thus to capture the dependencies between the different observed variables xi.
Indeed, it can easily be shown that x is just a multivariate normal random variable, with  x ∼ N ( ;x b WW,  + )ψ .
LINEAR FACTOR MODELS  In order to cast PCA in a probabilistic framework, we can make a slight modification to the factor analysis model, making the conditional variances σ2i equal to each other.
This yields the conditional distribution  x ∼ N ( ;x b WW,  + σ2I) (13.5)  or equivalently x h z= W + +b σ (13.6)  where z ∼ N (z ;0, I) is Gaussian noise.
( ) then show anTipping and Bishop 1999 iterative EM algorithm for estimating the parameters andW σ2.
This probabilistic PCA model takes advantage of the observation that most variations in the data can be captured by the latent variables h, up to some small residual reconstruction error σ2.
In that case, the conditional expected value of h given x becomes an orthogonal projection of x b− onto the space spanned by the columns of , like in PCA.d W  As σ → 0, the density model defined by probabilistic PCA becomes very sharp around these d dimensions spanned by the columns of W .
This can make the  model assign very low likelihood to the data if the data does not actually cluster near a hyperplane.
13.2 Independent Component Analysis (ICA)  Independent component analysis (ICA) is among the oldest representation learning algorithms ( , ; , ;  , ;Herault and Ans 1984 Jutten and Herault 1991 Comon 1994 Hyvärinen 1999 Hyvärinen 2001a Hinton 2001 Teh 2003, ; et al., ; et al., ; et al., ).
It is an approach to modeling linear factors that seeks to separate an observed signal into many underlying signals that are scaled and added together to form the observed data.
These signals are intended to be fully independent, rather than merely decorrelated from each other.1  Many different specific methodologies are referred to as ICA.
The variant that is most similar to the other generative models we have described here is a variant ( , ) that trains a fully parametric generative model.
We can perform a  1 See section for a discussion of the difference between uncorrelated variables and indepen-3.8  dent variables.
The motivation for this approach is that by choosing p(h) to be independent, we can recover underlying factors that are as close as possible to independent.
This is commonly used, not to capture high-level abstract causal factors, but to recover low-level signals that have been mixed together.
In this setting, each training example is one moment in time, each xi is one sensor’s observation of the mixed signals, and each hi is one estimate of one of the original signals.
If we have n different microphones placed in different locations, ICA can detect the changes in the volume between each speaker as heard by each microphone, and separate the signals so that each h i contains only one person speaking clearly.
This is commonly used in neuroscience for electroencephalography, a technology for recording electrical signals originating in the brain.
Many electrode sensors placed on the subject’s head are used to measure many electrical signals coming from the body.
The experimenter is typically only interested in signals from the brain, but signals from the subject’s heart and eyes are strong enough to confound measurements taken at the subject’s scalp.
The signals arrive at the electrodes mixed together, so ICA is necessary to separate the electrical signature of the heart from the signals  originating in the brain, and to separate signals in different brain regions from each other.
Most do not use the maximum likelihood criterion, but instead aim to make the elements of h =W−1x independent from each other.
Equation requires taking the determinant of3.47 W , which can be an expensive and numerically unstable operation.
Some variants of ICA avoid this problematic operation by constraining to be orthogonal.W  All variants of ICA require that p(h) be non-Gaussian.
This is because if p(h) is an independent prior with Gaussian components, then W is not identifiable.
This is very different from other linear factor models like probabilistic PCA and factor analysis, that often require p(h) to be Gaussian in order to make many operations on the model have closed form solutions.
In the maximum likelihood approach where the user explicitly specifies the distribution, a typical choice is to use p(hi) =  d dhi σ(hi).
Typical choices of these non-Gaussian distributions have larger peaks near 0 than does the Gaussian distribution, so we can also see most implementations of ICA as learning sparse features.
LINEAR FACTOR MODELS  Many variants of ICA are not generative models in the sense that we use the phrase.
Many variants of ICA only know how to transform between x and h, but do not have any way of representing p(h), and thus do not impose a distribution over p(x).
For example, many ICA variants aim to increase the sample kurtosis of h =W−1x, because high kurtosis indicates that p(h) is non-Gaussian, but this is accomplished without explicitly representing p(h).
This is because ICA is more often used as an analysis tool for separating signals, rather than for generating  data or estimating its density.
Just as PCA can be generalized to the nonlinear autoencoders described in chapter , ICA can be generalized to a nonlinear generative model, in which14 we use a nonlinear function f to generate the observed data.
See Hyvärinen and Pajunen 1999( ) for the initial work on nonlinear ICA and its successful use with ensemble learning by ( ) and ( ).Roberts and Everson 2001 Lappalainen et al.
2000 Another nonlinear extension of ICA is the approach of nonlinear independent components estimation, or NICE ( , ), which stacks a seriesDinh et al.
2014 of invertible transformations (encoder stages) that have the property that the determinant of the Jacobian of each transformation can be computed efficiently.
This makes it possible to compute the likelihood exactly and, like ICA, attempts  to transform the data into a space where it has a factorized marginal distribution, but is more likely to succeed thanks to the nonlinear encoder.
Because the encoder is associated with a decoder that is its perfect inverse, it is straightforward to generate samples from the model (by first sampling from p(h) and then applying the decoder).
Another generalization of ICA is to learn groups of features, with statistical dependence allowed within a group but discouraged between groups (Hyvärinen and Hoyer 1999 Hyvärinen 2001b, ; et al., ).
When the groups of related units are chosen to be non-overlapping, this is called independent subspace analysis.
It is also possible to assign spatial coordinates to each hidden unit and form overlapping groups of spatially neighboring units.
When applied to natural images, this topographic ICA approach learns  Gabor filters, such that neighboring features have similar orientation, location or frequency.
Many different phase offsets of similar Gabor functions occur within each region, so that pooling over small regions yields translation invariance.
13.3 Slow Feature Analysis  Slow feature analysis (SFA) is a linear factor model that uses information from  493    CHAPTER 13.
LINEAR FACTOR MODELS  time signals to learn invariant features ( , ).Wiskott and Sejnowski 2002  Slow feature analysis is motivated by a general principle called the slowness principle.
The idea is that the important characteristics of scenes change very slowly compared to the individual measurements that make up a description of a scene.
If a zebra moves from left to right across the image, an individual pixel will rapidly change from black to white and back again as the zebra’s stripes pass over the pixel.
By comparison, the feature indicating whether a zebra is in the  image will not change at all, and the feature describing the zebra’s position will change slowly.
The slowness principle predates slow feature analysis and has been applied to a wide variety of models ( , ; , ; , ;Hinton 1989 Földiák 1989 Mobahi et al.
In general, we can apply the slowness principle to any differentiable model trained with gradient descent.
The slowness principle may be introduced by adding a term to the cost function of the form  λ   t  L f( (x( +1)t ) (, f x( )t )) (13.7)  where λ is a hyperparameter determining the strength of the slowness regularization term, t is the index into a time sequence of examples, f is the feature extractor to be regularized, and L is a loss function measuring the distance between f(x( )t ) and f(x( +1)t ).
A common choice for is the mean squared difference.L  Slow feature analysis is a particularly efficient application of the slowness principle.
It is efficient because it is applied to a linear feature extractor, and can thus be trained in closed form.
Like some variants of ICA, SFA is not quite a generative model per se, in the sense that it defines a linear map between input space and feature space but does not define a prior over feature space and thus does not impose a distribution on input space.p( )x  The SFA algorithm (Wiskott and Sejnowski 2002, ) consists of defining f (x;θ) to be a linear transformation, and solving the optimization problem  min θ  Et( (f x ( +1)t )i − f(x( )t ) i)2 (13.8)  subject to the constraints Etf(x  ( )t )i = 0 (13.9)  and Et[ (f x  ( )t )2i ] = 1.
LINEAR FACTOR MODELS  The constraint that the learned feature have zero mean is necessary to make the problem have a unique solution; otherwise we could add a constant to all feature values and obtain a different solution with equal value of the slowness objective.
The constraint that the features have unit variance is necessary to prevent the pathological solution where all features collapse to .
To learn multiple features, we must also add the constraint  ∀i < j,Et [ (f x( )t ) if(x( )t )j] = 0.
One could imagine using other mechanisms, such as minimizing reconstruction error, to force the features to diversify, but this decorrelation mechanism admits a simple solution due to the linearity of SFA features.
SFA is typically used to learn nonlinear features by applying a nonlinear basis expansion to x before running SFA.
For example, it is common to replace x by the quadratic basis expansion, a vector containing elements x ixj for all i and j.
Linear SFA modules may then be composed to learn deep nonlinear slow feature extractors by repeatedly learning a linear SFA feature extractor, applying a nonlinear basis expansion to its output, and then learning another linear SFA feature extractor on  top of that expansion.
When trained on small spatial patches of videos of natural scenes, SFA with quadratic basis expansions learns features that share many characteristics with those of complex cells in V1 cortex (Berkes and Wiskott 2005, ).
When trained on videos of random motion within 3-D computer rendered environments, deep SFA learns features that share many characteristics with the features represented by neurons in rat brains that are used for navigation (Franzius 2007et al., ).
A major advantage of SFA is that it is possibly to theoretically predict which features SFA will learn, even in the deep, nonlinear setting.
To make such theoretical predictions, one must know about the dynamics of the environment in terms of  configuration space (e.g., in the case of random motion in the 3-D rendered environment, the theoretical analysis proceeds from knowledge of the probability distribution over position and velocity of the camera).
Given the knowledge of how the underlying factors actually change, it is possible to analytically solve for the optimal functions expressing these factors.
In practice, experiments with deep SFA applied to simulated data seem to recover the theoretically predicted functions.
LINEAR FACTOR MODELS  This is in comparison to other learning algorithms where the cost function depends highly on specific pixel values, making it much more difficult to determine what features the model will learn.
Deep SFA has also been used to learn features for object recognition and pose estimation (Franzius 2008et al., ).
We speculate that perhaps the slowness prior is too strong, and that, rather than imposing a prior that features should be approximately constant,  it would be better to impose a prior that features should be easy to predict from one time step to the next.
The position of an object is a useful feature regardless of whether the object’s velocity is high or low, but the slowness principle encourages the model to ignore the position of objects that have high velocity.
13.4 Sparse Coding  Sparse coding ( , ) is a linear factor model that hasOlshausen and Field 1996 been heavily studied as an unsupervised feature learning and feature extraction  mechanism.
Strictly speaking, the term “sparse coding” refers to the process of inferring the value of h in this model, while “sparse modeling” refers to the process of designing and learning the model, but the term “sparse coding” is often used to refer to both.
Like most other linear factor models, it uses a linear decoder plus noise to obtain reconstructions of x, as specified in equation .
More specifically, sparse13.2 coding models typically assume that the linear factors have Gaussian noise with isotropic precision :β  p ,( ) = ( ; +x h| N x Wh b 1 β I).
(13.12)  The distribution p(h) is chosen to be one with sharp peaks near 0 (Olshausen and Field 1996, ).
For example, the Laplace prior parametrized in terms of the sparsity penalty coefficient is given byλ  p h( i) = Laplace(hi; 0, 2  λ ) =  λ  4 e−  1 2 λ h| i | (13.13)  and the Student- prior byt  p h( i) ∝ 1  (1 + h2i ν )  ν+1 2  .
Instead, the training alternates between encoding the data and training the decoder to better reconstruct the data given the encoding.
This approach will be justified further as a principled approximation to maximum likelihood later, in section .19.3  For models such as PCA, we have seen the use of a parametric encoder function that predicts h and consists only of multiplication by a weight matrix.
Instead, the encoder is an optimization algorithm, that solves an optimization problem in which we seek  the single most likely code value:  h∗ = ( ) = arg maxf x h  p .
( )h x| (13.15)  When combined with equation and equation , this yields the following13.13 13.12 optimization problem:  arg max h  p( )h x| (13.16)  = arg max h  log ( )p h x| (13.17)  = arg min h  λ|| ||h 1 + β|| − ||x Wh 22, (13.18)  where we have dropped terms not depending on h and divided by positive scaling factors to simplify the equation.
Due to the imposition of an L1 norm on h, this procedure will yield a sparse h∗ (See section ).7.1.2  To train the model rather than just perform inference, we alternate between minimization with respect to h and minimization with respect to W .
Typically it is set to 1 because its  role in this optimization problem is shared with λ and there is no need for both hyperparameters.
To learn β, these terms must be included, or β will collapse to .0  Not all approaches to sparse coding explicitly build a p(h) and a p(x h| ).
Often we are just interested in learning a dictionary of features with activation values that will often be zero when extracted using this inference procedure.
If we sample h from a Laplace prior, it is in fact a zero probability event for an element of h to actually be zero.
LINEAR FACTOR MODELS  inference in a different model family, the spike and slab sparse coding model, for which samples from the prior usually contain true zeros.
The sparse coding approach combined with the use of the non-parametric encoder can in principle minimize the combination of reconstruction error and log-prior better than any specific parametric encoder.
For unusual x that do not resemble the training data, a learned, parametric encoder may fail to find an h that results  in accurate reconstruction or a sparse code.
For the vast majority of formulations of sparse coding models, where the inference problem is convex, the optimization procedure will always find the optimal code (unless degenerate cases such as replicated weight vectors occur).
Obviously, the sparsity and reconstruction costs can still rise on unfamiliar points, but this is due to generalization error in the decoder weights, rather than generalization error in the encoder.
The lack of generalization error in sparse coding’s optimization-based encoding process may result in better generalization when sparse coding is used as a feature extractor for a classifier than when a parametric function is used to predict the code.
Coates and Ng 2011( ) demonstrated that sparse coding features generalize better for object recognition tasks than the features of a related model based on a parametric  encoder, the linear-sigmoid autoencoder.
( ) showed that a variant of sparse coding generalizes better than other feature2013d extractors in the regime where extremely few labels are available (twenty or fewer labels per class).
The primary disadvantage of the non-parametric encoder is that it requires greater time to compute h given x because the non-parametric approach requires running an iterative algorithm.
The parametric autoencoder approach, developed in chapter  , uses only a fixed number of layers, often only one.
Another14 disadvantage is that it is not straight-forward to back-propagate through the non-parametric encoder, which makes it difficult to pretrain a sparse coding model with an unsupervised criterion and then fine-tune it using a supervised criterion.
Modified versions of sparse coding that permit approximate derivatives do exist  but are not widely used ( , ).Bagnell and Bradley 2009  Sparse coding, like other linear factor models, often produces poor samples, as shown in figure .
This happens even when the model is able to reconstruct13.2 the data well and provide useful features for a classifier.
The reason is that each individual feature may be learned well, but the factorial prior on the hidden code results in the model including random subsets of all of the features in each generated sample.
LINEAR FACTOR MODELS  Figure 13.2: Example samples and weights from a spike and slab sparse coding model trained on the MNIST dataset.
The(Right) weight vectors of the model have learned to represent penstrokes and sometimes complete digits.
The problem is that the factorial prior over features results in random subsets of features being combined.
This motivates the development of generative models that have more powerful distributions over their latent codes.
factorial distribution on the deepest code layer, as well as the development of more sophisticated shallow models.
13.5 Manifold Interpretation of PCA  Linear factor models including PCA and factor analysis can be interpreted as learning a manifold ( , ).
1997 defining a thin pancake-shaped region of high probability—a Gaussian distribution that is very narrow along some axes, just as a pancake is very flat along its vertical  axis, but is elongated along other axes, just as a pancake is wide along its horizontal axes.
PCA can be interpreted as aligning this13.3 pancake with a linear manifold in a higher-dimensional space.
This interpretation applies not just to traditional PCA but also to any linear autoencoder that learns matricesW and V with the goal of making the reconstruction of x lie as close to x as possible,  Let the encoder be h x W= (f ) = ( )x µ− .
LINEAR FACTOR MODELS  The encoder computes a low-dimensional representation of h. With the autoencoder view, we have a decoder computing the reconstruction  x̂ h b V h= (g ) = + .
(13.20)  Figure 13.3: Flat Gaussian capturing probability concentration near a low-dimensional manifold.
The figure shows the upper half of the “pancake” above the “manifold plane” which goes through its middle.
The variance in the direction orthogonal to the manifold is very small (arrow pointing out of plane) and can be considered like “noise,” while the other variances are large (arrows in the plane) and correspond to “signal,” and a coordinate system for the reduced-dimension data.
The choices of linear encoder and decoder that minimize reconstruction error  E[|| −x x̂||2] (13.21)  correspond to V =W , µ = b = E[x] and the columns ofW form an orthonormal basis which spans the same subspace as the principal eigenvectors of the covariance matrix  C x µ x µ= [(E − )( − )].
(13.22) In the case of PCA, the columns of W are these eigenvectors, ordered by the magnitude of the corresponding eigenvalues (which are all real and non-negative).
One can also show that eigenvalue λi of C corresponds to the variance of x in the direction of eigenvector v( )i .
LINEAR FACTOR MODELS  optimal reconstruction error (choosing , , and as above) isµ b V W  min [E || −x x̂||2] = D  i d= +1  λi .
(13.23)  Hence, if the covariance has rank d , the eigenvalues λd+1 to λD are 0 and recon- struction error is 0.
Furthermore, one can also show that the above solution can be obtained by maximizing the variances of the elements of h, under orthogonal W , instead of minimizing reconstruction error.
Linear factor models are some of the simplest generative models and some of the simplest models that learn a representation of data.
Much as linear classifiers and linear regression models may be extended to deep feedforward networks, these linear factor models may be extended to autoencoder networks and deep probabilistic  models that perform the same tasks but with a much more powerful and flexible model family.
                                     Deep Learning  Ian Goodfellow Yoshua Bengio  Aaron Courville    Contents  Website vii  Acknowledgments viii  Notation xi  1 Introduction 1 1.1 Who Should Read This Book?
11  I Applied Math and Machine Learning Basics 29  2 Linear Algebra 31 2.1 Scalars, Vectors, Matrices and Tensors .
155  II Deep Networks: Modern Practices 166  6 Deep Feedforward Networks 168 6.1 Example: Learning XOR .
268 7.14 Tangent Distance, Tangent Prop, and Manifold Tangent Classifier 270  8 Optimization for Training Deep Models 274 8.1 How Learning Differs from Pure Optimization .
478  III Deep Learning Research 486  13 Linear Factor Models 489 13.1 Probabilistic PCA and Factor Analysis .
554  16 Structured Probabilistic Models for Deep Learning 558 16.1 The Challenge of Unstructured Modeling .
584 16.7 The Deep Learning Approach to Structured Probabilistic Models 585  17 Monte Carlo Methods 590 17.1 Sampling and Monte Carlo Methods .
720  Bibliography 721  Index 777  vi    Website  www.deeplearningbook.org  This book is accompanied by the above website.
The website provides a variety of supplementary material, including exercises, lecture slides, corrections of mistakes, and other resources that should be useful to both readers and instructors.
                                     Chapter 14  Autoencoders  An autoencoder is a neural network that is trained to attempt to copy its input to its output.
The network may be viewed as consisting of two parts: an encoder function h = f (x) and a decoder that produces a reconstruction r = g(h).
If an autoencoder succeeds in simply14.1 learning to set g(f (x)) = x everywhere, then it is not especially useful.
Usually they are restricted in ways that allow them to copy only approximately, and to copy only input that resembles the training data.
Because the model is forced to prioritize which aspects of the input should be copied, it often learns useful properties of the data.
Modern autoencoders have generalized the idea of an encoder and a de- coder beyond deterministic functions to stochastic mappings pencoder(h x| ) and pdecoder( )x h| .
The idea of autoencoders has been part of the historical landscape of neural  networks for decades ( , ; , ; ,LeCun 1987 Bourlard and Kamp 1988 Hinton and Zemel 1994).
Recently, theoretical connections between autoencoders and latent variable models have brought autoencoders to the forefront of generative modeling, as we will see in chapter .
Autoencoders may be thought of as being20 a special case of feedforward networks, and may be trained with all of the same techniques, typically minibatch gradient descent following gradients computed by back-propagation.
Unlike general feedforward networks, autoencoders may also be trained using recirculation (Hinton and McClelland 1988, ), a learning algorithm based on comparing the activations of the network on the original input  502    CHAPTER 14.
Recirculation is regarded as more biologically plausible than back-propagation, but is rarely used for machine learning applications.
xx rr  hh  f g  Figure 14.1: The general structure of an autoencoder, mapping an input to an outputx (called reconstruction) r through an internal representation or code h. The autoencoder has two components: the encoder f (mapping x to h) and the decoder g (mapping h to r).
14.1 Undercomplete Autoencoders  Copying the input to the output may sound useless, but we are typically not interested in the output of the decoder.
Instead, we hope that training the autoencoder to perform the input copying task will result in h taking on useful properties.
One way to obtain useful features from the autoencoder is to constrain h to have smaller dimension than x.
Learning an undercomplete  representation forces the autoencoder to capture the most salient features of the training data.
The learning process is described simply as minimizing a loss function  L , g f(x ( ( )))x (14.1)  where L is a loss function penalizing g(f (x)) for being dissimilar from x, such as the mean squared error.
When the decoder is linear and L is the mean squared error, an undercomplete autoencoder learns to span the same subspace as PCA.
In this case, an autoencoder trained to perform the copying task has learned the principal subspace of the training data as a side-effect.
Autoencoders with nonlinear encoder functions f and nonlinear decoder func- tions g can thus learn a more powerful nonlinear generalization of PCA.
AUTOENCODERS  nately, if the encoder and decoder are allowed too much capacity, the autoencoder can learn to perform the copying task without extracting useful information about the distribution of the data.
Theoretically, one could imagine that an autoencoder with a one-dimensional code but a very powerful nonlinear encoder could learn to represent each training example x( )i with the code i.
The decoder could learn to map these integer indices back to the values of specific training examples.
This specific scenario does not occur in practice, but it illustrates clearly that an autoen- coder trained to perform the copying task can fail to learn anything useful about  the dataset if the capacity of the autoencoder is allowed to become too great.
14.2 Regularized Autoencoders  Undercomplete autoencoders, with code dimension less than the input dimension, can learn the most salient features of the data distribution.
We have seen that these autoencoders fail to learn anything useful if the encoder and decoder are given too much capacity.
A similar problem occurs if the hidden code is allowed to have dimension equal to the input, and in the overcomplete case in which the hidden code has  dimension greater than the input.
In these cases, even a linear encoder and linear decoder can learn to copy the input to the output without learning anything useful about the data distribution.
Ideally, one could train any architecture of autoencoder successfully, choosing the code dimension and the capacity of the encoder and decoder based on the complexity of distribution to be modeled.
Rather than limiting the model capacity by keeping the encoder and decoder shallow and the code size small, regularized autoencoders use a loss function that encourages the model to have other properties besides the ability to copy its input to its output.
These other properties include sparsity of the representation, smallness of the derivative of the representation, and robustness to noise or to missing inputs.
A regularized autoencoder can be nonlinear and  overcomplete but still learn something useful about the data distribution even if the model capacity is great enough to learn a trivial identity function.
In addition to the methods described here which are most naturally interpreted as regularized autoencoders, nearly any generative model with latent variables and equipped with an inference procedure (for computing latent representations given input) may be viewed as a particular form of autoencoder.
Two generative modeling approaches that emphasize this connection with autoencoders are the descendants of the Helmholtz machine ( , ), such as the variationalHinton et al.
AUTOENCODERS  autoencoder (section ) and the generative stochastic networks (section ).20.10.3 20.12 These models naturally learn high-capacity, overcomplete encodings of the input and do not require regularization for these encodings to be useful.
Their encodings are naturally useful because the models were trained to approximately maximize the probability of the training data rather than to copy the input to the output.
14.2.1 Sparse Autoencoders  A sparse autoencoder is simply an autoencoder whose training criterion involves a sparsity penalty Ω(h) on the code layer h, in addition to the reconstruction error:  L , g f(x ( ( ))) + Ω( )x h (14.2)  where g(h) is the decoder output and typically we have h = f (x), the encoder output.
An autoencoder that has been regularized to be sparse must respond to unique statistical features of the dataset it has been trained on, rather  than simply acting as an identity function.
In this way, training to perform the copying task with a sparsity penalty can yield a model that has learned useful features as a byproduct.
We can think of the penalty Ω(h) simply as a regularizer term added to a feedforward network whose primary task is to copy the input to the output (unsupervised learning objective) and possibly also perform some supervised task (with a supervised learning objective) that depends on these sparse features.
Unlike other regularizers such as weight decay, there is not a straightforward Bayesian interpretation to this regularizer.
As described in section , training5.6.1 with weight decay and other regularization penalties can be interpreted as a MAP approximation to Bayesian inference, with the added regularizing penalty  corresponding to a prior probability distribution over the model parameters.
In this view, regularized maximum likelihood corresponds to maximizing p(θ x| ), which is equivalent to maximizing log p(x θ| ) + log p(θ).
The log p(x θ| ) term is the usual data log-likelihood term and the log p(θ) term, the log-prior over parameters, incorporates the preference over particular values of θ.
Regularized autoencoders defy such an interpretation5.6 because the regularizer depends on the data and is therefore by definition not a prior in the formal sense of the word.
We can still think of these regularization terms as implicitly expressing a preference over functions.
Rather than thinking of the sparsity penalty as a regularizer for the copying task, we can think of the entire sparse autoencoder framework as approximating  505    CHAPTER 14.
Suppose we have a model with visible variables x and latent variables h, with an explicit joint distribution pmodel(x h, ) = pmodel(h)pmodel(x h| ).
We refer to pmodel(h) as the model’s prior distribution over the latent variables, representing the model’s beliefs prior to seeing x.
This is different from the way we have previously used the word “prior,” to refer to the distribution p(θ) encoding our beliefs about the model’s parameters before we have seen the training data.
(14.3)  We can think of the autoencoder as approximating this sum with a point estimate for just one highly likely value for h. This is similar to the sparse coding generative model (section ), but with13.4 h being the output of the parametric encoder rather than the result of an optimization that infers the most likely h. From this point of view, with this chosen , we are maximizingh  log pmodel( ) = logh x, pmodel( ) + logh pmodel ( )x h| .
For example, the Laplace prior,  pmodel(hi) = λ  2 e− |λ hi|, (14.5)  corresponds to an absolute value sparsity penalty.
Expressing the log-prior as an absolute value penalty, we obtain  Ω( ) = h λ   i  |hi | (14.6)  − log pmodel( ) =h   i   λ h| i| − log  λ  2   = Ω( ) + consth (14.7)  where the constant term depends only on λ and not h. We typically treat λ as a hyperparameter and discard the constant term since it does not affect the parameter learning.
From this point of view of sparsity as resulting from the effect of pmodel(h) on approximate maximum likelihood learning, the sparsity penalty is not a regularization term at all.
This view provides a different motivation for training an autoencoder: it is a way of approximately training a generative model.
AUTOENCODERS  why the features learned by the autoencoder are useful: they describe the latent variables that explain the input.
2007a 2008 various forms of sparsity and proposed a connection between the sparsity penalty and the logZ term that arises when applying maximum likelihood to an undirected probabilistic model p(x) = 1Z p̃(x).
The idea is that minimizing logZ prevents a probabilistic model from having high probability everywhere, and imposing sparsity on an autoencoder prevents the autoencoder from having low reconstruction  error everywhere.
In this case, the connection is on the level of an intuitive understanding of a general mechanism rather than a mathematical correspondence.
The interpretation of the sparsity penalty as corresponding to log pmodel(h) in a directed model pmodel( )h pmodel( )x h| is more mathematically straightforward.
With a prior that actually pushes the representations to zero (like the absolute value penalty), one can thus indirectly control the average number of zeros in the representation.
14.2.2 Denoising Autoencoders  Rather than adding a penalty to the cost function, we can obtain an autoencoderΩ  that learns something useful by changing the reconstruction error term of the cost function.
Traditionally, autoencoders minimize some function  L , g f(x ( ( )))x (14.8)  where L is a loss function penalizing g(f (x)) for being dissimilar from x, such as the L2 norm of their difference.
A or DAE instead minimizesdenoising autoencoder  L , g f(x ( (x̃))), (14.9)  where x̃ is a copy of x that has been corrupted by some form of noise.
Denoising training forces f and g to implicitly learn the structure of pdata (x), as shown by  ( ) and ( ).
AUTOENCODERS  autoencoders thus provide yet another example of how useful properties can emerge as a byproduct of minimizing reconstruction error.
They are also an example of how overcomplete, high-capacity models may be used as autoencoders so long as care is taken to prevent them from learning the identity function.
Denoising autoencoders are presented in more detail in section .14.5  14.2.3 Regularizing by Penalizing Derivatives  Another strategy for regularizing an autoencoder is to use a penalty as in sparseΩ autoencoders,  L , g f , ,(x ( ( ))) + Ω(x h x) (14.10)  but with a different form of :Ω  Ω( ) = h x, λ   i  ||∇xhi||2.
(14.11)  This forces the model to learn a function that does not change much when x changes slightly.
Because this penalty is applied only at training examples, it forces the autoencoder to learn features that capture information about the training distribution.
This approach has theoretical connections to denoising autoencoders, manifold learning and probabilistic modeling.
The CAE is described in more detail  in section .14.7  14.3 Representational Power, Layer Size and Depth  Autoencoders are often trained with only a single layer encoder and a single layer decoder.
Moreover, the encoder is itself a feedforward network  as is the decoder, so each of these components of the autoencoder can individually benefit from depth.
One major advantage of non-trivial depth is that the universal approximator theorem guarantees that a feedforward neural network with at least one hidden layer can represent an approximation of any function (within a broad class) to an  508    CHAPTER 14.
This means that an autoencoder with a single hidden layer is able to represent the identity function along the domain of the data arbitrarily well.
This means that we are not able to enforce arbitrary constraints, such as that the code should be sparse.
A deep autoencoder, with at least one additional hidden layer inside the encoder itself, can approximate any mapping from input to code arbitrarily well, given enough hidden units.
Experimentally, deep autoencoders yield much better compression than corre- sponding shallow or linear autoencoders (Hinton and Salakhutdinov 2006, ).
A common strategy for training a deep autoencoder is to greedily pretrain the deep architecture by training a stack of shallow autoencoders, so we often encounter shallow autoencoders, even when the ultimate goal is to train a deep autoencoder.
The same loss functions and output unit types that can be used for traditional feedforward networks are also used for autoencoders.
As described in section , a general strategy for designing the output units6.2.2.4 and the loss function of a feedforward network is to define an output distribution p(y x| ) and minimize the negative log-likelihood − log p(y x| ).
Given a hidden code h, we may  think of the decoder as providing a conditional distribution pdecoder(x h| ).
As with traditional feedforward networks, we usually use linear output units to parametrize the mean of a Gaussian distribution if x is real-valued.
Similarly, binary x values correspond to a Bernoulli distribution whose parameters are given by a sigmoid output unit, discrete x values correspond to a softmax distribution, and so on.
AUTOENCODERS  Typically, the output variables are treated as being conditionally independent given h so that this probability distribution is inexpensive to evaluate, but some techniques such as mixture density outputs allow tractable modeling of outputs with correlations.
xx rr  hh  pencoder( )h x| pdecoder( )x h|  Figure 14.2: The structure of a stochastic autoencoder, in which both the encoder and the decoder are not simple functions but instead involve some noise injection, meaning that their output can be seen as sampled from a distribution, pencoder(h x| ) for the encoder and pdecoder( )x h| for the decoder.
To make a more radical departure from the feedforward networks we have seen previously, we can also generalize the notion of an encoding function f (x) to an encoding distribution pencoder( )h x| , as illustrated in figure .14.2  Any latent variable model pmodel ( )h x, defines a stochastic encoder  pencoder( ) = h x| pmodel( )h x| (14.12)  and a stochastic decoder  pdecoder( ) = x h| pmodel( )x h| .
(14.13)  In general, the encoder and decoder distributions are not necessarily conditional distributions compatible with a unique joint distribution pmodel(x h, ).
( ) showed that training the encoder and decoder as a denoising autoencoder2015 will tend to make them compatible asymptotically (with enough capacity and examples).
14.5 Denoising Autoencoders  The denoising autoencoder (DAE) is an autoencoder that receives a corrupted data point as input and is trained to predict the original, uncorrupted data point as its output.
We introduce a14.3 corruption process C(x̃ x| ) which represents a conditional distribution over  510    CHAPTER 14.
AUTOENCODERS  x̃̃x LL  hh  f g  xx  C(x̃ x| )  Figure 14.3: The computational graph of the cost function for a denoising autoencoder, which is trained to reconstruct the clean data point x from its corrupted version x̃.
This is accomplished by minimizing the loss L = − log pdecoder(x h| = f(x̃)), where x̃ is a corrupted version of the data example x, obtained through a given corruption process C(x̃ x| ).
Typically the distribution pdecoder is a factorial distribution whose mean parameters are emitted by a feedforward network .g  corrupted samples x̃, given a data sample x.
The autoencoder then learns a reconstruction distribution preconstruct(x | x̃) estimated from training pairs (x, x̃), as follows:  1.
Use (x, x̃) as a training example for estimating the autoencoder reconstruction distribution preconstruct(x | x̃) = pdecoder(x h| ) with h the output of encoder f(x̃) and pdecoder typically defined by a decoder .g( )h  Typically we can simply perform gradient-based approximate minimization (such as minibatch gradient descent) on the negative log-likelihood − log pdecoder(x h| ).
So long as the encoder is deterministic, the denoising autoencoder is a feedforward network and may be trained with exactly the same techniques as any other feedforward network.
We can therefore view the DAE as performing stochastic gradient descent on the following expectation:  − Ex∼p̂data ( )x Ex̃∼C(x̃|x) log pdecoder ( = (x h| f x̃)) (14.14)  where p̂data( )x is the training distribution.
AUTOENCODERS  x  x̃  g f◦  x̃  C(x̃ x| ) x  Figure 14.4: A denoising autoencoder is trained to map a corrupted data point x̃ back to the original data point x.
We illustrate training examples x as red crosses lying near a low-dimensional manifold illustrated with the bold black line.
A gray arrow demonstrates how one training example is transformed into one sample from this corruption process.
When the denoising autoencoder is trained to minimize the average of squared errors ||g(f(x̃)) − ||x 2, the reconstruction g (f (x̃)) estimates Ex,x̃∼pdata ( ) (x C x̃ x| )[x | x̃].
The vector g(f(x̃)) −x̃ points approximately towards the nearest point on the manifold, since g(f(x̃)) estimates the center of mass of the clean points x which could have given rise to x̃.
This vector field estimates the score ∇x log pdata (x) up to a multiplicative factor that is the average root mean square reconstruction error.
AUTOENCODERS  14.5.1 Estimating the Score  Score matching ( , ) is an alternative to maximum likelihood.
ItHyvärinen 2005  provides a consistent estimator of probability distributions based on encouraging the model to have the same score as the data distribution at every training point x.
For the present discussion18.4 regarding autoencoders, it is sufficient to understand that learning the gradient field of log pdata is one way to learn the structure of pdata itself.
A very important property of DAEs is that their training criterion (with conditionally Gaussian p(x h| )) makes the autoencoder learn a vector field (g(f(x)) − x) that estimates the score of the data distribution.
This is illustrated in figure .14.4  Denoising training of a specific kind of autoencoder (sigmoidal hidden units, linear reconstruction units) using Gaussian noise and mean squared error as the reconstruction cost is equivalent ( , ) to training a specific kindVincent 2011 of undirected probabilistic model called an RBM with Gaussian visible units.
This kind of model will be described in detail in section ; for the present20.5.1 discussion it suffices to know that it is a model that provides an explicit pmodel(x;θ).
When the RBM is trained using denoising score matching ( ,Kingma and LeCun 2010), its learning algorithm is equivalent to denoising training in the corresponding autoencoder.
With a fixed noise level, regularized score matching is not a consistent estimator; it instead recovers a blurred version of the distribution.
However, if the noise level is chosen to approach 0 when the number of examples approaches infinity, then consistency is recovered.
Denoising score matching is discussed in  more detail in section .18.5  Other connections between autoencoders and RBMs exist.
Score matching applied to RBMs yields a cost function that is identical to reconstruction error combined with a regularization term similar to the contractive penalty of the CAE (Swersky 2011 Bengio and Delalleau 2009et al., ).
( ) showed that an autoen- coder gradient provides an approximation to contrastive divergence training of RBMs.
For continuous-valued x, the denoising criterion with Gaussian corruption and reconstruction distribution yields an estimator of the score that is applicable to general encoder and decoder parametrizations ( , ).
ThisAlain and Bengio 2013 means a generic encoder-decoder architecture may be made to estimate the score  513    CHAPTER 14.
AUTOENCODERS  by training with the squared error criterion  ||g f( (x̃ x)) − ||2 (14.16) and corruption  C(x̃ = x̃ x| ) = (N x̃ x; = µ , σΣ = 2 I) (14.17) with noise variance σ2.
See figure for an illustration of how this works.14.5  Figure 14.5: Vector field learned by a denoising autoencoder around a 1-D curved manifold near which the data concentrates in a 2-D space.
Each arrow is proportional to the reconstruction minus input vector of the autoencoder and points towards higher probability according to the implicitly estimated probability distribution.
The vector field has zeros at both maxima of the estimated density function (on the data manifolds) and at minima of that density function.
For example, the spiral arm forms a one-dimensional manifold of local maxima that are connected to each other.
When the norm of reconstruction error (shown by the length of the arrows) is large, it means that probability can be significantly increased by moving in the direction of the arrow, and that is mostly the case in places of low probability.
Figure reproduced with permission from ( ).Alain and Bengio 2013  In general, there is no guarantee that the reconstruction g(f (x)) minus the input x corresponds to the gradient of any function, let alone to the score.
AUTOENCODERS  why the early results ( , ) are specialized to particular parametrizationsVincent 2011 where g (f (x)) − x may be obtained by taking the derivative of another function.
Kamyshanska and Memisevic 2015 Vincent 2011( ) generalized the results of ( ) by identifying a family of shallow autoencoders such that g(f (x)) − x corresponds to a score for all members of the family.
So far we have described only how the denoising autoencoder learns to represent a probability distribution.
More generally, one may want to use the autoencoder as a generative model and draw samples from this distribution.
This will be described  later, in section .20.11  14.5.1.1 Historical Perspective  The idea of using MLPs for denoising dates back to the work of ( )LeCun 1987  and ( ).
However, the name “denoising autoencoder” refers to a model that is intended not merely to learn to denoise its input but to learn a good internal representation as a side effect of learning to denoise.
The learned representation may then be used to pretrain a2008 2010 deeper unsupervised network or a supervised network.
Like sparse autoencoders, sparse coding, contractive autoencoders and other regularized autoencoders, the motivation for DAEs was to allow the learning of a very high-capacity encoder while preventing the encoder and decoder from learning a useless identity function.
Prior to the introduction of the modern DAE, Inayoshi and Kurita 2005( ) explored some of the same goals with some of the same methods.
Their approach  minimizes reconstruction error in addition to a supervised objective while injecting noise in the hidden layer of a supervised MLP, with the objective to improve generalization by introducing the reconstruction error and the injected noise.
However, their method was based on a linear encoder and could not learn function families as powerful as can the modern DAE.
14.6 Learning Manifolds with Autoencoders  Like many other machine learning algorithms, autoencoders exploit the idea that data concentrates around a low-dimensional manifold or a small set of such  manifolds, as described in section .
Some machine learning algorithms exploit5.11.3 this idea only insofar as that they learn a function that behaves correctly on the manifold but may have unusual behavior if given an input that is off the manifold.
At a point x on a d-dimensional manifold, the tangent plane is given by d basis vectors that span the local directions of variation allowed on the manifold.
As illustrated in figure , these local directions specify how one can change14.6 x infinitesimally while staying on the manifold.
Learning a representation h of a training example x such that x can be approximately recovered from h through a decoder.
The fact that x is drawn from the training data is crucial, because it means the autoencoder need not successfully reconstruct inputs that are not probable under the data generating distribution.
This can be an architec- tural constraint that limits the capacity of the autoencoder, or it can be a regularization term added to the reconstruction cost.
Clearly, neither force alone would be useful—copying the input to the output is not useful on its own, nor is ignoring the input.
Instead, the two forces together are useful because they force the hidden representation to capture information about the structure of the data generating distribution.
The important principle is that the autoencoder can afford to represent only the variations that are needed to reconstruct training examples.
If the data generating distribution concentrates near a low-dimensional manifold, this yields representations that implicitly capture  a local coordinate system for this manifold: only the variations tangent to the manifold around x need to correspond to changes in h= f(x).
Hence the encoder learns a mapping from the input space x to a representation space, a mapping that is only sensitive to changes along the manifold directions, but that is insensitive to changes orthogonal to the manifold.
A one-dimensional example is illustrated in figure , showing that, by making14.7 the reconstruction function insensitive to perturbations of the input around the data points, we cause the autoencoder to recover the manifold structure.
To understand why autoencoders are useful for manifold learning, it is in- structive to compare them to other approaches.
What is most commonly learned to characterize a manifold is a representation of the data points on (or near)  516    CHAPTER 14.
The amount of vertical translation defines a coordinate along a one-dimensional manifold that traces out a curved path through image space.
This tangent plane touches the manifold exactly at that point and is oriented parallel to the surface at that point.
We indicate an example tangent line at one point, with an image showing how this tangent direction appears in image space.
Gray pixels indicate pixels that do not change as we move along the tangent line, white pixels indicate pixels that brighten, and black pixels indicate pixels that darken.
1 0.  r x( )  Identity  Optimal reconstruction  Figure 14.7: If the autoencoder learns a reconstruction function that is invariant to small perturbations near the data points, it captures the manifold structure of the data.
The horizontal arrows at the bottom of the plot indicate the r(x) − x reconstruction direction vector at the base of the arrow, in input space, always pointing towards the nearest “manifold” (a single datapoint, in the 1-D case).
The denoising autoencoder explicitly tries to make the derivative of the reconstruction function r(x) small around the data points.
Although the derivative of r(x) is asked to be small around the data points, it can be large between the data points.
The space between the data points corresponds to the region between the manifolds, where the reconstruction function must have a large derivative in order to map corrupted points back onto the manifold.
It is typically given by a low-dimensional vector, with less dimensions than the “ambient” space of which the manifold is a low-dimensional subset.
Some algorithms (non-parametric manifold learning algorithms, discussed below) directly learn an embedding for each training example, while others learn a more general mapping, sometimes called an encoder, or representation function, that maps any point in the ambient space (the input space) to its embedding.
Manifold learning has mostly focused on unsupervised learning procedures that  attempt to capture these manifolds.
Most of the initial machine learning research on learning nonlinear manifolds has focused on non-parametric methods based on the nearest-neighbor graph .
These methods (Schölkopf et al., ;1998 Roweis and Saul 2000 Tenenbaum 2000 Brand 2003 Belkin, ; et al., ; , ;  518    CHAPTER 14.
AUTOENCODERS  Figure 14.8: Non-parametric manifold learning procedures build a nearest neighbor graph in which nodes represent training examples a directed edges indicate nearest neighbor relationships.
Various procedures can thus obtain the tangent plane associated with a neighborhood of the graph as well as a coordinate system that associates each training example with a real-valued vector position, or embedding.
So long as the number of examples is large enough to cover the curvature and twists of the manifold, these approaches work well.
and Niyogi 2003 Donoho and Grimes 2003 Weinberger and Saul 2004 Hinton, ; , ; , ; and Roweis 2003 van der Maaten and Hinton 2008, ; , ) associate each of nodes with a tangent plane that spans the directions of variations associated with the difference vectors between the example and its neighbors, as illustrated in figure .14.8  A global coordinate system can then be obtained through an optimization or solving a linear system.
Figure illustrates how a manifold can be tiled by a14.9 large number of locally linear Gaussian-like patches (or “pancakes,” because the Gaussians are flat in the tangent directions).
However, there is a fundamental difficulty with such local non-parametric approaches to manifold learning, raised in ( ): if theBengio and Monperrus 2005 manifolds are not very smooth (they have many peaks and troughs and twists),  one may need a very large number of training examples to cover each one of  519    CHAPTER 14.
AUTOENCODERS  Figure 14.9: If the tangent planes (see figure ) at each location are known, then they14.6 can be tiled to form a global coordinate system or a density function.
Each local patch can be thought of as a local Euclidean coordinate system or as a locally flat Gaussian, or “pancake,” with a very small variance in the directions orthogonal to the pancake and a very large variance in the directions defining the coordinate system on the pancake.
A mixture of these Gaussians provides an estimated density function, as in the manifold Parzen window algorithm ( , ) or its non-local neural-net basedVincent and Bengio 2003 variant ( , ).Bengio et al.
Indeed, these methods can only generalize the shape of the manifold by interpolating between neighboring examples.
Unfortunately, the manifolds involved in AI problems can  have very complicated structure that can be difficult to capture from only local interpolation.
If we watch just one coordinate within the input vector,14.6 xi, as the image is translated, we will observe that one coordinate encounters a peak or a trough in its value once for every peak or trough in brightness in the image.
In other words, the complexity of the patterns of brightness in an underlying image template drives the complexity of the manifolds that are generated by performing simple image transformations.
This motivates the use of distributed representations and deep learning for capturing manifold structure.
AUTOENCODERS  14.7 Contractive Autoencoders  The contractive autoencoder ( , , ) introduces an explicit regularizerRifai et al.
2011a b on the code h= f(x), encouraging the derivatives of f to be as small as possible:  Ω( ) = h λ   ∂f( )x  ∂x   2  F  .
(14.18)  The penalty Ω(h) is the squared Frobenius norm (sum of squared elements) of the Jacobian matrix of partial derivatives associated with the encoder function.
There is a connection between the denoising autoencoder and the contractive autoencoder: ( ) showed that in the limit of small GaussianAlain and Bengio 2013 input noise, the denoising reconstruction error is equivalent to a contractive penalty on the reconstruction function that maps x to r = g(f(x)).
In other words, denoising autoencoders make the reconstruction function resist small but finite-sized perturbations of the input, while contractive autoencoders make the feature extraction function resist infinitesimal perturbations of the input.
When  using the Jacobian-based contractive penalty to pretrain features f(x) for use with a classifier, the best classification accuracy usually results from applying the contractive penalty to f (x) rather than to g(f (x)).
A contractive penalty on f (x) also has close connections to score matching, as discussed in section .14.5.1  The name contractive arises from the way that the CAE warps space.
Specifi- cally, because the CAE is trained to resist perturbations of its input, it is encouraged to map a neighborhood of input points to a smaller neighborhood of output points.
To clarify, the CAE is contractive only locally—all perturbations of a training point x are mapped near to f(x).
Globally, two different points x and x may be mapped to f(x) and f(x ) points that are farther apart than the original points.
It is plausible that f be expanding in-between or far from the data manifolds (see for example what happens in the 1-D toy example of figure ).
When the14.7 Ω(h) penalty is applied to sigmoidal units, one easy way to shrink the Jacobian is to make the sigmoid units saturate to or .
This encourages the CAE to encode0 1 input points with extreme values of the sigmoid that may be interpreted as a binary code.
It also ensures that the CAE will spread its code values throughout most of the hypercube that its sigmoidal hidden units can span.
We can think of the Jacobian matrix J at a point x as approximating the nonlinear encoder f (x) as being a linear operator.
AUTOENCODERS  is said to be contractive if the norm of Jx remains less than or equal to for1 all unit-norm x.
We can think of the CAE as penalizing the Frobenius norm of the local linear approximation of f (x) at every training point x in order to encourage each of these local linear operator to become a contraction.
As described in section , regularized autoencoders learn manifolds by14.6 balancing two opposing forces.
The contractive penalty alone would encourage the CAE to learn features that are constant with respect tox.
The compromise between these two forces yields an autoencoder whose derivatives ∂f ( )x ∂x are mostly tiny.
Only a small number of hidden units, corresponding to a small number of directions in the input, may have significant derivatives.
Directions x with large Jx rapidly change h, so these are likely to be directions which approximate the tangent planes of the manifold.
However,1 some singular values remain above , because the reconstruction error penalty1  encourages the CAE to encode the directions with the most local variance.
The directions corresponding to the largest singular values are interpreted as the tangent directions that the contractive autoencoder has learned.
For example, a CAE applied to images should learn tangent vectors that show how the image changes as objects in the image gradually change pose, as shown in figure .
Visualizations14.6 of the experimentally obtained singular vectors do seem to correspond to meaningful transformations of the input image, as shown in figure .14.10  One practical issue with the CAE regularization criterion is that although it is cheap to compute in the case of a single hidden layer autoencoder, it becomes much more expensive in the case of deeper autoencoders.
( ) is to separately train a series of single-layer autoencoders, each trained to reconstruct the previous autoencoder’s hidden layer.
Because each layer was separately trained to be locally contractive, the deep autoencoder is contractive as well.
The result is not the same as what would be obtained by jointly training the entire architecture with a penalty on the Jacobian of the deep model, but it captures many of the desirable qualitative characteristics.
Another practical issue is that the contraction penalty can obtain useless results  522    CHAPTER 14.
AUTOENCODERS  Input point  Tangent vectors  Local PCA (no sharing across regions)  Contractive autoencoder  Figure 14.10: Illustration of tangent vectors of the manifold estimated by local PCA and by a contractive autoencoder.
The tangent vectors are estimated by the leading singular vectors of the Jacobian matrix ∂h∂x of the input-to-code mapping.
Although both local PCA and the CAE can capture local tangents, the CAE is able to form more accurate estimates from limited training data because it exploits parameter sharing across different locations that share a subset of active hidden units.
The CAE tangent directions typically correspond to moving or changing parts of the object (such as the head or legs).
For example, the encoder could consist of multiplying the input by a small constant  and the decoder could consist of dividing the code by .
As  approaches , the encoder drives the0 contractive penalty Ω(h) to approach without having learned anything about the0 distribution.
( ), this is prevented by tying the weights of2011a f and g. Both f and g are  standard neural network layers consisting of an affine transformation followed by an element-wise nonlinearity, so it is straightforward to set the weight matrix of g to be the transpose of the weight matrix of .f  14.8 Predictive Sparse Decomposition  Predictive sparse decomposition (PSD) is a model that is a hybrid of sparse coding and parametric autoencoders (Kavukcuoglu 2008et al., ).
PSD has been applied to unsupervised feature learning for object recognition in images and video (Kavukcuoglu 2009 2010 Jarrett 2009 Farabet 2011et al., , ; et al., ; et al., ), as well  as for audio ( , ).
(14.19)  Like in sparse coding, the training algorithm alternates between minimization with respect to h and minimization with respect to the model parameters.
Minimization with respect to h is fast because f(x) provides a good initial value of h and the cost function constrains h to remain near f (x) anyway.
Simple gradient descent can obtain reasonable values of in as few as ten steps.h  The training procedure used by PSD is different from first training a sparse  coding model and then training f(x) to predict the values of the sparse coding features.
The PSD training procedure regularizes the decoder to use parameters for which can infer good code values.f( )x  Predictive sparse coding is an example of learned approximate inference.
The tools presented in chapter19.5 19 make it clear that PSD can be interpreted as training a directed sparse coding probabilistic model by maximizing a lower bound on the log-likelihood of the model.
Because f is a differentiable parametric function, PSD models may be stacked and used to initialize a deep network to be trained with another criterion.
14.9 Applications of Autoencoders  Autoencoders have been successfully applied to dimensionality reduction and infor- mation retrieval tasks.
Dimensionality reduction was one of the first applications of representation learning and deep learning.
For example, Hinton and Salakhutdinov 2006( ) trained a stack of RBMs and then used their weights to initialize a deep autoencoder  with gradually smaller hidden layers, culminating in a bottleneck of 30 units.
The resulting code yielded less reconstruction error than PCA into 30 dimensions and the learned representation was qualitatively easier to interpret and relate to the underlying categories, with these categories manifesting as well-separated clusters.
AUTOENCODERS  Many forms of dimensionality reduction place semantically related examples near each other, as observed by Salakhutdinov and Hinton 2007b Torralba( ) and et al.
One task that benefits even more than usual from dimensionality reduction is information retrieval, the task of finding entries in a database that resemble a query entry.
This task derives the usual benefits from dimensionality reduction that other tasks do, but also derives the additional benefit that search can become  extremely efficient in certain kinds of low dimensional spaces.
Specifically, if we train the dimensionality reduction algorithm to produce a code that is low- dimensional and , then we can store all database entries in a hash tablebinary mapping binary code vectors to entries.
This hash table allows us to perform information retrieval by returning all database entries that have the same binary code as the query.
We can also search over slightly less similar entries very efficiently, just by flipping individual bits from the encoding of the query.
This approach to information retrieval via dimensionality reduction and binarization is called semantic hashing (Salakhutdinov and Hinton 2007b 2009b, , ), and has been applied to both textual input (Salakhutdinov and Hinton 2007b 2009b, , ) and images (Torralba 2008 Weiss 2008 Krizhevsky and Hinton 2011et al., ; et al., ; , ).
To produce binary codes for semantic hashing, one typically uses an encoding function with sigmoids on the final layer.
One trick that can accomplish this is simply to inject additive noise just before the sigmoid nonlinearity during training.
To fight that noise and preserve as much information as possible, the network must increase the magnitude of the inputs to the sigmoid function, until saturation occurs.
The idea of learning a hashing function has been further explored in several directions, including the idea of training the representations so as to optimize a loss more directly linked to the task of finding nearby examples in the hash table ( , ).Norouzi and Fleet 2011  525
                                     Chapter 15  Representation Learning  In this chapter, we first discuss what it means to learn representations and how the notion of representation can be useful to design deep architectures.
We discuss how learning algorithms share statistical strength across different tasks, including using information from unsupervised tasks to perform supervised tasks.
Shared  representations are useful to handle multiple modalities or domains, or to transfer learned knowledge to tasks for which few or no examples are given but a task representation exists.
Finally, we step back and argue about the reasons for the success of representation learning, starting with the theoretical advantages of distributed representations (Hinton 1986et al., ) and deep representations and ending with the more general idea of underlying assumptions about the data generating process, in particular about underlying causes of the observed data.
Many information processing tasks can be very easy or very difficult depending on how the information is represented.
This is a general principle applicable to daily life, computer science in general, and to machine learning.
The task  becomes considerably less straightforward if it is instead posed using the Roman numeral representation of the numbers.
Most modern people asked to divide CCX by VI would begin by converting the numbers to the Arabic numeral representation, permitting long division procedures that make use of the place value system.
More concretely, we can quantify the asymptotic runtime of various operations using appropriate or inappropriate representations.
For example, inserting a number into the correct position in a sorted list of numbers is an O(n) operation if the list is represented as a linked list, but only O(log n) if the list is represented as a red-black tree.
We can think of feedforward networks trained by supervised learning as per- forming a kind of representation learning.
Specifically, the last layer of the network is typically a linear classifier, such as a softmax regression classifier.
Training with a supervised criterion naturally leads to the representation at every hidden layer (but  more so near the top hidden layer) taking on properties that make the classification task easier.
For example, classes that were not linearly separable in the input features may become linearly separable in the last hidden layer.
In principle, the last layer could be another kind of model, such as a nearest neighbor classifier (Salakhutdinov and Hinton 2007a, ).
The features in the penultimate layer should learn different properties depending on the type of the last layer.
Supervised training of feedforward networks does not involve explicitly imposing any condition on the learned intermediate features.
Other kinds of representation learning algorithms are often explicitly designed to shape the representation in some particular way.
Distributions with more independences are easier  to model, so we could design an objective function that encourages the elements of the representation vector h to be independent.
Just like supervised networks, unsupervised deep learning algorithms have a main training objective but also learn a representation as a side effect.
Alternatively, multiple tasks (some supervised, some unsupervised) can be learned together with some shared internal representation.
Most representation learning problems face a tradeoff between preserving as much information about the input as possible and attaining nice properties (such as independence).
Representation learning is particularly interesting because it provides one  way to perform unsupervised and semi-supervised learning.
We often have very large amounts of unlabeled training data and relatively little labeled training data.
Training with supervised learning techniques on the labeled subset often results in severe overfitting.
Semi-supervised learning offers the chance to resolve this overfitting problem by also learning from the unlabeled data.
Specifically, we can learn good representations for the unlabeled data, and then use these representations to solve the supervised learning task.
Many factors could explain improved human performance—for example, the brain may use very large ensembles of classifiers or Bayesian inference techniques.
One popular hypothesis is that the brain is able to leverage unsupervised or semi-supervised learning.
In this chapter, we focus on the hypothesis that the unlabeled data can be used to learn a good representation.
15.1 Greedy Layer-Wise Unsupervised Pretraining  Unsupervised learning played a key historical role in the revival of deep neural networks, enabling researchers for the first time to train a deep supervised network without requiring architectural specializations like convolution or recurrence.
We call this procedure unsupervised pretraining, or more precisely, greedy layer- wise unsupervised pretraining .
This procedure is a canonical example of how a representation learned for one task (unsupervised learning, trying to capture the shape of the input distribution) can sometimes be useful for another task (supervised learning with the same input domain).
Greedy layer-wise unsupervised pretraining relies on a single-layer represen-  tation learning algorithm such as an RBM, a single-layer autoencoder, a sparse coding model, or another model that learns latent representations.
Each layer is pretrained using unsupervised learning, taking the output of the previous layer and producing as output a new representation of the data, whose distribution (or its relation to other variables such as categories to predict) is hopefully simpler.
See algorithm for a formal description.15.1  Greedy layer-wise training procedures based on unsupervised criteria have long been used to sidestep the difficulty of jointly training the layers of a deep neural net for a supervised task.
The deep learning renaissance of 2006 began with the discovery that this greedy learning procedure could be used to find a good initialization for a joint learning procedure over all the layers, and that this approach could be used  to successfully train even fully connected architectures (Hinton 2006 Hintonet al., ; and Salakhutdinov 2006 Hinton 2006 Bengio 2007 Ranzato 2007a, ; , ; et al., ; et al., ).
Prior to this discovery, only convolutional deep networks or networks whose depth resulted from recurrence were regarded as feasible to train.
Today, we now know that greedy layer-wise pretraining is not required to train fully connected deep architectures, but the unsupervised pretraining approach was the first method to succeed.
REPRESENTATION LEARNING  rithm, meaning that it optimizes each piece of the solution independently, one piece at a time, rather than jointly optimizing all pieces.
Specifically, greedy layer-wise pretraining proceeds one layer at a time, training the k-th layer while keeping the previous ones fixed.
In particular, the lower layers (which are trained first) are not adapted after the upper layers are introduced.
It is called unsuper- vised because each layer is trained with an unsupervised representation learning algorithm.
However it is also called pretraining, because it is supposed to be  only a first step before a joint training algorithm is applied to fine-tune all the layers together.
In the context of a supervised learning task, it can be viewed as a regularizer (in some experiments, pretraining decreases test error without decreasing training error) and a form of parameter initialization.
It is common to use the word “pretraining” to refer not only to the pretraining stage itself but to the entire two phase protocol that combines the pretraining phase and a supervised learning phase.
The supervised learning phase may involve training a simple classifier on top of the features learned in the pretraining phase, or it may involve supervised fine-tuning of the entire network learned in the pretraining phase.
No matter what kind of unsupervised learning algorithm or what model type is employed, in the vast majority of cases, the overall training  scheme is nearly the same.
While the choice of unsupervised learning algorithm will obviously impact the details, most applications of unsupervised pretraining follow this basic protocol.
Greedy layer-wise unsupervised pretraining can also be used as initialization for other unsupervised learning algorithms, such as deep autoencoders (Hinton and Salakhutdinov 2006, ) and probabilistic models with many layers of latent variables.
These deep generative models will be described in chapter .20  As discussed in section , it is also possible to have greedy layer-wise8.7.4 supervised pretraining.
This builds on the premise that training a shallow network  is easier than training a deep one, which seems to have been validated in several contexts ( , ).Erhan et al.
On many tasks, greedy layer-wise unsupervised pretraining can yield substantial improvements in test error for classification tasks.
This observation was responsible for the renewed interested in deep neural networks starting in 2006 (Hinton et al.,  529    CHAPTER 15.
Given the following: Unsupervised feature learning algorithm L, which takes a training set of examples and returns an encoder or feature function f .
The raw input data is X , with one row per example and f(1)(X) is the output of the first stage encoder on X.
In the case where fine-tuning is performed, we use a learner  T which takes an initial function f , input examples X (and in the supervised fine-tuning case, associated targets Y ), and returns a tuned function.
, m= 1  f( )k = (L X̃) f f← ( )k ◦ f X̃ ← f( )k (X̃) end for if fine-tuning then f f, ,← T ( X Y )  end if  Return f  2006 Bengio 2007 Ranzato 2007a; et al., ; et al., ).
On many other tasks, however, unsupervised pretraining either does not confer a benefit or even causes noticeable harm.
2015 models for chemical activity prediction and found that, on average, pretraining was slightly harmful, but for many tasks was significantly helpful.
Because unsupervised pretraining is sometimes helpful but often harmful it is important to understand when and why it works in order to determine whether it is applicable to a particular task.
At the outset, it is important to clarify that most of this discussion is restricted to greedy unsupervised pretraining in particular.
There are other, completely different paradigms for performing semi-supervised learning with neural networks, such as virtual adversarial training described in section .
It is also possible to7.13 train an autoencoder or generative model at the same time as the supervised model.
Examples of this single-stage approach include the discriminative RBM (Larochelle and Bengio 2008, ) and the ladder network ( , ), in which the totalRasmus et al.
2015 objective is an explicit sum of the two terms (one using the labels and one only using the input).
REPRESENTATION LEARNING  the idea that the choice of initial parameters for a deep neural network can have a significant regularizing effect on the model (and, to a lesser extent, that it can improve optimization).
Second, it makes use of the more general idea that learning about the input distribution can help to learn about the mapping from inputs to outputs.
Both of these ideas involve many complicated interactions between several parts of the machine learning algorithm that are not entirely understood.
The first idea, that the choice of initial parameters for a deep neural network  can have a strong regularizing effect on its performance, is the least well understood.
At the time that pretraining became popular, it was understood as initializing the model in a location that would cause it to approach one local minimum rather than another.
Today, local minima are no longer considered to be a serious problem for neural network optimization.
We now know that our standard neural network training procedures usually do not arrive at a critical point of any kind.
It remains possible that pretraining initializes the model in a location that would otherwise be inaccessible—for example, a region that is surrounded by areas where the cost function varies so much from one example to another that minibatches give only a very noisy estimate of the gradient, or a region surrounded by areas where the Hessian matrix is so poorly conditioned that gradient descent methods must use  very small steps.
However, our ability to characterize exactly what aspects of the pretrained parameters are retained during the supervised training stage is limited.
This is one reason that modern approaches typically use simultaneous unsupervised learning and supervised learning rather than two sequential stages.
One may also avoid struggling with these complicated ideas about how optimization in the supervised learning stage preserves information from the unsupervised learning stage by simply freezing the parameters for the feature extractors and using supervised learning only to add a classifier on top of the learned features.
The other idea, that a learning algorithm can use information learned in the unsupervised phase to perform better in the supervised learning stage, is better understood.
The basic idea is that some features that are useful for the unsupervised  task may also be useful for the supervised learning task.
For example, if we train a generative model of images of cars and motorcycles, it will need to know about wheels, and about how many wheels should be in an image.
If we are fortunate, the representation of the wheels will take on a form that is easy for the supervised learner to access.
This is not yet understood at a mathematical, theoretical level, so it is not always possible to predict which tasks will benefit from unsupervised learning in this way.
REPRESENTATION LEARNING  top of pretrained features, the features must make the underlying classes linearly separable.
This is another reason that simultaneous supervised and unsupervised learning can be preferable—the constraints imposed by the output layer are naturally included from the start.
From the point of view of unsupervised pretraining as learning a representation, we can expect unsupervised pretraining to be more effective when the initial representation is poor.
Words represented by one-hot vectors are not very informative because every two distinct one-hot vectors are the same distance from each other (squared L2 distance of ).
Learned word embeddings naturally encode similarity between words by their2 distance from each other.
It is less useful when processing images, perhaps because images already lie in a rich vector space where distances provide a low quality similarity metric.
From the point of view of unsupervised pretraining as a regularizer, we can expect unsupervised pretraining to be most helpful when the number of labeled examples is very small.
Because the source of information added by unsupervised pretraining is the unlabeled data, we may also expect unsupervised pretraining  to perform best when the number of unlabeled examples is very large.
The advantage of semi-supervised learning via unsupervised pretraining with many unlabeled examples and few labeled examples was made particularly clear in 2011 with unsupervised pretraining winning two international transfer learning competitions ( , ; , ), in settings where theMesnil et al.
2011 number of labeled examples in the target task was small (from a handful to dozens of examples per class).
For example, unsupervised pretraining is likely to be most useful when the function to be learned is extremely complicated.
Unsupervised learning differs from regularizers like weight decay because it does not  bias the learner toward discovering a simple function but rather toward discovering feature functions that are useful for the unsupervised learning task.
If the true underlying functions are complicated and shaped by regularities of the input distribution, unsupervised learning can be a more appropriate regularizer.
These caveats aside, we now analyze some success cases where unsupervised pretraining is known to cause an improvement, and explain what is known about why this improvement occurs.
Unsupervised pretraining has usually been used to improve classifiers, and is usually most interesting from the point of view of  532    CHAPTER 15.
REPRESENTATION LEARNING  � � � �      �  �  �            Figure 15.1: Visualization via nonlinear projection of the learning trajectories of different neural networks in function space (not parameter space, to avoid the issue of many-to-one mappings from parameter vectors to functions), with different random initializations and with or without unsupervised pretraining.
Each point corresponds to a different neural network, at a particular time during its training process.
2010 a linear projection to high-dimensional space by concatenating the y for many specific x points.
All networks are initialized near the center of the plot2000 (corresponding to the region of functions that produce approximately uniform distributions over the class y for most inputs).
Training consistently terminates in one region when using pretraining and in another, non-overlapping region when not using pretraining.
Isomap tries to preserve global relative distances (and hence volumes) so the small region corresponding to pretrained models may indicate that the pretraining-based estimator has reduced variance.
However, unsupervised pretraining can help tasks other than classification, and can act to improve optimization rather than being merely a regularizer.
For example, it can improve both train and test reconstruction error for deep autoencoders (Hinton and Salakhutdinov 2006, ).
Both improvements to training error and improvements to test error may be explained in terms of unsupervised pretraining taking the parameters into a region that would otherwise be inaccessible.
Neural network  training is non-deterministic, and converges to a different function every time it is run.
Training may halt at a point where the gradient becomes small, a point where early stopping ends training to prevent overfitting, or at a point where the gradient is large but it is difficult to find a downhill step due to problems such as stochasticity or poor conditioning of the Hessian.
Neural networks that receive unsupervised pretraining consistently halt in the same region of function space, while neural networks without pretraining consistently halt in another region.
The region where pretrained15.1 networks arrive is smaller, suggesting that pretraining reduces the variance of the estimation process, which can in turn reduce the risk of severe over-fitting.
In other words, unsupervised pretraining initializes neural network parameters into  a region that they do not escape, and the results following this initialization are more consistent and less likely to be very bad than without this initialization.
( ) also provide some answers as to pretraining workswhen best—the mean and variance of the test error were most reduced by pretraining for deeper networks.
Keep in mind that these experiments were performed before the invention and popularization of modern techniques for training very deep networks (rectified linear units, dropout and batch normalization) so less is known about the effect of unsupervised pretraining in conjunction with contemporary approaches.
One hypothesis is that pretraining encourages the learning algorithm to discover features that relate to the underlying causes that generate the observed data.
This is an important idea motivating many other algorithms besides unsupervised pretraining, and is described further in section .15.3  Compared to other forms of unsupervised learning, unsupervised pretraining has the disadvantage that it operates with two separate training phases.
Many regularization strategies have the advantage of allowing the user to control the strength of the regularization by adjusting the value of a single hyperparameter.
Unsupervised pretraining does not offer a clear way to adjust the the strength of the regularization arising from the unsupervised stage.
REPRESENTATION LEARNING  very many hyperparameters, whose effect may be measured after the fact but is often difficult to predict ahead of time.
When we perform unsupervised and supervised learning simultaneously, instead of using the pretraining strategy, there is a single hyperparameter, usually a coefficient attached to the unsupervised cost, that determines how strongly the unsupervised objective will regularize the supervised model.
In the case of unsupervised pretraining, there is not a way of flexibly adapting the strength of the regularization—either the supervised  model is initialized to pretrained parameters, or it is not.
Another disadvantage of having two separate training phases is that each phase has its own hyperparameters.
The performance of the second phase usually cannot be predicted during the first phase, so there is a long delay between proposing hyperparameters for the first phase and being able to update them using feedback from the second phase.
The most principled approach is to use validation set error in the supervised phase in order to select the hyperparameters of the pretraining phase, as discussed in ( ).
2009 like the number of pretraining iterations, are more conveniently set during the pretraining phase, using early stopping on the unsupervised objective, which is not ideal but computationally much cheaper than using the supervised objective.
Today, unsupervised pretraining has been largely abandoned, except in the field of natural language processing, where the natural representation of words as one-hot vectors conveys no similarity information and where very large unlabeled sets are available.
In that case, the advantage of pretraining is that one can pretrain once on a huge unlabeled set (for example with a corpus containing billions of words), learn a good representation (typically of words, but also of sentences), and then use this representation or fine-tune it for a supervised task for which the training set contains substantially fewer examples.
( ) and remains in common use today.2011a  Deep learning techniques based on supervised learning, regularized with dropout  or batch normalization, are able to achieve human-level performance on very many tasks, but only with extremely large labeled datasets.
These same techniques out- perform unsupervised pretraining on medium-sized datasets such as CIFAR-10 and MNIST, which have roughly 5,000 labeled examples per class.
On extremely small datasets, such as the alternative splicing dataset, Bayesian methods outperform methods based on unsupervised pretraining (Srivastava 2013, ).
Nevertheless, unsupervised pretraining remains an important milestone in the history of deep learning research  535    CHAPTER 15.
The idea of pretraining has been generalized to supervised pretraining discussed in section , as a very8.7.4 common approach for transfer learning.
Practitioners publish the parameters of these trained networks for this purpose, just like pretrained word vectors are published for natural language tasks ( , ;Collobert et al.
15.2 Transfer Learning and Domain Adaptation  Transfer learning and domain adaptation refer to the situation where what has been learned in one setting (i.e., distribution P1) is exploited to improve generalization in another setting (say distribution P2).
This generalizes the idea presented in the previous section, where we transferred representations between an unsupervised learning task and a supervised learning task.
In transfer learning, the learner must perform two or more different tasks, but we assume that many of the factors that explain the variations in P1 are relevant to the variations that need to be captured for learning P2.
This is typically  understood in a supervised learning context, where the input is the same but the target may be of a different nature.
For example, we may learn about one set of visual categories, such as cats and dogs, in the first setting, then learn about a different set of visual categories, such as ants and wasps, in the second setting.
If there is significantly more data in the first setting (sampled from P1), then that may help to learn representations that are useful to quickly generalize from only very few examples drawn from P2.
Many visual categories share low-level notions of edges and visual shapes, the effects of geometric changes, changes in lighting, etc.
In general, transfer learning, multi-task learning (section ), and domain7.7 adaptation can be achieved via representation learning when there exist features that are useful for the different settings or tasks, corresponding to underlying factors that appear in more than one setting.
However, sometimes, what is shared among the different tasks is not the semantics of the input but the semantics of the output.
For example, a speech recognition system needs to produce valid sentences at the output layer, but the earlier layers near the input may need to recognize very different versions of the same phonemes or sub-phonemic vocalizations depending on which person is speaking.
In cases like these, it makes more sense to share the upper layers (near the output) of the neural network, and have a task-specific preprocessing, as  536    CHAPTER 15.
REPRESENTATION LEARNING  illustrated in figure .15.2  Selection switch  h(1)h(1) h(2)h(2) h(3)h(3)  yy  h(shared)h(shared)  x(1)x(1) x(2)x(2) x(3)x(3)  Figure 15.2: Example architecture for multi-task or transfer learning when the output variable has the same semantics for all tasks while the input variable has a differenty x  meaning (and possibly even a different dimension) for each task (or, for example, each user), called x(1) , x(2) and x(3) for three tasks.
In the related case of domain adaptation, the task (and the optimal input-to- output mapping) remains the same between each setting, but the input distribution is slightly different.
For example, consider the task of sentiment analysis, which consists of determining whether a comment expresses positive or negative sentiment.
A domain adaptation scenario can arise when a sentiment predictor trained on customer reviews of media content such as books, videos and music is later used to analyze comments about consumer electronics such as televisions or smartphones.
One can imagine that there is an underlying function that tells whether any statement is positive, neutral or negative, but of course the vocabulary and style may vary from one domain to another, making it more difficult to generalize across domains.
Simple  unsupervised pretraining (with denoising autoencoders) has been found to be very successful for sentiment analysis with domain adaptation ( , ).Glorot et al.
2011b  A related problem is that of concept drift, which we can view as a form of transfer learning due to gradual changes in the data distribution over time.
While the phrase “multi-task learning” typically refers to supervised learning tasks, the more general notion of transfer learning is applicable to unsupervised learning and reinforcement learning as well.
In all of these cases, the objective is to take advantage of data from the first setting to extract information that may be useful when learning or even when directly making predictions in the second setting.
The core idea of representation learning is that the same representation may be useful in both settings.
Using the same representation in both settings allows the representation to benefit from the  training data that is available for both tasks.
As mentioned before, unsupervised deep learning for transfer learning has found success in some machine learning competitions ( , ;Mesnil et al.
Each participant is first given a dataset from the first setting (from distribution P1), illustrating examples of some set of categories.
The participants must use this to learn a good feature space (mapping the raw input to some representation), such that when we apply this learned transformation to inputs from the transfer setting (distribution P2), a linear classifier can be trained and generalize well from very few labeled examples.
One of the most striking results found in this competition is that as an architecture makes use of deeper and  deeper representations (learned in a purely unsupervised way from data collected in the first setting, P1), the learning curve on the new categories of the second (transfer) setting P2 becomes much better.
For deep representations, fewer labeled examples of the transfer tasks are necessary to achieve the apparently asymptotic generalization performance.
Two extreme forms of transfer learning are one-shot learning and zero-shot learning, sometimes also called zero-data learning.
Only one labeled example of the transfer task is given for one-shot learning, while no labeled examples are given at all for the zero-shot learning task.
One-shot learning (Fei-Fei 2006et al., ) is possible because the representation learns to cleanly separate the underlying classes during the first stage.
During the  transfer learning stage, only one labeled example is needed to infer the label of many possible test examples that all cluster around the same point in representation space.
This works to the extent that the factors of variation corresponding to these invariances have been cleanly separated from the other factors, in the learned representation space, and we have somehow learned which factors do and do not matter when discriminating objects of certain categories.
As an example of a zero-shot learning setting, consider the problem of having a learner read a large collection of text and then solve object recognition problems.
REPRESENTATION LEARNING  It may be possible to recognize a specific object class even without having seen an image of that object, if the text describes the object well enough.
For example, having read that a cat has four legs and pointy ears, the learner might be able to guess that an image is a cat, without having seen a cat before.
Zero-data learning (Larochelle 2008 Palatucciet al., ) and zero-shot learning ( et al., ;2009 Socher 2013bet al., ) are only possible because additional information has been exploited during training.
We can think of the zero-data learning scenario as including three random variables: the traditional inputs x, the traditional  outputs or targets y, and an additional random variable describing the task, T .
The model is trained to estimate the conditional distribution p(y x| , T ) where T is a description of the task we wish the model to perform.
In our example of recognizing cats after having read about cats, the output is a binary variable y with y= 1 indicating “yes” and y = 0 indicating “no.” The task variable T then represents questions to be answered such as “Is there a cat in this image?” If we have a training set containing unsupervised examples of objects that live in the same space as T , we may be able to infer the meaning of unseen instances of T .
In our example of recognizing cats without having seen an image of the cat, it is important that we have had unlabeled text data containing sentences such as “cats have four legs” or “cats have pointy ears.”  Zero-shot learning requires T to be represented in a way that allows some sort of generalization.
2013b of object categories by using a learned word embedding for the word associated with each category.
A similar phenomenon happens in machine translation (Klementiev 2012et al., ; Mikolov 2013b Gouws 2014et al., ; et al., ): we have words in one language, and the relationships between words can be learned from unilingual corpora; on the other hand, we have translated sentences which relate words in one language with words in the other.
Even though we may not have labeled examples translating word A in language X to word B in language Y , we can generalize and guess a  translation for word A because we have learned a distributed representation for words in language X , a distributed representation for words in language Y , and created a link (possibly two-way) relating the two spaces, via training examples consisting of matched pairs of sentences in both languages.
This transfer will be most successful if all three ingredients (the two representations and the relations between them) are learned jointly.
The same principle explains how one can perform multi-modal learning, capturing a representation  539    CHAPTER 15.
REPRESENTATION LEARNING  hx = fx( )x  xtest  y test  hy = fy ( )y  y−space  Relationship between embedded points within one of the domains  Maps between representation spaces   fx  fy  x−space  ( ) pairs in the training setx y,  fx : encoder function for x  fy : encoder function for y  Figure 15.3: Transfer learning between two domains x and y enables zero-shot learning.
Labeled or unlabeled examples of x allow one to learn a representation function fx and similarly with examples of y to learn fy.
Each application of the fx and fy functions appears as an upward arrow, with the style of the arrows indicating which function is applied.
Distance in hx space provides a similarity metric between any pair of points in x space that may be more meaningful than distance in x space.
Labeled examples (dashed horizontal lines) are pairs (x y, ) which allow one to learn a one-way or two-way map (solid bidirectional arrow) between the representations fx(x) and the representations fy(y ) and anchor these representations to each other.
One can associate an image xtest to a word ytest, even if no image of that word was ever presented, simply because word-representations fy(ytest) and image-representations fx (xtest) can be related to each other via the maps between representation spaces.
It works because, although that image and that word were never paired, their respective feature vectors fx(xtest ) and fy(ytest) have been related to each other.
REPRESENTATION LEARNING  in one modality, a representation in the other, and the relationship (in general a joint distribution) between pairs (x y, ) consisting of one observation x in one modality and another observation y in the other modality (Srivastava and Salakhutdinov, 2012).
By learning all three sets of parameters (from x to its representation, from y to its representation, and the relationship between the two representations), concepts in one representation are anchored in the other, and vice-versa, allowing one to meaningfully generalize to new pairs.
The procedure is illustrated in figure .15.3  15.3 Semi-Supervised Disentangling of Causal Factors  An important question about representation learning is “what makes one repre- sentation better than another?” One hypothesis is that an ideal representation is one in which the features within the representation correspond to the under- lying causes of the observed data, with separate features or directions in feature space corresponding to different causes, so that the representation disentangles the causes from one another.
Such a representation may also be a good representation for computing p(y x| ) if y is among the most salient causes of x.
This idea has guided a large amount of deep learning research since at least the 1990s (Becker and Hinton 1992 Hinton and Sejnowski 1999, ; , ), in more detail.
For other arguments about when semi-supervised learning can outperform pure supervised learning, we refer the reader to section 1.2 of ( ).Chapelle et al.
2006  In other approaches to representation learning, we have often been concerned with a representation that is easy to model—for example, one whose entries are sparse, or independent from each other.
A representation that cleanly separates the underlying causal factors may not necessarily be one that is easy to model.
However, a further part of the hypothesis motivating semi-supervised learning via unsupervised representation learning is that for many AI tasks, these two properties coincide: once we are able to obtain the underlying explanations for  what we observe, it generally becomes easy to isolate individual attributes from the others.
Specifically, if a representation h represents many of the underlying causes of the observed x, and the outputs y are among the most salient causes, then it is easy to predict from .y h  First, let us see how semi-supervised learning can fail because unsupervised learning of p(x) is of no help to learn p(y x| ).
Consider for example the case where p(x) is uniformly distributed and we want to learn f (x) = E[y | x].
Clearly, observing a training set of values alone gives us no information about .x p( )y x|  541    CHAPTER 15.
REPRESENTATION LEARNING  x  p x( )  y=1 y=2 y=3  Figure 15.4: Example of a density over x that is a mixture over three components.
Because the mixture components (e.g., natural object classes in image data) are statistically salient, just modeling p(x) in an unsupervised way with no labeled example already reveals the factor y.
Consider the situation where x arises from a mixture, with one mixture component per value of y, as illustrated in figure .
If the mixture components are well-15.4 separated, then modeling p(x) reveals precisely where each component is, and a single labeled example of each class will then be enough to perfectly learn p(y x| ).
But more generally, what could make and be tied together?p( )y x| p( )x  If y is closely associated with one of the causal factors of x, then p(x) and p(y x| ) will be strongly tied, and unsupervised representation learning that tries to disentangle the underlying factors of variation is likely to be useful as a  semi-supervised learning strategy.
Consider the assumption that y is one of the causal factors of x, and let h represent all those factors.
The true generative process can be conceived as structured according to this directed graphical model, with as the parent of :h x  p , p p .
( )x h| (15.2)  From this straightforward observation, we conclude that the best possible model of x (from a generalization point of view) is the one that uncovers the above “true”  542    CHAPTER 15.
REPRESENTATION LEARNING  structure, with h as a latent variable that explains the observed variations in x.
If y is one of these (or closely related to one of them), then it will be very easy to learn to predict y from such a representation.
We also see that the conditional distribution of y given x is tied by Bayes’ rule to the components in the above equation:  p( ) =y x| p p( )x y| ( )y p( )x  .
(15.3)  Thus the marginal p(x) is intimately tied to the conditional p(y x| ) and knowledge of the structure of the former should be helpful to learn the latter.
Therefore, in situations respecting these assumptions, semi-supervised learning should improve performance.
An important research problem regards the fact that most observations are formed by an extremely large number of underlying causes.
The brute force solution is for an unsupervised learner to learn a representation that captures the reasonablyall salient generative factors hj and disentangles them from each other, thus making it easy to predict from , regardless of which hy h i is associated with .y  In practice, the brute force solution is not feasible because it is not possible to capture all or most of the factors of variation that influence an observation.
For example, in a visual scene, should the representation always encode all of the smallest objects in the background?
It is a well-documented psychological phenomenon that human beings fail to perceive changes in their environment that are not immediately relevant to the task they are performing—see, e.g., Simons and Levin 1998( ).
An important research frontier in semi-supervised learning is determining to encode in each situation.
Currently, two of the main strategieswhat for dealing with a large number of underlying causes are to use a supervised learning signal at the same time as the unsupervised learning signal so that the model will choose to capture the most relevant factors of variation, or to use much larger representations if using purely unsupervised learning.
An emerging strategy for unsupervised learning is to modify the definition of  which underlying causes are most salient.
Historically, autoencoders and generative models have been trained to optimize a fixed criterion, often similar to mean squared error.
For example, mean squared error applied to the pixels of an image implicitly specifies that an underlying cause is only salient if it significantly changes the brightness of a large number of pixels.
REPRESENTATION LEARNING  Input Reconstruction  Figure 15.5: An autoencoder trained with mean squared error for a robotics task has failed to reconstruct a ping pong ball.
The existence of the ping pong ball and all of its spatial coordinates are important underlying causal factors that generate the image and are relevant to the robotics task.
Unfortunately, the autoencoder has limited capacity, and the training with mean squared error did not identify the ping pong ball as being salient enough to encode.
This same robot is capable of successfully interacting with larger objects, such as baseballs, which are more salient according to mean squared error.
For example, if a group of pixels  follow a highly recognizable pattern, even if that pattern does not involve extreme brightness or darkness, then that pattern could be considered extremely salient.
One way to implement such a definition of salience is to use a recently developed approach called generative adversarial networks ( , ).Goodfellow et al.
The feedforward classifier attempts to recognize all samples from the generative model as being fake, and all samples from the training set as being real.
In this framework, any structured pattern that the feedforward network can recognize is highly salient.
For the purposes of the present discussion, it is sufficient to20.10.4 understand that they learn how to determine what is salient.
2015  showed that models trained to generate images of human heads will often neglect to generate the ears when trained with mean squared error, but will successfully generate the ears when trained with the adversarial framework.
Because the ears are not extremely bright or dark compared to the surrounding skin, they are not especially salient according to mean squared error loss, but their highly  544    CHAPTER 15.
REPRESENTATION LEARNING  Ground Truth MSE Adversarial  Figure 15.6: Predictive generative networks provide an example of the importance of learning which features are salient.
In this example, the predictive generative network has been trained to predict the appearance of a 3-D model of a human head at a specific viewing angle.
Because the ears do not cause an extreme difference in brightness compared to the neighboring skin, they were not sufficiently salient for the model to learn to represent them.
(Right)Image produced by a model trained with a combination of mean squared error and adversarial loss.
Learning which underlying causes are important and relevant enough to model is an important active area of research.
2015  recognizable shape and consistent position means that a feedforward network can easily learn to detect them, making them highly salient under the generative adversarial framework.
Generative adversarial15.6 networks are only one step toward determining which factors should be represented.
We expect that future research will discover better ways of determining which factors to represent, and develop mechanisms for representing different factors depending on the task.
( ), is that if the true generative process has2012 x as an effect and y as  a cause, then modeling p(x y| ) is robust to changes in p(y).
If the cause-effect relationship was reversed, this would not be true, since by Bayes’ rule, p(x y| ) would be sensitive to changes in p(y).
Very often, when we consider changes in distribution due to different domains, temporal non-stationarity, or changes in the nature of the task, the causal mechanisms remain invariant (the laws of the universe are constant) while the marginal distribution over the underlying causes can change.
REPRESENTATION LEARNING  be expected via learning a generative model that attempts to recover the causal factors and .h p( )x h|  15.4 Distributed Representation  Distributed representations of concepts—representations composed of many ele- ments that can be set separately from each other—are one of the most important tools for representation learning.
Distributed representations are powerful because they can use n features with k values to describe kn different concepts.
As we have seen throughout this book, both neural networks with multiple hidden units and probabilistic models with multiple latent variables make use of the strategy of distributed representation.
Many deep learning algorithms are motivated by the assumption that the hidden units can learn to represent the underlying causal factors that explain the data, as discussed in section .
Distributed representations are natural for this approach,15.3 because each direction in representation space can correspond to the value of a  different underlying configuration variable.
An example of a distributed representation is a vector of n binary features, which can take 2n configurations, each potentially corresponding to a different region in input space, as illustrated in figure .
This can be compared with15.7 a symbolic representation, where the input is associated with a single symbol or category.
If there are n symbols in the dictionary, one can imagine n feature detectors, each corresponding to the detection of the presence of the associated category.
In that case only n different configurations of the representation space are possible, carving n different regions in input space, as illustrated in figure .15.8 Such a symbolic representation is also called a one-hot representation, since it can be captured by a binary vector with n bits that are mutually exclusive (only one  of them can be active).
A symbolic representation is a specific example of the broader class of non-distributed representations, which are representations that may contain many entries but without significant meaningful separate control over each entry.
Examples of learning algorithms based on non-distributed representations include:  • Clustering methods, including the k-means algorithm: each input point is assigned to exactly one cluster.
• k-nearest neighbors algorithms: one or a few templates or prototype examples are associated with a given input.
REPRESENTATION LEARNING  h1  h2 h3  h = [1, ,1 1]  h = [0, ,1 1]  h = [1, ,0 1]h = [1, ,1 0]  h = [0, ,1 0] h = [0, ,0 1]  h = [1, ,0 0]  Figure 15.7: Illustration of how a learning algorithm based on a distributed representation breaks up the input space into regions.
Let h+i be the set of input points for which hi = 1 and h−i be the set of input points for which hi = 0.
In this illustration, each line represents the decision boundary for one hi, with the corresponding arrow pointing to the h+i side of the boundary.
The representation as a whole takes on a unique value at each possible intersection of these half-planes.
In the general case of15.8 d input dimensions, a distributed representation divides Rd by intersecting half-spaces rather than half-planes.
The distributed representation with n features assigns unique codes to O(nd) different regions, while the nearest neighbor algorithm with n examples assigns unique codes to only n regions.
The distributed representation is thus able to distinguish exponentially many more regions than the non-distributed one.
Keep in mind that not all h values are feasible (there is no h= 0 in this example) and that a linear classifier on top of the distributed representation is not able to assign different class identities to every neighboring region; even a deep linear-threshold network has a VC dimension of only O(w wlog ) where w is the number of weights ( , ).
The combination of a powerful representationSontag 1998 layer and a weak classifier layer can be a strong regularizer; a classifier trying to learn the concept of “person” versus “not a person” does not need to assign a different class to an input represented as “woman with glasses” than it assigns to an input represented as “man without glasses.” This capacity constraint encourages each classifier to focus on few hi and encourages to learn to represent the classes in a linearly separable way.h  547    CHAPTER 15.
REPRESENTATION LEARNING  values describing each input, but they can not be controlled separately from each other, so this does not qualify as a true distributed representation.
• Decision trees: only one leaf (and the nodes on the path from root to leaf) is activated when an input is given.
• Gaussian mixtures and mixtures of experts: the templates (cluster centers) or experts are now associated with a degree of activation.
As with the k-nearest neighbors algorithm, each input is represented with multiple values, but those values cannot readily be controlled separately from each other.
• Kernel machines with a Gaussian kernel (or other similarly local kernel): although the degree of activation of each “support vector” or template example  is now continuous-valued, the same issue arises as with Gaussian mixtures.
For some of these non-distributed algorithms, the output is not constant by parts but instead interpolates between neighboring regions.
The relationship between the number of parameters (or examples) and the number of regions they can define remains linear.
An important related concept that distinguishes a distributed representation from a symbolic one is that generalization arises due to shared attributes between different concepts.
However, if one associates them with a meaningful distributed representation, then many of the things that can be said about cats can generalize to dogs and vice-versa.
For example, our distributed representation may contain entries such as “has_fur” or “number_of_legs” that have the same value for the embedding of both “cat” and “dog.” Neural language models that operate on distributed representations of words generalize much better than other models that operate directly on one-hot representations of words, as discussed in section .
Distributed representations induce a rich12.4 similarity space, in which semantically close concepts (or inputs) are close in distance, a property that is absent from purely symbolic representations.
When and why can there be a statistical advantage from using a distributed  representation as part of a learning algorithm?
REPRESENTATION LEARNING  Figure 15.8: Illustration of how the nearest neighbor algorithm breaks up the input space into different regions.
The nearest neighbor algorithm provides an example of a learning algorithm based on a non-distributed representation.
Different non-distributed algorithms may have different geometry, but they typically break the input space into regions, with a separate set of parameters for each region.
The advantage of a non-distributed approach is that, given enough parameters, it can fit the training set without solving a difficult optimization algorithm, because it is straightforward to choose a different output independently for each region.
The disadvantage is that such non-distributed models generalize only locally via the smoothness prior, making it difficult to learn a complicated function with more peaks and troughs than the available number of examples.
REPRESENTATION LEARNING  have a statistical advantage when an apparently complicated structure can be compactly represented using a small number of parameters.
Some traditional non- distributed learning algorithms generalize only due to the smoothness assumption, which states that if u v≈ , then the target function f to be learned has the property that f(u) ≈ f(v), in general.
There are many ways of formalizing such an assumption, but the end result is that if we have an example (x, y) for which we know that f (x) ≈ y, then we choose an estimator f̂ that approximately satisfies these constraints while changing as little as possible when we move to a nearby  input x+ .
This assumption is clearly very useful, but it suffers from the curse of dimensionality: in order to learn a target function that increases and decreases many times in many different regions,1 we may need a number of examples that is at least as large as the number of distinguishable regions.
One can think of each of these regions as a category or symbol: by having a separate degree of freedom for each symbol (or region), we can learn an arbitrary decoder mapping from symbol to value.
For example, a convolutional network with max-pooling can recognize an object regardless of its location in the image, even though spatial translation of  the object may not correspond to smooth transformations in the input space.
Let us examine a special case of a distributed representation learning algorithm, that extracts binary features by thresholding linear functions of the input.
Each binary feature in this representation divides Rd into a pair of half-spaces, as illustrated in figure .
The exponentially large number of intersections of15.7 n of the corresponding half-spaces determines how many regions this distributed representation learner can distinguish.
By applying a general result concerning the intersection of hyperplanes ( , ), one can show (Zaslavsky 1975 Pascanu 2014bet al., ) that the number of regions this binary feature representation can distinguish is  d  j=0   n  j   = (O nd).
(15.4)  Therefore, we see a growth that is exponential in the input size and polynomial in the number of hidden units.
1 Potentially, we may want to learn a function whose behavior is distinct in exponentially many  regions: in a d-dimensional space with at least 2 different values to distinguish per dimension, we might want to differ inf 2d different regions, requiring O(2 d) training examples.
REPRESENTATION LEARNING  This provides a geometric argument to explain the generalization power of distributed representation: with O(nd) parameters (for n linear-threshold features in Rd ) we can distinctly represent O(nd) regions in input space.
If instead we made no assumption at all about the data, and used a representation with one unique symbol for each region, and separate parameters for each symbol to recognize its corresponding portion of Rd, then specifying O(nd) regions would require O(nd) examples.
More generally, the argument in favor of the distributed representation could be extended to the case where instead of using linear threshold units we  use nonlinear, possibly continuous, feature extractors for each of the attributes in the distributed representation.
The argument in this case is that if a parametric transformation with k parameters can learn about r regions in input space, with k r , and if obtaining such a representation was useful to the task of interest, then we could potentially generalize much better in this way than in a non-distributed setting where we would need O(r) examples to obtain the same features and associated partitioning of the input space into r regions.
Using fewer parameters to represent the model means that we have fewer parameters to fit, and thus require far fewer training examples to generalize well.
A further part of the argument for why models based on distributed represen- tations generalize well is that their capacity remains limited despite being able to  distinctly encode so many different regions.
For example, the VC dimension of a neural network of linear threshold units is only O(w wlog ), wherew is the number of weights (Sontag 1998, ).
This limitation arises because, while we can assign very many unique codes to representation space, we cannot use absolutely all of the code space, nor can we learn arbitrary functions mapping from the representation space h to the output y using a linear classifier.
The use of a distributed representation combined with a linear classifier thus expresses a prior belief that the classes to be recognized are linearly separable as a function of the underlying causal factors captured by h. We will typically want to learn categories such as the set of all images of all green objects or the set of all images of cars, but not categories that require nonlinear, XOR logic.
For example, we typically do not want to partition the data into the set of all red cars and green trucks as one class and the set of all  green cars and red trucks as another class.
2015 trained on the ImageNet and Places benchmark datasets learn features that are very often interpretable, corresponding to a label that humans would naturally assign.
In practice it is certainly not always the case that hidden units learn something that has a simple linguistic name, but it is interesting to see this emerge near the top levels of the best computer vision deep networks.
REPRESENTATION LEARNING  - + =  Figure 15.9: A generative model has learned a distributed representation that disentangles the concept of gender from the concept of wearing glasses.
If we begin with the repre- sentation of the concept of a man with glasses, then subtract the vector representing the concept of a man without glasses, and finally add the vector representing the concept of a woman without glasses, we obtain the vector representing the concept of a woman with glasses.
The generative model correctly decodes all of these representation vectors to images that may be recognized as belonging to the correct class.
2015  common is that one could imagine learning about each of them without having to see all the configurations of all the others.
2015 a generative model can learn a representation of images of faces, with separate directions in representation space capturing different underlying factors of variation.
Figure demonstrates that one direction in representation space corresponds15.9 to whether the person is male or female, while another corresponds to whether the person is wearing glasses.
There is no need to have labels for the hidden unit classifiers: gradient descent on an objective function of interest naturally learns semantically interesting features, so long as the task requires such features.
We can learn about  the distinction between male and female, or about the presence or absence of glasses, without having to characterize all of the configurations of the n− 1 other features by examples covering all of these combinations of values.
This form of statistical separability is what allows one to generalize to new configurations of a person’s features that have never been seen during training.
REPRESENTATION LEARNING  15.5 Exponential Gains from Depth  We have seen in section that multilayer perceptrons are universal approxima-6.4.1 tors, and that some functions can be represented by exponentially smaller deep networks compared to shallow networks.
In this section, we describe how similar results apply more generally to other kinds of models with distributed hidden representations.
In section , we saw an example of a generative model that learned about15.4 the explanatory factors underlying images of faces, including the person’s gender and whether they are wearing glasses.
It would not be reasonable to expect a shallow network, such as a linear network, to learn the complicated relationship between these abstract explanatory factors and the pixels in the image.
In this and other AI tasks, the factors that can be chosen almost independently from each other yet still correspond to meaningful inputs are more likely to be very high-level and related in highly nonlinear ways to the input.
We argue that this demands deep distributed representations, where the higher level features (seen as functions of the input) or factors (seen as generative causes) are obtained through  the composition of many nonlinearities.
It has been proven in many different settings that organizing computation through the composition of many nonlinearities and a hierarchy of reused features can give an exponential boost to statistical efficiency, on top of the exponential boost given by using a distributed representation.
Many kinds of networks (e.g., with saturating nonlinearities, Boolean gates, sum/products, or RBF units) with a single hidden layer can be shown to be universal approximators.
A model family that is a universal approximator can approximate a large class of functions (including all continuous functions) up to any non-zero tolerance level, given enough hidden units.
Theoretical results concerning the expressive power of deep architectures state that  there are families of functions that can be represented efficiently by an architecture of depth k, but would require an exponential number of hidden units (with respect to the input size) with insufficient depth (depth 2 or depth ).k − 1  In section , we saw that deterministic feedforward networks are universal6.4.1 approximators of functions.
Many structured probabilistic models with a single hidden layer of latent variables, including restricted Boltzmann machines and deep belief networks, are universal approximators of probability distributions (Le Roux and Bengio 2008 2010 Montúfar and Ay 2011 Montúfar 2014 Krause, , ; , ; , ; et al., 2013).
REPRESENTATION LEARNING  In section , we saw that a sufficiently deep feedforward network can have6.4.1 an exponential advantage over a network that is too shallow.
These models use polynomial circuits to compute the probability distribution over a set of random variables.
( ) showed that there existDelalleau and Bengio 2011 probability distributions for which a minimum depth of SPN is required to avoid needing an exponentially large model.
Later, ( )Martens and Medabalimi 2014  showed that there are significant differences between every two finite depths of SPN, and that some of the constraints used to make SPNs tractable may limit their representational power.
Another interesting development is a set of theoretical results for the expressive power of families of deep circuits related to convolutional nets, highlighting an exponential advantage for the deep circuit even when the shallow circuit is allowed to only approximate the function computed by the deep circuit ( ,Cohen et al.
By comparison, previous theoretical work made claims regarding only the case where the shallow circuit must exactly replicate particular functions.
15.6 Providing Clues to Discover Underlying Causes  To close this chapter, we come back to one of our original questions: what makes one representation better than another?
One answer, first introduced in section , is15.3 that an ideal representation is one that disentangles the underlying causal factors of variation that generated the data, especially those factors that are relevant to our applications.
Most strategies for representation learning are based on introducing clues that help the learning to find these underlying factors of variations.
Supervised learning provides a very strong clue: a label y, presented with each x, that usually specifies the value of at least one of the factors of variation directly.
More generally, to make use of abundant unlabeled data, representation learning makes use of  other, less direct, hints about the underlying factors.
These hints take the form of implicit prior beliefs that we, the designers of the learning algorithm, impose in order to guide the learner.
Results such as the no free lunch theorem show that regularization strategies are necessary to obtain good generalization.
While it is impossible to find a universally superior regularization strategy, one goal of deep learning is to find a set of fairly generic regularization strategies that are applicable to a wide variety of AI tasks, similar to the tasks that people and animals are able to solve.
The list is clearly not exhaustive, but gives some concrete examples of ways that learning algorithms can be encouraged to discover features that correspond to underlying factors.
This assumption allows the learner to generalize from training examples to nearby points in input space.
Many machine learning algorithms leverage this idea, but it is insufficient to overcome the curse of dimensionality.
This allows the algorithm to make predictions even very far from the observed data, but can sometimes lead to overly extreme predictions.
Most simple machine learning algorithms that do not make the smoothness assumption instead make the linearity assumption.
These are in fact different assumptions—linear functions with large weights applied to high-dimensional spaces may not be very smooth.
( ) for a further discussion of the limitations of the linearity assumption.2014b  • Multiple explanatory factors: Many representation learning algorithms are motivated by the assumption that the data is generated by multiple underlying explanatory factors, and that most tasks can be solved easily given the state of each of these factors.
Section describes how this view motivates semi-15.3  supervised learning via representation learning.
Learning the structure of p(x) requires learning some of the same features that are useful for modeling p(y | x) because both refer to the same underlying explanatory factors.
Section 15.4 describes how this view motivates the use of distributed representations, with separate directions in representation space corresponding to separate factors of variation.
• Causal factors: the model is constructed in such a way that it treats the factors of variation described by the learned representation h as the causes of the observed data x, and not vice-versa.
As discussed in section , this15.3 is advantageous for semi-supervised learning and makes the learned model more robust when the distribution over the underlying causes changes or when we use the model for a new task.
• Depth a hierarchical organization of explanatory factors, or  : High-level, abstract concepts can be defined in terms of simple concepts, forming a hierarchy.
REPRESENTATION LEARNING  expresses our belief that the task should be accomplished via a multi-step program, with each step referring back to the output of the processing accomplished via previous steps.
• Shared factors across tasks: In the context where we have many tasks, corresponding to different yi variables sharing the same input x or where each task is associated with a subset or a function f( )i (x) of a global input x, the assumption is that each y i is associated with a different subset from a common pool of relevant factors h. Because these subsets overlap, learning all the P (y i | x) via a shared intermediate representation P (h x| ) allows sharing of statistical strength between the tasks.
• Manifolds: Probability mass concentrates, and the regions in which it con- centrates are locally connected and occupy a tiny volume.
In the continuous case, these regions can be approximated by low-dimensional manifolds with a much smaller dimensionality than the original space where the data lives.
• Natural clustering: Many machine learning algorithms assume that each connected manifold in the input space may be assigned to a single class.
The data may lie on many disconnected manifolds, but the class remains constant within each one of these.
This assumption motivates a variety of learning algorithms, including tangent propagation, double backprop, the manifold  tangent classifier and adversarial training.
• Temporal and spatial coherence: Slow feature analysis and related algorithms make the assumption that the most important explanatory factors change slowly over time, or at least that it is easier to predict the true underlying explanatory factors than to predict raw observations such as pixel values.
See section for further description of this approach.13.3  • Sparsity: Most features should presumably not be relevant to describing most inputs—there is no need to use a feature that detects elephant trunks when representing an image of a cat.
It is therefore reasonable to impose a prior that any feature that can be interpreted as “present” or “absent” should be absent most of the time.
• Simplicity of Factor Dependencies: In good high-level representations, the factors are related to each other through simple dependencies.
REPRESENTATION LEARNING  possible is marginal independence, P (h) =  iP (hi), but linear dependencies  or those captured by a shallow autoencoder are also reasonable assumptions.
This can be seen in many laws of physics, and is assumed when plugging a linear predictor or a factorized prior on top of a learned representation.
Feedforward and recurrent networks, autoencoders and deep probabilistic models all learn and exploit representations.
                                     Chapter 16  Structured Probabilistic Models  for Deep Learning  Deep learning draws upon many modeling formalisms that researchers can use to guide their design efforts and describe their algorithms.
That brief presentation was3.14 sufficient to understand how to use structured probabilistic models as a language to describe some of the algorithms in part .
Now, in part , structured probabilisticII III models are a key ingredient of many of the most important research topics in deep learning.
In order to prepare to discuss these research ideas, this chapter describes structured probabilistic models in much greater detail.
This chapter is intended to be self-contained; the reader does not need to review the earlier introduction before continuing with this chapter.
A structured probabilistic model is a way of describing a probability distribution, using a graph to describe which random variables in the probability distribution  interact with each other directly.
Here we use “graph” in the graph theory sense—a set of vertices connected to one another by a set of edges.
Because the structure of the model is defined by a graph, these models are often also referred to as graphical models.
The graphical models research community is large and has developed many different models, training algorithms, and inference algorithms.
In this chapter, we provide basic background on some of the most central ideas of graphical models, with an emphasis on the concepts that have proven most useful to the deep learning research community.
If you already have a strong background in graphical models, you may wish to skip most of this chapter.
STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING  may benefit from reading the final section of this chapter, section , in which we16.7 highlight some of the unique ways that graphical models are used for deep learning algorithms.
Deep learning practitioners tend to use very different model structures, learning algorithms and inference procedures than are commonly used by the rest of the graphical models research community.
One of the major difficulties in graphical modeling is understanding which variables need to be able to interact directly, i.e., which graph structures are most suitable for a given problem.
We outline two approaches to resolving this difficulty by learning about the dependen- cies in section .
Finally, we close with a discussion of the unique emphasis that16.5 deep learning practitioners place on specific approaches to graphical modeling in section .16.7  16.1 The Challenge of Unstructured Modeling  The goal of deep learning is to scale machine learning to the kinds of challenges needed to solve artificial intelligence.
For example, we would like AI algorithms to be able to understand natural images,1 audio waveforms representing speech, and documents containing multiple words and punctuation characters.
Classification algorithms can take an input from such a rich high-dimensional distribution and summarize it with a categorical label—what object is in a photo, what word is spoken in a recording, what topic a document is about.
The process of classification discards most of the information in the input and produces a single output (or a probability distribution over values of that single output).
For example, when  recognizing an object in a photo, it is usually possible to ignore the background of the photo.
Most require a complete understanding of the entire structure of  1 A natural image is an image that might be captured by a camera in a reasonably ordinary  environment, as opposed to a synthetically rendered image, a screenshot of a web page, etc.
STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING  the input, with no option to ignore sections of it.
These tasks include the following:  • Density estimation: given an input x, the machine learning system returns an estimate of the true density p(x) under the data generating distribution.
This requires only a single output, but it does require a complete understand- ing of the entire input.
• Denoising: given a damaged or incorrectly observed input x̃, the machine learning system returns an estimate of the original or correct x.
For example, the machine learning system might be asked to remove dust or scratches  from an old photograph.
This requires multiple outputs (every element of the estimated clean example x) and an understanding of the entire input (since even one damaged area will still reveal the final estimate as being damaged).
• Missing value imputation: given the observations of some elements of x, the model is asked to return estimates of or a probability distribution over some or all of the unobserved elements of x.
Because the model could be asked to restore any of the elements of x, it must understand the entire input.
If the samples have even one element drawn from the wrong distribution, then the sampling process is wrong.
For an example of a sampling task using small natural images, see figure .16.1  Modeling a rich distribution over thousands or millions of random variables is a challenging task, both computationally and statistically.
In general, if we wish to model a distribution over a random vector x containing n discrete variables capable of taking on k values each, then the naive approach of representing P (x) by storing a lookup table with one probability value per possible outcome requires kn parameters!
STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING  Figure 16.1: Probabilistic modeling of natural images.
SamplesKrizhevsky and Hinton 2009 (Bottom) drawn from a structured probabilistic model trained on this dataset.
Each sample appears at the same position in the grid as the training example that is closest to it in Euclidean space.
This comparison allows us to see that the model is truly synthesizing new images, rather than memorizing the training data.
STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING  • Memory: the cost of storing the representation: For all but very small values of n and k , representing the distribution as a table will require too many values to store.
• Statistical efficiency: As the number of parameters in a model increases, so does the amount of training data needed to choose the values of those parameters using a statistical estimator.
Because the table-based model has an astronomical number of parameters, it will require an astronomically large training set to fit accurately.
Any such model will overfit the training set very badly unless additional assumptions are made linking the different  entries in the table (for example, like in back-off or smoothed n-gram models, section ).12.4.1  • Runtime: the cost of inference: Suppose we want to perform an inference task where we use our model of the joint distribution P (x) to compute some other distribution, such as the marginal distribution P (x1) or the conditional distribution P (x2 | x1 ).
Computing these distributions will require summing across the entire table, so the runtime of these operations is as high as the intractable memory cost of storing the model.
The naive way to do this is to sample some value u ∼ U(0,1), then iterate through the table, adding up the probability values until they exceed u and return the outcome corresponding to that position in the table.
This requires reading through the whole table in the worst case, so it has  the same exponential cost as the other operations.
The problem with the table-based approach is that we are explicitly modeling every possible kind of interaction between every possible subset of variables.
Bob’s finishing time depends on Alice’s, because Bob does not have the opportunity to start his lap until Alice has completed hers.
As a consequence, Carol will have quite a late starting time and thus is likely to have a late finishing time as well.
If we already know Bob’s finishing time, we will not be able to estimate Carol’s finishing time better by finding out what Alice’s finishing time was.
This means we can model the relay race using only two interactions: Alice’s effect on Bob and Bob’s effect on Carol.
Structured probabilistic models provide a formal framework for modeling only direct interactions between random variables.
This allows the models to have significantly fewer parameters and therefore be estimated reliably from less data.
These smaller models also have dramatically reduced computational cost in terms of storing the model, performing inference in the model, and drawing samples from the model.
16.2 Using Graphs to Describe Model Structure  Structured probabilistic models use graphs (in the graph theory sense of “nodes” or “vertices” connected by edges) to represent interactions between random variables.
These direct interactions imply other, indirect interactions, but only the direct interactions need to be explicitly modeled.
Graphical models can be largely divided into two categories: models based on directed acyclic graphs, and models based on undirected graphs.
16.2.1 Directed Models  One kind of structured probabilistic model is the directed graphical model, otherwise known as the belief network Bayesian networkor 2 (Pearl 1985, ).
Directed graphical models are called “directed” because their edges are directed,  2 Judea Pearl suggested using the term “Bayesian network” when one wishes to “emphasize  the judgmental” nature of the values computed by the network, i.e.
STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING  t0t0 t1t1 t2t2  Alice Bob Carol  Figure 16.2: A directed graphical model depicting the relay race example.
Alice’s finishing time t0 influences Bob’s finishing time t1, because Bob does not get to start running until Alice finishes.
Likewise, Carol only gets to start running after Bob finishes, so Bob’s finishing time t1 directly influences Carol’s finishing time t2.
The direction of the arrow indicates which variable’s probability distribution is defined in terms of the other’s.
Drawing an arrow from a to b means that we define the probability distribution over b via a conditional distribution, with a as one of the variables on the right side of the conditioning bar.
Continuing with the relay race example from section , suppose we name16.1 Alice’s finishing time t0, Bob’s finishing time t1, and Carol’s finishing time t2.
We can draw this relationship in a directed graphical model, illustrated in figure .16.2  Formally, a directed graphical model defined on variables x is defined by a directed acyclic graph G whose vertices are the random variables in the model, and a set of local conditional probability distributions p(xi | PaG(xi)) where PaG(xi) gives the parents of xi in G. The probability distribution over x is given by  p( ) = Πx ip(xi | PaG(xi )).
(16.1)  In our relay race example, this means that, using the graph drawn in figure ,16.2  p(t0, t1, t2) = (p t0) (p t1 | t0) (p t2 | t1).
We can examine the cost of using it, in order to observe how structured modeling has many advantages relative to unstructured modeling.
Suppose we represented time by discretizing time ranging from minute 0 to minute 10 into 6 second chunks.
If we attempted to represent p(t0, t1, t2) with a  table, it would need to store 999,999 values (100 values of t0 × 100 values of t1 × 100 values of t2, minus 1, since the probability of one of the configurations is made  564    CHAPTER 16.
STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING  redundant by the constraint that the sum of the probabilities be 1).
If instead, we only make a table for each of the conditional probability distributions, then the distribution over t0 requires 99 values, the table defining t1 given t0 requires 9900 values, and so does the table defining t2 given t1.
This means that using the directed graphical model reduced our number of parameters by a factor of more than 50!
In general, to model n discrete variables each having k values, the cost of the single table approach scales like O(kn), as we have observed before.
If m is the maximum number of variables appearing (on either side of the conditioning bar) in a single conditional probability distribution, then the cost of the tables for the directed model scales like O(km).
In other words, so long as each variable has few parents in the graph, the distribution can be represented with very few parameters.
Some restrictions on the graph structure, such as requiring it to be a tree, can also guarantee that operations like computing marginal or conditional distributions over subsets of variables are efficient.
The graph encodes only simplifying assumptions about which variables are conditionally independent from each other.
(In reality, Alice’s performance probably influences Bob’s performance—depending on Bob’s personality, if Alice runs especially fast in a given race, this might encourage Bob to push hard and match her exceptional performance, or it might make him overconfident and lazy).
Then the only effect Alice has on Bob’s finishing time is that we must add Alice’s finishing time to the total amount of time we think Bob needs to run.
However, note that t0 and t1 are still directly dependent with this assumption,  because t1 represents the absolute time at which Bob finishes, not the total time he himself spends running.
The assumption that Bob’s personal running time is independent from all other factors cannot be encoded in a graph over t0, t1, and t2 .
The conditional distribution is no longer a k k× − 1 element table indexed by t0 and t1 but is now a slightly more complicated formula using only k − 1 parameters.
The directed graphical model syntax does not place any constraint on how we define  565    CHAPTER 16.
16.2.2 Undirected Models  Directed graphical models give us one language for describing structured probabilis-  tic models.
Another popular language is that of undirected models, otherwise known as Markov random fields (MRFs) or Markov networks (Kinder- mann 1980, ).
Directed models are most naturally applicable to situations where there is a clear reason to draw each arrow in one particular direction.
Often these are situations where we understand the causality and the causality only flows in one direction.
Earlier runners affect the finishing times of later runners; later runners do not affect the finishing times of earlier runners.
When the interactions seem to have no intrinsic direction, or to operate in both directions, it may be more appropriate to use an undirected model.
As an example of such a situation, suppose we want to model a distribution over three binary variables: whether or not you are sick, whether or not your coworker is sick, and whether or not your roommate is sick.
As in the relay race example, we can make simplifying assumptions about the kinds of interactions that take place.
Assuming that your coworker and your roommate do not know each other, it is very unlikely that one of them will give the other an infection such as a cold directly.
However, it is reasonably likely that either of them could give you a cold, and that you could pass it on to the other.
We can model the indirect transmission of  a cold from your coworker to your roommate by modeling the transmission of the cold from your coworker to you and the transmission of the cold from you to your roommate.
In this case, it is just as easy for you to cause your roommate to get sick as it is for your roommate to make you sick, so there is not a clean, uni-directional narrative on which to base the model.
As with directed models, if two nodes in an undirected model are connected by an edge, then the random variables corresponding to those nodes interact with each other directly.
Unlike directed models, the edge in an undirected model has no arrow, and is not associated with a conditional probability distribution.
STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING  hrhr hyhy hchc  Figure 16.3: An undirected graph representing how your roommate’s health hr, your health hy , and your work colleague’s health hc affect each other.
You and your roommate might infect each other with a cold, and you and your work colleague might do the same, but assuming that your roommate and your colleague do not know each other, they can only infect each other indirectly via you.
We denote the random variable representing your health as hy, the random variable representing your roommate’s health as hr , and the random variable representing your colleague’s health as hc.
Formally, an undirected graphical model is a structured probabilistic model defined on an undirected graph G .
For each clique C in the graph,3 a factor φ(C) (also called a clique potential) measures the affinity of the variables in that clique for being in each of their possible joint states.
( )C (16.3)  The unnormalized probability distribution is efficient to work with so long as all the cliques are small.
However, unlike in a Bayesian network, there is little structure to the  definition of the cliques, so there is nothing to guarantee that multiplying them together will yield a valid probability distribution.
Our example of the cold spreading between you, your roommate, and your colleague contains two cliques.
The factor for this clique can be defined by a table, and might have values resembling these:  hy = 0 hy = 1  hc = 0 2 1 hc = 1 1 10  3 A clique of the graph is a subset of nodes that are all connected to each other by an edge of  the graph.
STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING  A state of 1 indicates good health, while a state of 0 indicates poor health (having been infected with a cold).
The state where both of you are sick (because one of you has infected the other) is a higher affinity state, though still not as common as the state where both are healthy.
To complete the model, we would need to also define a similar factor for the clique containing hy and hr .
16.2.3 The Partition Function  While the unnormalized probability distribution is guaranteed to be non-negative everywhere, it is not guaranteed to sum or integrate to 1.
To obtain a valid probability distribution, we must use the corresponding normalized probability distribution:4  p( ) =x 1  Z p̃( )x (16.4)  where Z is the value that results in the probability distribution summing or integrating to 1:  Z =   p̃ d .
The normalizing constant Z is known as the partition function, a term borrowed from statistical physics.
Since Z is an integral or sum over all possible joint assignments of the state x it is often intractable to compute.
In order to be able to obtain the normalized probability distribution of an undirected model, the model structure and the definitions of the φ functions must be conducive to computing Z efficiently.
Such approximate algorithms are the topic of chapter .18  One important consideration to keep in mind when designing undirected models is that it is possible to specify the factors in such a way that Z does not exist.
This happens if some of the variables in the model are continuous and the integral  4 A distribution defined by normalizing a product of clique potentials is also called a Gibbs  distribution.
For example, suppose we want to model a single scalar variable x with a single clique potential∈ R φ x x( ) = 2 .
(16.6)  Since this integral diverges, there is no probability distribution corresponding to this choice of φ(x).
Sometimes the choice of some parameter of the φ functions determines whether the probability distribution is defined.
Positive β  results in a Gaussian distribution over x but all other values of β make φ impossible to normalize.
One key difference between directed modeling and undirected modeling is that directed models are defined directly in terms of probability distributions from the start, while undirected models are defined more loosely by φ functions that  are then converted into probability distributions.
One key idea to keep in mind while working with undirected models is that the domain of each of the variables has dramatic effect on the kind of probability distribution that a given set of φ functions corresponds to.
For example, consider an n-dimensional vector-valued random variable x and an undirected model parametrized by a vector of biases b .
The answer is that we do not have enough information, because we have not yet specified the domain of x.
If x ∈ {0,1}n, then p(x) factorizes into n independent distributions, with p(x i = 1) = sigmoid (bi).
Often, it is possible to leverage the effect of a carefully chosen domain of a variable in order to obtain complicated behavior from a relatively simple set of φ functions.
We will explore a practical application of this idea later, in section .20.6  16.2.4 Energy-Based Models  Many interesting theoretical results about undirected models depend on the as- sumption that ∀x, p̃(x) > 0.
A convenient way to enforce this condition is to use an (EBM) whereenergy-based model  p̃ E( ) = exp(x − ( ))x (16.7) 569    CHAPTER 16.
STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING  a b c  d e f  Figure 16.4: This graph implies that p(a b c d e f, , , , , ) can be written as 1 Z φa b, (a b, )φb c, (b c, )φa d, (a d, )φb e, (b e, )φe f, (e f, ) for an appropriate choice of the φ func- tions.
Because exp(z) is positive for all z, this guarantees that no energy function will result in a probability of zero for any state x.
If we learned the clique potentials directly, we would need to use constrained optimization to arbitrarily impose some specific minimal probability value.
By learning the energy function, we can use unconstrained optimization.5  The probabilities in an energy-based model can approach arbitrarily close to zero but never reach it.
For this reason, many energy-based models are called Boltzmann machines (Fahlman 1983 Ackley 1985 Hintonet al., ; et al., ; et al., 1984 Hinton and Sejnowski 1986; , ).
There is no accepted guideline for when to call a model an energy-based model and when to call it a Boltzmann machine.
The term Boltzmann machine was first introduced to describe a model with exclusively binary variables, but today many models such as the mean-covariance restricted Boltzmann machine incorporate real-valued variables as well.
While Boltzmann machines were originally defined to encompass both models with and without la- tent variables, the term Boltzmann machine is today most often used to designate models with latent variables, while Boltzmann machines without latent variables  are more often called Markov random fields or log-linear models.
Because exp(a) exp(b) = exp(a+b ), this means that different cliques in the undirected graph correspond to the different terms of the energy function.
In other words, an energy-based model is just a special kind of Markov network: the exponentiation makes each term in the energy function correspond to a factor for a different clique.
See figure for an example of how to read the16.5  5 For some models, we may still need to use constrained optimization to make sure exists.Z  570    CHAPTER 16.
STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING  a b c  d e f  Figure 16.5: This graph implies that E(a b c d e f, , , , , ) can be written as Ea b, (a b, ) + Eb c, (b c, ) +Ea d, (a d, ) +Eb e, (b e, ) +Ee f, (e f, ) for an appropriate choice of the per-clique energy functions.
Note that we can obtain the φ functions in figure by setting each16.4 φ to the exponential of the corresponding negative energy, e.g., φa b, (a b, ) = exp ( ( ))−E a b, .
One can view an energy-based model with multiple terms in its energy function as being a product of experts (Hinton 1999, ).
Each term of the energy function can be thought of as an “expert” that determines whether a particular soft constraint  is satisfied.
Each expert may enforce only one constraint that concerns only a low-dimensional projection of the random variables, but when combined by multiplication of probabilities, the experts together enforce a complicated high- dimensional constraint.
One part of the definition of an energy-based model serves no functional purpose from a machine learning point of view: the − sign in equation .
This16.7 − sign could be incorporated into the definition of E. For many choices of the function E , the learning algorithm is free to determine the sign of the energy anyway.
The  − sign is present primarily to preserve compatibility between the machine learning literature and the physics literature.
Many advances in probabilistic modeling were originally developed by statistical physicists, for whom E refers to actual,  physical energy and does not have arbitrary sign.
Terminology such as “energy” and “partition function” remains associated with these techniques, even though their mathematical applicability is broader than the physics context in which they were developed.
Some machine learning researchers (e.g., ( ), whoSmolensky 1986 referred to negative energy as harmony) have chosen to emit the negation, but this is not the standard convention.
Many algorithms that operate on probabilistic models do not need to compute pmodel (x) but only log p̃model(x).
For energy-based models with latent variables h, these algorithms are sometimes phrased in terms of the negative of this quantity,  571    CHAPTER 16.
STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING  a s b a s b  (a) (b)  Figure 16.6: (a) The path between random variable a and random variable b through s is active, because s is not observed.
Because the only path between a and b is through s, and that path is inactive, we can conclude that a and b are separated given s.  called the :free energy  F −( ) = x log   h  exp ( ( ))−E x h, .
16.2.5 Separation and D-Separation  The edges in a graphical model tell us which variables directly interact.
More formally, we would like to know which subsets of variables are conditionally independent from each other, given the values of other subsets of variables.
Identifying the conditional independences in a graph is very simple in the case of undirected models.
We say that a set of variables A is separated from another set of variables B given a third set of variables S if the graph structure implies that A is independent from B given S. If two variables a and b are connected by a path  involving only unobserved variables, then those variables are not separated.
We refer to paths involving only unobserved variables as “active” and paths including an observed variable as “inactive.”  When we draw a graph, we can indicate observed variables by shading them in.
See figure for a depiction of how active and inactive paths in an undirected16.6 model look when drawn in this way.
Similar concepts apply to directed models, except that in the context of directed models, these concepts are referred to as d-separation.
The “d” stands for “dependence.” D-separation for directed graphs is defined the same as separation  572    CHAPTER 16.
STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING  a  b c  d  Figure 16.7: An example of reading separation properties from an undirected graph.
Because observing b blocks the only path from a to c, we say that a and c are separated from each other given b.
The observation of b also blocks one path between a and d, but there is a second, active path between them.
Therefore, a and d are not separated given b.  for undirected graphs: We say that a set of variables A is d-separated from another set of variables B given a third set of variables S if the graph structure implies that is independent from given .A B S  As with undirected models, we can examine the independences implied by the graph by looking at what active paths exist in the graph.
As before, two variables  are dependent if there is an active path between them, and d-separated if no such path exists.
It is important to remember that separation and d-separation tell us only about those conditional independences that are implied by the graph.
In particular, it is always legitimate to use the complete graph (the graph with all possible edges) to represent any distribution.
In fact, some distributions contain independences that are not possible to represent with existing graphical notation.
Context-  specific independences are independences that are present dependent on the value of some variables in the network.
For example, consider a model of three binary variables: a, b and c. Suppose that when a is 0, b and c are independent, but when a is 1, b is deterministically equal to c. Encoding the behavior when a = 1 requires an edge connecting b and c. The graph then fails to indicate that b and c are independent when a .= 0  In general, a graph will never imply that an independence exists when it does not.
STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING  a s b  a s b  a  s  b a s b  a s b  c  (a) (b)  (c) (d)  Figure 16.8: All of the kinds of active paths of length two that can exist between random variables a and b .
(b)a and b are connected by a common cause s. For example, suppose s is a variable indicating whether or not there is a hurricane and a and b measure the wind speed at two different nearby weather monitoring outposts.
This kind of path can be blocked by observing s. If we already know there is a hurricane, we expect to see high winds at b, regardless of what is observed at a.
A lower than expected wind at a (for a hurricane) would not change our expectation of winds at b (knowing there is a hurricane).
If you observe that she is not at work, you can presume she is probably sick or on vacation, but it is not especially likely that both have happened at the same time.
For example, suppose that c is a variable representing whether you have received a report from your colleague.
If you notice that you have not received the report, this increases your estimate of the probability that she is not at work today, which in turn makes it more likely that she is either sick or on vacation.
The only way to block a path through a V-structure is to observe none of the descendants of the shared child.
STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING  a b  c  d e  Figure 16.9: From this graph, we can read out several d-separation properties.
• a and e are d-separated given c. • d and e are d-separated given c.  We can also see that some variables are no longer d-separated when we observe some variables:  • a and b are not d-separated given c. • a and b are not d-separated given d.  575    CHAPTER 16.
STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING  16.2.6 Converting between Undirected and Directed Graphs  We often refer to a specific machine learning model as being undirected or directed.
This choice of wording can be somewhat misleading, because no probabilistic model is inherently directed or undirected.
Instead, some models are most easily described using a directed graph, or most easily described using an undirected graph.
We may choose to use either directed modeling or undirected modeling based on which approach can capture the most independences in the probability distribution or which approach uses the fewest edges to describe the distribution.
Even while working with a single probability distribution, we may sometimes switch between different modeling languages.
Sometimes a different language becomes more appropriate if we observe a certain subset of variables, or if we wish to perform a different computational task.
For example, the directed model description often provides a straightforward approach to efficiently draw samples from the model (described in section )16.3 while the undirected model formulation is often useful for deriving approximate inference procedures (as we will see in chapter , where the role of undirected19 models is highlighted in equation ).19.56  Every probability distribution can be represented by either a directed model or by an undirected model.
In the worst case, one can always represent any  distribution by using a “complete graph.” In the case of a directed model, the complete graph is any directed acyclic graph where we impose some ordering on the random variables, and each variable has all other variables that precede it in the ordering as its ancestors in the graph.
For an undirected model, the complete graph is simply a graph containing a single clique encompassing all of the variables.
See figure for an example.16.10  Of course, the utility of a graphical model is that the graph implies that some variables do not interact directly.
When we represent a probability distribution with a graph, we want to choose a graph that implies as many independences as possible, without implying any  independences that do not actually exist.
STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING  Figure 16.10: Examples of complete graphs, which can describe any probability distribution.
We choose an ordering of the variables and draw an arc from each variable to every variable that comes after it in the ordering.
using directed models, while other distributions can be represented more efficiently using undirected models.
In other words, directed models can encode some independences that undirected models cannot encode, and vice versa.
Directed models are able to use one specific kind of substructure that undirected models cannot represent perfectly.
The structure occurs when two random variables a and b are both parents of a third random variable c, and there is no edge directly connecting a and b in either direction.
(The name “immorality” may seem strange; it was coined in the graphical models literature as a joke about unmarried parents.)
For every pair of variables x and y, we add an undirected edge connecting x and y to  U if there is a directed edge (in either direction) connecting x and y in D or if x and y are both parents in D of a third variable z.
Likewise, undirected models can include substructures that no directed model can represent perfectly.
Specifically, a directed graph cannot capture all of theD conditional independences implied by an undirected graph U if U contains a loop of length greater than three, unless that loop also contains a chord .
A loop is a sequence of variables connected by undirected edges, with the last variable in the sequence connected back to the first variable in the sequence.
If U has loops of length four or greater and does not have chords for these loops, we must add the chords before we can convert it to a directed model.
STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING  h1h1 h2h2 h3h3  v1v1 v2v2 v3v3  a b  c  a  c  b  h1h1 h2h2 h3h3  v1v1 v2v2 v3v3  a b  c  a  c  b  Figure 16.11: Examples of converting directed models (top row) to undirected models (bottom row) by constructing moralized graphs.
(Left)This simple chain can be converted to a moralized graph merely by replacing its directed edges with undirected edges.
The resulting undirected model implies exactly the same set of independences and conditional independences.
This graph is the simplest directed model that cannot be converted(Center) to an undirected model without losing some independences.
To capture this dependence, the undirected model must include a clique encompassing all three variables.
(Right)In general, moralization may add many edges to the graph, thus losing many implied independences.
For example, this sparse coding graph requires adding moralizing edges between every pair of hidden units, thus introducing a quadratic number of new direct dependences.
STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING  a b  d c  a b  d c  a b  d c  Figure 16.12: Converting an undirected model to a directed model.
(Left)This undirected model cannot be converted directed to a directed model because it has a loop of length four with no chords.
Specifically, the undirected model encodes two different independences that no directed model can capture simultaneously: a c b d⊥ | { , } and b d a c⊥ | { , } .
To(Center) convert the undirected model to a directed model, we must triangulate the graph, by ensuring that all loops of greater than length three have a chord.
To do so, we can either add an edge connecting a and c or we can add an edge connecting b and d. In this example, we choose to add the edge connecting a and c. To finish the conversion(Right) process, we must assign a direction to each edge.
One way to avoid directed cycles is to impose an ordering over the nodes, and always point each edge from the node that comes earlier in the ordering to the node that comes later in the ordering.
The graph formed by adding chords to U is known as a chordal or triangulated graph, because all the loops can now be described in terms of smaller, triangular  loops.
When doing so, we must not create a directed cycle in D, or the result does not define a valid directed probabilistic model.
One way to assign directions to the edges in D is to impose an ordering on the random variables, then point each edge from the node that comes earlier in the ordering to the node that comes later in the ordering.
See figure for a demonstration.16.12  16.2.7 Factor Graphs  Factor graphs are another way of drawing undirected models that resolve an ambiguity in the graphical representation of standard undirected model syntax.
Ambiguity arises because it is not clear if each clique actually has a corresponding factor whose scope encompasses the entire clique—for example, a clique containing three nodes may correspond to a factor over all three nodes, or may correspond to three factors that each contain only a pair of the nodes.
STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING  Factor graphs resolve this ambiguity by explicitly representing the scope of each φ function.
Specifically, a factor graph is a graphical representation of an undirected model that consists of a bipartite undirected graph.
A variable and a factor are connected in the graph if and only if the variable is one of the arguments to the factor in  the unnormalized probability distribution.
No factor may be connected to another factor in the graph, nor can a variable be connected to a variable.
See figure 16.13 for an example of how factor graphs can resolve ambiguity in the interpretation of undirected networks.
a b  c  a b  c  f1f1  a b  c  f1f1  f2f2  f3f3  Figure 16.13: An example of how a factor graph can resolve ambiguity in the interpretation of undirected networks.
(Left)An undirected network with a clique involving three variables: a, b and c. A factor graph corresponding to the same undirected model.
Representation, inference, and learning are all asymptotically cheaper in this factor graph than in the factor graph depicted in the center, even though both require the same undirected graph to represent.
16.3 Sampling from Graphical Models  Graphical models also facilitate the task of drawing samples from a model.
One advantage of directed graphical models is that a simple and efficient proce- dure called ancestral sampling can produce a sample from the joint distribution represented by the model.
The basic idea is to sort the variables xi in the graph into a topological ordering, so that for all i and j, j is greater than i if xi is a parent of xj .
In other words, we first sample x1 ∼ P (x1), then sample P (x2 | PaG(x2)), and so on, until finally we sample P (xn | PaG(xn)).
So long as each conditional distribution p(xi | PaG(xi )) is easy to sample from, then the whole model is easy to sample from.
The topological sorting operation guarantees that we can read the conditional distributions in equation and16.1 sample from them in order.
Without the topological sorting, we might attempt to sample a variable before its parents are available.
Ancestral sampling is generally very fast (assuming sampling from each condi- tional is easy) and convenient.
When we wish to sample from a subset of the variables in a directed graphical model, given some other variables, we often require that all the condition- ing variables come earlier than the variables to be sampled in the ordered graph.
In this case, we can sample from the local conditional probability distributions specified by the model distribution.
Otherwise, the conditional distributions we need to sample from are the posterior distributions given the observed variables.
We can sample from undirected models by converting them to directed models, but this often requires solving intractable inference problems (to determine the marginal distribution over the root nodes of the new directed graph) or requires introducing so many edges that the resulting directed model becomes intractable.
Sampling from an undirected model without first converting it to a directed model seems to require resolving cyclical dependencies.
Every variable interacts with every other variable, so there is no clear beginning point for the sampling process.
Unfortunately,  drawing samples from an undirected graphical model is an expensive, multi-pass process.
We iteratively visit each variable xi and draw a sample conditioned on all of the other variables, from p(xi | x−i).
Due to the separation properties of the graphical model, we can equivalently condition on only the neighbors of xi.
Unfortunately, after we have made one pass through the graphical model and sampled all n variables, we still do not have a fair sample from p(x).
STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING  process and resample all n variables using the updated values of their neighbors.
Asymptotically, after many repetitions, this process converges to sampling from the correct distribution.
It can be difficult to determine when the samples have reached a sufficiently accurate approximation of the desired distribution.
Sampling techniques for undirected models are an advanced topic, covered in more detail in chapter .17  16.4 Advantages of Structured Modeling  The primary advantage of using structured probabilistic models is that they allow us to dramatically reduce the cost of representing probability distributions as well as learning and inference.
Sampling is also accelerated in the case of directed models, while the situation can be complicated with undirected models.
The primary mechanism that allows all of these operations to use less runtime and memory is choosing to not model certain interactions.
Anywhere there is not an edge, the model specifies the assumption that we do not need to model a direct interaction.
A less quantifiable benefit of using structured probabilistic models is that  they allow us to explicitly separate representation of knowledge from learning of knowledge or inference given existing knowledge.
We can design, analyze, and evaluate learning algorithms and inference algorithms that are applicable to broad classes of graphs.
Independently, we can design models that capture the relationships we believe are important in our data.
We can then combine these different algorithms and structures and obtain a Cartesian product of different possibilities.
16.5 Learning about Dependencies  A good generative model needs to accurately capture the distribution over the observed or “visible” variables v .
In the context of deep learning, the approach most commonly used to model these dependencies is to introduce several latent or “hidden” variables, h. The model can then capture dependencies between any pair of variables v i and vj indirectly, via direct dependencies between vi and h, and direct dependencies between and vh j .
STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING  have very large numbers of parents per node in a Bayesian network or very large cliques in a Markov network.
Just representing these higher order interactions is costly—both in a computational sense, because the number of parameters that must be stored in memory scales exponentially with the number of members in a clique, but also in a statistical sense, because this exponential number of parameters requires a wealth of data to estimate accurately.
When the model is intended to capture dependencies between visible variables with direct connections, it is usually infeasible to connect all variables, so the  graph must be designed to connect those variables that are tightly coupled and omit edges between other variables.
An entire field of machine learning called structure learning is devoted to this problem For a good reference on structure learning, see (Koller and Friedman 2009, ).
Candidate structures with a small number of edges added or removed are then proposed as the next step of the search.
Using latent variables instead of adaptive structure avoids the need to perform discrete searches and multiple rounds of training.
A fixed structure over visible  and hidden variables can use direct interactions between visible and hidden units to impose indirect interactions between visible units.
Using simple parameter learning techniques we can learn a model with a fixed structure that imputes the right structure on the marginal .p( )v  Latent variables have advantages beyond their role in efficiently capturing p(v).
The new variables h also provide an alternative representation for v. For example, as discussed in section , the mixture of Gaussians model learns a latent variable3.9.6 that corresponds to which category of examples the input was drawn from.
This means that the latent variable in a mixture of Gaussians model can be used to do classification.
In chapter we saw how simple probabilistic models like sparse14 coding learn latent variables that can be used as input features for a classifier,  or as coordinates along a manifold.
Other models can be used in this same way, but deeper models and models with different kinds of interactions can create even richer descriptions of the input.
Often, given some model of v and h, experimental observations show that E[h v| ] or argmaxhp(h v, ) is a good feature mapping for v.  583    CHAPTER 16.
STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING  16.6 Inference and Approximate Inference  One of the main ways we can use a probabilistic model is to ask questions about how variables are related to each other.
In a latent variable model, we might want to extract features E[h v| ] describing the observed variables v. Sometimes we need to solve such problems in order to perform other tasks.
Because  log ( ) = p v Eh h∼p( |v) [log ( ) log ( )]p h v, − p h v| , (16.9)  we often want to compute p(h | v) in order to implement a learning rule.
All of these are examples of inference problems in which we must predict the value of some variables given other variables, or predict the probability distribution over some variables given the value of other variables.
Unfortunately, for most interesting deep models, these inference problems are intractable, even when we use a structured graphical model to simplify them.
The graph structure allows us to represent complicated, high-dimensional distributions with a reasonable number of parameters, but the graphs used for deep learning are usually not restrictive enough to also allow efficient inference.
It is straightforward to see that computing the marginal probability of a general graphical model is #P hard.
Problems in NP require determining only whether a problem has a solution and finding a solution if one exists.
To construct a worst-case graphical model, imagine that we define a graphical model over the binary variables in a 3-SAT problem.
We can then add one binary latent variable per clause that indicates whether each clause is satisfied.
This can be done without making a large clique, by building a reduction tree of latent variables, with each node in the tree reporting whether two other  variables are satisfied.
Due to the uniform distribution over the literals, the marginal distribution over the root of the reduction tree specifies what fraction of assignments satisfy the problem.
While this is a contrived worst-case example, NP hard graphs commonly arise in practical real-world scenarios.
In the context of deep learning, this usually refers to variational inference, in which we approximate the  584    CHAPTER 16.
STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING  true distribution p(h | v) by seeking an approximate distribution q (h v| ) that is as close to the true one as possible.
This and other techniques are described in depth in chapter .19  16.7 The Deep Learning Approach to Structured Prob-  abilistic Models  Deep learning practitioners generally use the same basic computational tools as other machine learning practitioners who work with structured probabilistic models.
However, in the context of deep learning, we usually make different design decisions  about how to combine these tools, resulting in overall algorithms and models that have a very different flavor from more traditional graphical models.
In the context of graphical models, we can define the depth of a model in terms of the graphical model graph rather than the computational graph.
We can think of a latent variable hi as being at depth j if the shortest path from h i to an observed variable is j steps.
Many generative models used for deep learning have no latent variables or only one layer of latent variables, but use deep computational graphs to define the conditional distributions within a model.
Even shallow models used for deep learning purposes (such as pretraining shallow models that will later be composed to form deep ones) nearly always have a single, large layer of latent variables.
Complicated nonlinear interactions between variables are accomplished via indirect connections that flow through multiple latent variables.
By contrast, traditional graphical models usually contain mostly variables that are at least occasionally observed, even if many of the variables are missing at random from some training examples.
Traditional models mostly use higher-order terms and structure learning to capture complicated nonlinear interactions between  variables.
The deep learning practitioner typically does not intend for the latent variables to take on any specific semantics ahead of time—the training algorithm is free to invent the concepts it needs to model a particular dataset.
STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING  usually not very easy for a human to interpret after the fact, though visualization techniques may allow some rough characterization of what they represent.
When latent variables are used in the context of traditional graphical models, they are often designed with some specific semantics in mind—the topic of a document, the intelligence of a student, the disease causing a patient’s symptoms, etc.
These models are often much more interpretable by human practitioners and often have more theoretical guarantees, yet are less able to scale to complex problems and are not reusable in as many different contexts as deep models.
Deep graphical models typically have large groups of units that are all connected to other groups of units, so that the interactions between two groups may be described by a single matrix.
Traditional graphical models have very few connections and the choice of connections for each variable may be individually designed.
Traditional approaches to graphical models typically aim to maintain the tractability of exact inference.
When this constraint is too limiting, a popular approximate inference algorithm is an algorithm called loopy belief propagation.
By comparison, models used in deep learning tend to  connect each visible unit vi to very many hidden units hj, so that h can provide a distributed representation of vi (and probably several other observed variables too).
Distributed representations have many advantages, but from the point of view of graphical models and computational complexity, distributed representations have the disadvantage of usually yielding graphs that are not sparse enough for the traditional techniques of exact inference and loopy belief propagation to be relevant.
As a consequence, one of the most striking differences between the larger graphical models community and the deep graphical models community is that loopy belief propagation is almost never used for deep learning.
Most deep models are instead designed to make Gibbs sampling or variational inference algorithms efficient.
Another consideration is that deep learning models contain a very large number of latent variables, making efficient numerical code essential.
This provides  an additional motivation, besides the choice of high-level inference algorithm, for grouping the units into layers with a matrix describing the interaction between two layers.
This allows the individual steps of the algorithm to be implemented with efficient matrix product operations, or sparsely connected generalizations, like block diagonal matrix products or convolutions.
Finally, the deep learning approach to graphical modeling is characterized by a marked tolerance of the unknown.
Rather than simplifying the model until all quantities we might want can be computed exactly, we increase the power of  586    CHAPTER 16.
STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING  the model until it is just barely possible to train or use.
We often use models whose marginal distributions cannot be computed, and are satisfied simply to draw approximate samples from these models.
We often train models with an intractable objective function that we cannot even approximate in a reasonable amount of time, but we are still able to approximately train the model if we can efficiently obtain an estimate of the gradient of such a function.
The deep learning approach is often to figure out what the minimum amount of information we absolutely need is, and then to figure out how to get a reasonable approximation of that  information as quickly as possible.
16.7.1 Example: The Restricted Boltzmann Machine  The restricted Boltzmann machine (RBM) ( , ) orSmolensky 1986 harmonium is the quintessential example of how graphical models are used for deep learning.
Instead, it has a single layer of latent variables that may be used to learn a representation for the input.
Here, we show how the  RBM exemplifies many of the practices used in a wide variety of deep graphical models: its units are organized into large groups called layers, the connectivity between layers is described by a matrix, the connectivity is relatively dense, the model is designed to allow efficient Gibbs sampling, and the emphasis of the model design is on freeing the training algorithm to learn latent variables whose semantics were not specified by the designer.
Its energy function is  E ,(v h b) = − v c− h v− Wh, (16.10)  where b, c , andW are unconstrained, real-valued, learnable parameters.
We can see that the model is divided into two groups of units: v andh, and the interaction  between them is described by a matrix W .
As this figure makes clear, an important aspect of this model is16.14 that there are no direct interactions between any two visible units or between any two hidden units (hence the “restricted,” a general Boltzmann machine may have arbitrary connections).
The restrictions on the RBM structure yield the nice properties  p( ) = Πh v| ip(hi | v) (16.11)  587    CHAPTER 16.
STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING  h1h1 h2h2 h3h3  v1v1 v2v2 v3v3  h4h4  Figure 16.14: An RBM drawn as a Markov network.
For the binary RBM we obtain:  P (hi = 1 ) = | v σ  vW:,i + bi   , (16.13)  P (hi = 0 ) = 1| v − σ  vW:,i + bi   .
(16.14)  Together these properties allow for efficient block Gibbs sampling, which alter- nates between sampling all of h simultaneously and sampling all of v simultane- ously.
Samples generated by Gibbs sampling from an RBM model are shown in figure .16.15  Since the energy function itself is just a linear function of the parameters, it is easy to take its derivatives.
(16.15)  These two properties—efficient Gibbs sampling and efficient derivatives—make training convenient.
In chapter , we will see that undirected models may be18 trained by computing such derivatives applied to samples from the model.
Training the model induces a representation h of the data v. We can often use Eh h∼p( |v)[ ]h as a set of features to describe .v  Overall, the RBM demonstrates the typical deep learning approach to graph- ical models: representation learning accomplished via layers of latent variables, combined with efficient interactions between layers parametrized by matrices.
The language of graphical models provides an elegant, flexible and clear language  for describing probabilistic models.
In the chapters ahead, we use this language, among other perspectives, to describe a wide variety of deep probabilistic models.
STRUCTURED PROBABILISTIC MODELS FOR DEEP LEARNING  Figure 16.15: Samples from a trained RBM, and its weights.
Image reproduced with permission from ( ).LISA 2008 (Left)Samples from a model trained on MNIST, drawn using Gibbs sampling.
On the other hand, the RBM posterior is factorial, while the sparse coding posterior is not,p( )h v| p( )h v| so the sparse coding model may be better for feature extraction.
                                     Chapter 17  Monte Carlo Methods  Randomized algorithms fall into two rough categories: Las Vegas algorithms and Monte Carlo algorithms.
The amount of error can typically be reduced by expending more resources (usually running time and memory).
Many problems in machine learning are so difficult that we can never expect to obtain precise answers to them.
17.1 Sampling and Monte Carlo Methods  Many important technologies used to accomplish machine learning goals are based on drawing samples from some probability distribution and using these samples to form a Monte Carlo estimate of some desired quantity.
Sometimes we use this to provide a significant speedup to a costly but tractable sum, as in the case when we subsample the full training cost with minibatches.
In other cases, our learning algorithm requires us to approximate an intractable sum or integral, such as the gradient of the log partition function of an undirected model.
In many other cases, sampling is actually our goal, in the sense that we want to train a model that can sample from the training distribution.
17.1.2 Basics of Monte Carlo Sampling  When a sum or an integral cannot be computed exactly (for example the sum has an exponential number of terms and no exact simplification is known) it is often possible to approximate it using Monte Carlo sampling.
The idea is to view the sum or integral as if it was an expectation under some distribution and to approximate the expectation by a corresponding average.
Let  s =   x  p f E( )x ( ) = x p[ ( )]f x (17.1)  or  s =   p f d E( )x ( )x x = p[ ( )]f x (17.2)  be the sum or integral to estimate, rewritten as an expectation, with the constraint that p is a probability distribution (for the sum) or a probability density (for the integral) over random variable .x  We can approximate s by drawing n samples x(1), .
The first trivial  observation is that the estimator ŝ is unbiased, since  E[ŝn] = 1  n  n  i=1  E[ (f x( )i )] = 1  n  n  i=1  s s.= (17.4)  But in addition, the law of large numbers states that if the samples x( )i are i.i.d., then the average converges almost surely to the expected value:  lim n→∞  ŝn = s, (17.5)  591    CHAPTER 17.
MONTE CARLO METHODS  provided that the variance of the individual terms, Var[f (x( )i )], is bounded.
The variance Var[ŝn] decreases and converges to 0, so long as Var[ (f x( )i )] <∞:  Var[ŝn] = 1  n2  n  i=1  Var[ ( )]f x (17.6)  = Var[ ( )]f x  n .
(17.7)  This convenient result also tells us how to estimate the uncertainty in a Monte Carlo average or equivalently the amount of expected error of the Monte Carlo approximation.
We compute both the empirical average of the f (x( )i ) and their  empirical variance,1 and then divide the estimated variance by the number of samples n to obtain an estimator of Var[̂sn].
The central limit theorem tells us that the distribution of the average, ŝn , converges to a normal distribution with mean s and variance  Var[ ( )]f x n .
This allows us to estimate confidence intervals  around the estimate ŝn, using the cumulative distribution of the normal density.
However, all this relies on our ability to easily sample from the base distribution p(x), but doing so is not always possible.
When it is not feasible to sample from p, an alternative is to use importance sampling, presented in section .
A17.2 more general approach is to form a sequence of estimators that converge towards the distribution of interest.
That is the approach of Monte Carlo Markov chains (section ).17.3  17.2 Importance Sampling  An important step in the decomposition of the integrand (or summand) used by the Monte Carlo method in equation is deciding which part of the integrand should17.2 play the role the probability p(x) and which part of the integrand should play the role of the quantity f(x) whose expected value (under that probability distribution) is to be estimated.
There is no unique decomposition because p(x)f(x) can always be rewritten as  p f q( )x ( ) = x ( )x p f( )x ( )x  q( )x , (17.8)  where we now sample from q and average pfq .
In many cases, we wish to compute an expectation for a given p and an f , and the fact that the problem is specified  1 The unbiased estimator of the variance is often preferred, in which the sum of squared  differences is divided by instead of .n − 1 n  592    CHAPTER 17.
MONTE CARLO METHODS  from the start as an expectation suggests that this p and f would be a natural choice of decomposition.
However, the original specification of the problem may not be the the optimal choice in terms of the number of samples required to obtain a given level of accuracy.
Because of the identity shown in equation , any Monte Carlo estimator17.8  ŝp = 1  n  n  i ,=1 x( )i ∼p  f(x( )i ) (17.9)  can be transformed into an importance sampling estimator  ŝq = 1  n  n  i ,=1 x( )i ∼q  p(x( )i ) (f x( )i )  q(x( )i ) .
(17.10)  We see readily that the expected value of the estimator does not depend on :q  Eq [ŝq] = Eq[ŝp ] = s. (17.11)  However, the variance of an importance sampling estimator can be greatly sensitive  to the choice of .
(17.12)  The minimum variance occurs when isq  q∗( ) =x p f( )x | ( )x |  Z , (17.13)  where Z is the normalization constant, chosen so that q∗(x) sums or integrates to 1 as appropriate.
In fact, when f(x) does not change sign, Var [ŝq∗ ] = 0, meaning that when the optimal distribution is used.a single sample is sufficient Of course, this is only because the computation of q∗ has essentially solved the original problem, so it is usually not practical to use this approach of drawing a single sample from the optimal distribution.
Any choice of sampling distribution q is valid (in the sense of yielding the correct expected value) and q∗ is the optimal one (in the sense of yielding minimum variance).
Sampling from q∗ is usually infeasible, but other choices of q can be feasible while still reducing the variance somewhat.
MONTE CARLO METHODS  Another approach is to use biased importance sampling , which has the advantage of not requiring normalized p or q.
In the case of discrete variables, the biased importance sampling estimator is given by  ŝBIS =  n i=1  p(x( )i )  q(x( )i ) f(x( )i )  n i=1  p(x( )i )  q(x( )i )  (17.14)  =  n i=1  p(x( )i )  q̃(x( )i ) f(x( )i )  n i=1  p(x( )i )  q̃(x( )i )  (17.15)  =  n i=1  p̃(x( )i )  q̃(x( )i ) f(x( )i )  n i=1  p̃(x( )i )  q̃(x( )i )  , (17.16)  where p̃ and q̃ are the unnormalized forms of p and q and the x( )i are the samples from q.
This estimator is biased because E[ŝBIS] = s, except asymptotically when n→ ∞ and the denominator of equation converges to 1.
Although a good choice of q can greatly improve the efficiency of Monte Carlo estimation, a poor choice of q can make the efficiency much worse.
Going back to equation , we see that if there are samples of17.12 q for which  p f( )x | ( )x | q( )x is large,  then the variance of the estimator can get very large.
The q distribution is usually chosen to be a very simple distribution so that it is easy to sample from.
When q(x( )i )  p(x( )i )|f (x( )i )|, importance sampling collects useless samples (summing tiny numbers or zeros).
On the other hand, when  q(x( )i )  p(x( )i )|f(x( )i )|, which will happen more rarely, the ratio can be huge.
Because these latter events are rare, they may not show up in a typical sample, yielding typical underestimation of s , compensated rarely by gross overestimation.
Such very large or very small numbers are typical when x is high dimensional, because in high dimension the dynamic range of joint probabilities can be very large.
In spite of this danger, importance sampling and its variants have been found very useful in many machine learning algorithms, including deep learning algorithms.
For example, see the use of importance sampling to accelerate training in neural language models with a large vocabulary (section ) or other neural nets12.4.3.3 with a large number of outputs.
See also how importance sampling has been used to estimate a partition function (the normalization constant of a probability  594    CHAPTER 17.
MONTE CARLO METHODS  distribution) in section , and to estimate the log-likelihood in deep directed18.7 models such as the variational autoencoder, in section .
Importance sampling20.10.3 may also be used to improve the estimate of the gradient of the cost function used to train model parameters with stochastic gradient descent, particularly for models such as classifiers where most of the total value of the cost function comes from a small number of misclassified examples.
Sampling more difficult examples more frequently can reduce the variance of the gradient in such cases ( , ).Hinton 2006  17.3 Markov Chain Monte Carlo Methods  In many cases, we wish to use a Monte Carlo technique but there is no tractable method for drawing exact samples from the distribution pmodel(x) or from a good (low variance) importance sampling distribution q(x).
In the context of deep learning, this most often happens when pmodel(x) is represented by an undirected model.
In these cases, we introduce a mathematical tool called aMarkov chain to approximately sample from pmodel(x).
The family of algorithms that use Markov chains to perform Monte Carlo estimates is calledMarkov chain Monte Carlo methods (MCMC).
Markov chain Monte Carlo methods for machine learning are described at greater length in Koller and Friedman 2009( ).
The most standard,  generic guarantees for MCMC techniques are only applicable when the model does not assign zero probability to any state.
Therefore, it is most convenient to present these techniques as sampling from an energy-based model (EBM) p(x) ∝ −exp ( E( ))x as described in section .
MCMC methods are in fact more broadly applicable and can be used with many probability distributions that contain zero probability states.
However, the theoretical guarantees concerning the behavior of MCMC methods must be proven on a case-by-case basis for different families of such distributions.
In the context of deep learning, it is most common to rely on the most general theoretical guarantees that naturally apply to all energy-based models.
To understand why drawing samples from an energy-based model is difficult, consider an EBM over just two variables, defining a distribution a b .
In orderp( , ) to sample a, we must draw a from p(a b| ), and in order to sample b, we must draw it from p(b a| ).
To perform ancestral sampling one simply samples each of the variables in topological order, conditioning on each variable’s parents, which are guaranteed to have already been sampled (section ).
Formally, a Markov chain is defined by a random state x and a transition distribution T(x | x) specifying the probability that a random update will go to state x if it starts in state x.
Running the Markov chain means repeatedly updating the state x to a value x  sampled from T (x | x).
To gain some theoretical understanding of how MCMC methods work, it is  useful to reparametrize the problem.
Different integer values of x map back to different states in the original problem.x  Consider what happens when we run infinitely many Markov chains in parallel.
All of the states of the different Markov chains are drawn from some distribution q( )t (x), where t indicates the number of time steps that have elapsed.
At the beginning, q(0) is some distribution that we used to arbitrarily initialize x for each Markov chain.
Our goal is for q( )t ( )x to converge to .p x( )  Because we have reparametrized the problem in terms of positive integer x, we can describe the probability distribution using a vector , withq v  q i v( = x ) = i.
The probability of a single state landing in state x is given by  q( +1)t (x ) =   x  q( )t ( ) (x T x | x .)
(17.18)  Using our integer parametrization, we can represent the effect of the transition  operator using a matrix .
Rather than writing it in17.18 terms of q and T to understand how a single state is updated, we may now use v and A to describe how the entire distribution over all the different Markov chains  (running in parallel) shifts as we apply an update:  v( )t = Av( 1)t− .
MONTE CARLO METHODS  Applying the Markov chain update repeatedly corresponds to multiplying by the matrix A repeatedly.
(17.21)  The matrix A has special structure because each of its columns represents a probability distribution.
If there is a non-zero probability of transitioning from any state x to any other state x for some power t, then the Perron-Frobenius theorem ( , ;Perron 1907 Frobenius 1908, ) guarantees that the largest eigenvalue is real and equal to .
Over time, we can1 see that all of the eigenvalues are exponentiated:  v( )t =  V λ Vdiag( ) −1  t v(0) = ( )V diag λ tV −1v(0).
(17.22)  This process causes all of the eigenvalues that are not equal to to decay to zero.1 Under some additional mild conditions,A is guaranteed to have only one eigenvector with eigenvalue .
At convergence,equilibrium distribution  v = = Av v, (17.23)  and this same condition holds for every additional step.
This condition guarantees that once we have reached the stationary1  distribution, repeated applications of the transition sampling procedure do not change the over the states of all the various Markov chains (althoughdistribution transition operator does change each individual state, of course).
If we have chosen T correctly, then the stationary distribution q will be equal to the distribution p we wish to sample from.
We will describe how to choose T shortly, in section .17.4  Most properties of Markov Chains with countable states can be generalized to continuous variables.
In this situation, some authors call the Markov Chain a Harris chain but we use the term Markov Chain to describe both conditions.
In general, a Markov chain with transition operator T will converge, under mild conditions, to a fixed point described by the equation  q (x) = Ex∼qT (x  | x), (17.24)  which in the discrete case is just rewriting equation .
When17.23 x is discrete, the expectation corresponds to a sum, and when x is continuous, the expectation corresponds to an integral.
MONTE CARLO METHODS  Regardless of whether the state is continuous or discrete, all Markov chain methods consist of repeatedly applying stochastic updates until eventually the state begins to yield samples from the equilibrium distribution.
Running the Markov chain until it reaches its equilibrium distribution is called “burning in” the Markov chain.
After the chain has reached equilibrium, a sequence of infinitely many samples may be drawn from from the equilibrium distribution.
They are identically distributed but any two successive samples will be highly correlated with each other.
One way to mitigate this problem is to return only every n successive samples, so that our estimate of the statistics of the equilibrium distribution is not as biased by the correlation between an MCMC sample and the next several samples.
Markov chains are thus expensive to use because of the time required to burn in to the equilibrium distribution and the time required to transition from one sample to another reasonably decorrelated sample after reaching equilibrium.
The strategy of using only a single Markov chain to generate all samples and the strategy of using one Markov chain for each desired sample are two extremes; deep learning practitioners usually use a number of chains that is similar to the number of examples in a minibatch and then draw as many samples  as are needed from this fixed set of Markov chains.
Another difficulty is that we do not know in advance how many steps the Markov chain must run before reaching its equilibrium distribution.
If we analyze the Markov chain from the point of view of a matrix A acting on a vector of probabilities v, then we know that the chain mixes when At  has effectively lost all of the eigenvalues from A besides the unique eigenvalue of .1 This means that the magnitude of the second largest eigenvalue will determine the  mixing time.
The number of states that our probabilistic model can visit is exponentially large in the number of variables, so it is infeasible to represent v, A, or the eigenvalues of A.
Instead, we simply run the Markov chain for an amount of time that we roughly estimate to be sufficient, and use heuristic methods to determine whether the chain has mixed.
These heuristic methods include manually inspecting samples or measuring correlations between  598    CHAPTER 17.
17.4 Gibbs Sampling  So far we have described how to draw samples from a distribution q(x) by repeatedly updating x x←  ∼ T (x | x).
The first one is to derive T from a given learned pmodel , described below with the case of sampling from EBMs.
The second one is to directly parametrize T and learn it, so that its stationary distribution implicitly defines the pmodel of interest.
Examples of this second approach are discussed in sections and .20.12 20.13  In the context of deep learning, we commonly use Markov chains to draw samples from an energy-based model defining a distribution pmodel(x).
A conceptually simple and effective approach to building a Markov chain that samples from pmodel(x) is to use Gibbs sampling, in which sampling from  T (x  | x) is accomplished by selecting one variable xi and sampling it from pmodel conditioned on its neighbors in the undirected graph G defining the structure of the energy-based model.
It is also possible to sample several variables at the same time so long as they are conditionally independent given all of their neighbors.
As shown in the RBM example in section , all of the hidden units of an16.7.1 RBM may be sampled simultaneously because they are conditionally independent from each other given all of the visible units.
Likewise, all of the visible units may be sampled simultaneously because they are conditionally independent from each other given all of the hidden units.
Gibbs sampling approaches that update many variables simultaneously in this way are called block Gibbs sampling.
In the context of the deep learning approach to undirected modeling, it is rare to use any approach other than Gibbs sampling.
17.5 The Challenge of Mixing between Separated Modes  The primary difficulty involved with MCMC methods is that they have a tendency tomix poorly.
MONTE CARLO METHODS  from p(x) would be completely independent from each other and would visit many different regions in x space proportional to their probability.
MCMC methods with slow mixing can be seen as inadvertently performing something resembling noisy gradient descent on the energy function, or equivalently noisy hill climbing on the probability, with respect to the state of the chain (the random variables being sampled).
The chain tends to take small steps (in the space of the state of the  Markov chain), from a configuration x( 1)t− to a configuration x( )t , with the energy E(x( )t ) generally lower or approximately equal to the energy E(x( 1)t− ), with a preference for moves that yield lower energy configurations.
When starting from a rather improbable configuration (higher energy than the typical ones from p(x)), the chain tends to gradually reduce the energy of the state and only occasionally move to another mode.
Once the chain has found a region of low energy (for example, if the variables are pixels in an image, a region of low energy might be a connected manifold of images of the same object), which we call a mode, the chain will tend to walk around that mode (following a kind of random walk).
Once in a while it will step out of that mode and generally return to it or (if it finds an escape route) move towards another mode.
The problem is that successful escape routes are rare for many interesting distributions, so the Markov chain will  continue to sample the same mode longer than it should.
This is very clear when we consider the Gibbs sampling algorithm (section ).17.4 In this context, consider the probability of going from one mode to a nearby mode within a given number of steps.
Transitions between two modes that are separated by a high energy barrier (a region of low probability) are exponentially less likely (in terms of the height of the energy barrier).
The problem arises when there are multiple modes with17.1 high probability that are separated by regions of low probability, especially when each Gibbs sampling step must update only a small subset of variables whose values are largely determined by the other variables.
As a simple example, consider an energy-based model over two variables a and b, which are both binary with a sign, taking on values −1 1and .
If E (a b, ) = −wab for some large positive number w, then the model expresses a strong belief that a and b have the same sign.
MONTE CARLO METHODS  Figure 17.1: Paths followed by Gibbs sampling for three distributions, with the Markov chain initialized at the mode in both cases.
Because the update for each variable must be conditioned on the other variable, the correlation reduces the rate at which the Markov chain can move away from the starting point.
Gibbs sampling mixes very slowly because it is difficult to change modes while altering only one variable at a time.
In more practical scenarios, the challenge is even greater because we care not only about making transitions between two modes but more generally between all the many modes that a real model might contain.
If several such transitions are difficult because of the difficulty of mixing between modes, then it becomes very expensive to obtain a reliable set of samples covering most of the modes, and convergence of the chain to its stationary distribution is very slow.
Sometimes this problem can be resolved by finding groups of highly dependent units and updating all of them simultaneously in a block.
Unfortunately, when the dependencies are complicated, it can be computationally intractable to draw a sample from the group.
After all, the problem that the Markov chain was originally introduced to solve is this problem of sampling from a large group of variables.
In the context of models with latent variables, which define a joint distribution pmodel(x h, ), we often draw samples of x by alternating between sampling from pmodel(x h| ) and sampling from pmodel(h x| ).
MONTE CARLO METHODS  Figure 17.2: An illustration of the slow mixing problem in deep probabilistic models.
(Left)Consecutive samples from Gibbs sampling applied to a deep Boltzmann machine trained on the MNIST dataset.
Because the Gibbs sampling is performed in a deep graphical model, this similarity is based more on semantic rather than raw visual features, but it is still difficult for the Gibbs chain to transition from one mode of the distribution to another, for example by changing the digit identity.
Because ancestral sampling generates each sample independently from the others, there is no mixing problem.
However, from the point of view of learning a useful representation of h, we would like h to encode enough information about x to reconstruct it well, which implies that h and x should have very high mutual information.
We often learn generative models that very precisely encode x into h but  are not able to mix very well.
This situation arises frequently with Boltzmann machines—the sharper the distribution a Boltzmann machine learns, the harder it is for a Markov chain sampling from the model distribution to mix well.
This problem is illustrated in figure .17.2  All this could make MCMC methods less useful when the distribution of interest has a manifold structure with a separate manifold for each class: the distribution is concentrated around many modes and these modes are separated by vast regions of high energy.
This type of distribution is what we expect in many classification problems and would make MCMC methods converge very slowly because of poor mixing between modes.
MONTE CARLO METHODS  17.5.1 Tempering to Mix between Modes  When a distribution has sharp peaks of high probability surrounded by regions of  low probability, it is difficult to mix between the different modes of the distribution.
Several techniques for faster mixing are based on constructing alternative versions of the target distribution in which the peaks are not as high and the surrounding valleys are not as low.
( ) exp (x ∝ − ( ))x (17.25) Energy-based models may be augmented with an extra parameter β controlling how sharply peaked the distribution is:  pβ ( ) exp ( ( ))x ∝ −βE x .
(17.26)  The β parameter is often described as being the reciprocal of the temperature, reflecting the origin of energy-based models in statistical physics.
When the temperature falls to zero and rises to infinity, the energy-based model becomesβ  deterministic.
When the temperature rises to infinity and β falls to zero, the distribution (for discrete ) becomes uniform.x  Typically, a model is trained to be evaluated at β = 1.
Tempering is a general strategy of mixing between modes of p1 rapidly by drawing samples with .β < 1  Markov chains based on tempered transitions ( , ) temporarilyNeal 1994 sample from higher-temperature distributions in order to mix to different modes, then resume sampling from the unit temperature distribution.
Another approach is to use parallel tempering ( , ), in which the Markov chainIba 2001 simulates many different states in parallel, at different temperatures.
The highest  temperature states mix slowly, while the lowest temperature states, at temperature 1, provide accurate samples from the model.
The transition operator includes stochastically swapping states between two different temperature levels, so that a sufficiently high-probability sample from a high-temperature slot can jump into a lower temperature slot.
Although tempering is a promising approach, at2010 this point it has not allowed researchers to make a strong advance in solving the challenge of sampling from complex EBMs.
One possible reason is that there are critical temperatures around which the temperature transition must be very slow (as the temperature is gradually reduced) in order for tempering to be effective.
MONTE CARLO METHODS  17.5.2 Depth May Help Mixing  When drawing samples from a latent variable model p(h x, ), we have seen that if  p(h x| ) encodes x too well, then sampling from p(x h| ) will not change x very much and mixing will be poor.
One way to resolve this problem is to make h be a deep representation, that encodes into in such a way that a Markov chain inx h the space of h can mix more easily.
Many representation learning algorithms, such as autoencoders and RBMs, tend to yield a marginal distribution over h that is more uniform and more unimodal than the original data distribution over x.
It can be argued that this arises from trying to minimize reconstruction error while using all of the available representation space, because minimizing reconstruction error over the training examples will be better achieved when different training examples are easily distinguishable from each other in h-space, and thus well separated.
( ) observed that deeper stacks of regularized autoencoders or  RBMs yield marginal distributions in the top-level h-space that appeared more spread out and more uniform, with less of a gap between the regions corresponding to different modes (categories, in the experiments).
It remains however unclear how to exploit this observation to help better train and sample from deep generative models.
Despite the difficulty of mixing, Monte Carlo techniques are useful and are often the best tool available.
Indeed, they are the primary tool used to confront the intractable partition function of undirected models, discussed next.
                                     Chapter 18  Confronting the Partition  Function  In section we saw that many probabilistic models (commonly known as undi-16.2.2 rected graphical models) are defined by an unnormalized probability distribution  p̃(x; θ).
We must normalize p̃ by dividing by a partition function Z(θ) in order to obtain a valid probability distribution:  p( ; ) =x θ 1  Z( )θ p̃ .
( ; )x θ (18.1)  The partition function is an integral (for continuous variables) or sum (for discrete variables) over the unnormalized probability of all states:   p̃ d( )x x (18.2)  or   x  p̃ .
As we will see in chapter , several deep learning models are designed to20 have a tractable normalizing constant, or are designed to be used in ways that do not involve computing p(x) at all.
In this chapter, we describe techniques  used for training and evaluating models that have intractable partition functions.
CONFRONTING THE PARTITION FUNCTION  18.1 The Log-Likelihood Gradient  What makes learning undirected models by maximum likelihood particularly difficult is that the partition function depends on the parameters.
The gradient of the log-likelihood with respect to the parameters has a term corresponding to the gradient of the partition function:  ∇θ log ( ; ) = p x θ ∇θ log p̃( ; )x θ − ∇θ log ( )Z θ .
Models with no latent variables or with few interactions between latent variables typically have a tractable positive phase.
The quintessential example of a model with a straightforward positive phase and difficult negative phase is the RBM, which has hidden units that are conditionally independent from each other given the visible units.
The case where the positive phase is difficult, with complicated interactions between latent variables, is primarily covered in chapter .
Let us look more closely at the gradient of :logZ  ∇θ logZ (18.5)  = ∇θZ Z  (18.6)  = ∇θ   x p̃( )x  Z (18.7)  =   x ∇θp̃( )x Z  .
(18.8)  For models that guarantee p(x) > 0 for all x, we can substitute exp (log p̃( ))x for p̃( )x :   x ∇θ exp (log p̃( ))x Z  (18.9)  =   x exp (log p̃( ))x ∇θ log p̃( )x  Z (18.10)  =   x p̃( )x ∇θ log p̃( )x  Z (18.11)  =   x  p( )x ∇θ log p̃( )x (18.12)  606    CHAPTER 18.
( )x (18.13)  This derivation made use of summation over discrete x, but a similar result  applies using integration over continuous x.
In the continuous version of the derivation, we use Leibniz’s rule for differentiation under the integral sign to obtain the identity  ∇θ  p̃ d( )x x =   ∇θp̃ d .
( )x x (18.14)  This identity is applicable only under certain regularity conditions on p̃ and ∇θ p̃(x).
In measure theoretic terms, the conditions are: (i) The unnormalized distribution p̃ must be a Lebesgue-integrable function of x for every value of θ; (ii) The gradient  ∇θ p̃(x) must exist for all θ and almost all x; (iii) There must exist an integrable function R(x) that bounds ∇θp̃(x) in the sense that maxi | ∂∂θ i p̃(x)| ≤ R(x) for all θ and almost all x. Fortunately, most machine learning models of interest have these properties.
This identity ∇θ log = Z Ex x∼p( )∇θ log p̃( )x (18.15)  is the basis for a variety of Monte Carlo methods for approximately maximizing the likelihood of models with intractable partition functions.
The Monte Carlo approach to learning undirected models provides an intuitive framework in which we can think of both the positive phase and the negative phase.
In the negative phase, we decrease the partition function by decreasing log p̃(x) drawn from the model distribution.
In the deep learning literature, it is common to parametrize log p̃ in terms of an energy function (equation ).
In this case, we can interpret the positive16.7 phase as pushing down on the energy of training examples and the negative phase as pushing up on the energy of samples drawn from the model, as illustrated in  figure .18.1  18.2 Stochastic Maximum Likelihood and Contrastive  Divergence  The naive way of implementing equation is to compute it by burning in18.15 a set of Markov chains from a random initialization every time the gradient is needed.
When learning is performed using stochastic gradient descent, this means the chains must be burned in once per gradient step.
The high cost of burning in the18.1 Markov chains in the inner loop makes this procedure computationally infeasible, but this procedure is the starting point that other more practical algorithms aim to approximate.
Algorithm 18.1 A naive MCMC algorithm for maximizing the log-likelihood  with an intractable partition function using gradient ascent.
Set , the step size, to a small positive number. Set k, the number of Gibbs steps, high enough to allow burn in.
, x̃( )m } to random values (e.g., from a uniform or normal distribution, or possibly a distribution with marginals matched to the model’s marginals).
θ θ← +  .g end while  We can view the MCMC approach to maximum likelihood as trying to achieve  balance between two forces, one pushing up on the model distribution where the data occurs, and another pushing down on the model distribution where the model samples occur.
Each of these approximations can be understood as making the negative phase computationally cheaper but also making it push down in the wrong locations.
Because the negative phase involves drawing samples from the model’s distri- bution, we can think of it as finding points that the model believes in strongly.
Because the negative phase acts to reduce the probability of those points, they are generally considered to represent the model’s incorrect beliefs about the world.
They are frequently referred to in the literature as “hallucinations” or “fantasy particles.” In fact, the negative phase has been proposed as a possible explanation  608    CHAPTER 18.
CONFRONTING THE PARTITION FUNCTION  x  p (x )  The positive phase  pmodel( )x  pdata( )x  x  p (x )  The negative phase  pmodel ( )x  pdata( )x  Figure 18.1: The view of algorithm as having a “positive phase” and “negative phase.”18.1 (Left)In the positive phase, we sample points from the data distribution, and push up on their unnormalized probability.
(Right)In the negative phase, we sample points from the model distribution, and push down on their unnormalized probability.
This counteracts the positive phase’s tendency to just add a large constant to the unnormalized probability everywhere.
When the data distribution and the model distribution are equal, the positive phase has the same chance to push up at a point as the negative phase has to push down.
for dreaming in humans and other animals (Crick and Mitchison 1983, ), the idea being that the brain maintains a probabilistic model of the world and follows the gradient of log p̃ while experiencing real events while awake and follows the negative gradient of log p̃ to minimize logZ while sleeping and experiencing events sampled from the current model.
This view explains much of the language used to describe algorithms with a positive and negative phase, but it has not been proven to be correct with neuroscientific experiments.
In machine learning models, it is usually necessary to use the positive and negative phase simultaneously, rather than in separate time periods of wakefulness and REM sleep.
As we will see in section , other machine learning algorithms draw samples from the model19.5 distribution for other purposes and such algorithms could also provide an account  for the function of dream sleep.
Given this understanding of the role of the positive and negative phase of learning, we can attempt to design a less expensive alternative to algorithm .18.1 The main cost of the naive MCMC algorithm is the cost of burning in the Markov chains from a random initialization at each step.
A natural solution is to initialize the Markov chains from a distribution that is very close to the model distribution,  609    CHAPTER 18.
The contrastive divergence (CD, or CD-k to indicate CD with kGibbs steps) algorithm initializes the Markov chain at each step with samples from the data distribution (Hinton 2000 2010, , ).
This approach is presented as algorithm .18.2 Obtaining samples from the data distribution is free, because they are already available in the data set.
Initially, the data distribution is not close to the model distribution, so the negative phase is not very accurate.
After the  positive phase has had some time to act, the model distribution is closer to the data distribution, and the negative phase starts to become accurate.
Algorithm 18.2 The contrastive divergence algorithm, using gradient ascent as the optimization procedure.
Set , the step size, to a small positive number. Set k, the number of Gibbs steps, high enough to allow a Markov chain sampling from p(x;θ) to mix when initialized from pdata.
The main way that CD qualitatively fails to implement the correct negative phase is that it fails to suppress regions of high probability that are far from actual training examples.
These regions that have high probability under the model but low probability under the data generating distribution are called spurious modes.
Essentially, it is because modes in the18.2  model distribution that are far from the data distribution will not be visited by  610    CHAPTER 18.
CONFRONTING THE PARTITION FUNCTION  x  p (x )  pmodel ( )x  pdata( )x  Figure 18.2: An illustration of how the negative phase of contrastive divergence (algo- rithm ) can fail to suppress spurious modes.
A spurious mode is a mode that is18.2 present in the model distribution but absent in the data distribution.
Because contrastive divergence initializes its Markov chains from data points and runs the Markov chain for only a few steps, it is unlikely to visit modes in the model that are far from the data points.
This means that when sampling from the model, we will sometimes get samples that do not resemble the data.
It also means that due to wasting some of its probability mass on these modes, the model will struggle to place high probability mass on the correct modes.
For the purpose of visualization, this figure uses a somewhat simplified concept of distance—the spurious mode is far from the correct mode along the number line in R. This corresponds to a Markov chain based on making local moves with a single x variable in R. For most deep probabilistic models, the Markov chains are based on Gibbs sampling and can make non-local moves of individual variables but cannot move all of the variables simultaneously.
For these problems, it is usually better to consider the edit distance between modes, rather than the Euclidean distance.
Markov chains initialized at training points, unless is very large.k  Carreira-Perpiñan and Hinton 2005( ) showed experimentally that the CD  estimator is biased for RBMs and fully visible Boltzmann machines, in that it converges to different points than the maximum likelihood estimator.
They argue that because the bias is small, CD could be used as an inexpensive way to initialize a model that could later be fine-tuned via more expensive MCMC methods.
Bengio and Delalleau 2009( ) showed that CD can be interpreted as discarding the smallest terms of the correct MCMC update gradient, which explains the bias.
CONFRONTING THE PARTITION FUNCTION  to obtain samples of the hidden units given samples of the visible units.
Since the hidden units are not included in the data, initializing from training points cannot solve the problem.
Even if we initialize the visible units from the data, we will still need to burn in a Markov chain sampling from the distribution over the hidden units conditioned on those visible samples.
The CD algorithm can be thought of as penalizing the model for having a Markov chain that changes the input rapidly when the input comes from the data.
Even  though CD is more biased than some of the other training methods, it can be useful for pretraining shallow models that will later be stacked.
This is because the earliest models in the stack are encouraged to copy more information up to their latent variables, thereby making it available to the later models.
This should be thought of more of as an often-exploitable side effect of CD training rather than a principled design advantage.
Sutskever and Tieleman 2010( ) showed that the CD update direction is not the gradient of any function.
This allows for situations where CD could cycle forever, but in practice this is not a serious problem.
A different strategy that resolves many of the problems with CD is to initial- ize the Markov chains at each gradient step with their states from the previous  gradient step.
This approach was first discovered under the name stochastic max- imum likelihood (SML) in the applied mathematics and statistics community (Younes 1998, ) and later independently rediscovered under the name persistent contrastive divergence (PCD, or PCD-k to indicate the use of k Gibbs steps per update) in the deep learning community ( , ).
See algorithm .Tieleman 2008 18.3 The basic idea of this approach is that, so long as the steps taken by the stochastic gradient algorithm are small, then the model from the previous step will be similar to the model from the current step.
It follows that the samples from the previous model’s distribution will be very close to being fair samples from the current model’s distribution, so a Markov chain initialized with these samples will not require much time to mix.
Because each Markov chain is continually updated throughout the learning process, rather than restarted at each gradient step, the chains are free to wander far enough to find all of the model’s modes.
Moreover, because it is possible to store the state of all of the sampled variables, whether visible or latent, SML provides an initialization point for both the hidden and visible units.
CD is only able to provide an initialization for the visible units, and therefore requires burn-in for deep models.
They found that SML results in the best test set log-likelihood for an RBM, and that if the RBM’s hidden units are used as features for an SVM classifier, SML results in the best classification accuracy.
SML is vulnerable to becoming inaccurate if the stochastic gradient algorithm can move the model faster than the Markov chain can mix between steps.
Subjectively, if the learning rate is too high for the number of Gibbs steps, the human operator will be able to observe that there is much more variance in the negative phase samples across gradient steps rather than across different Markov chains.
The learning process will then push down strongly on the mode corresponding to 7s, and the model might sample exclusively 9s on the next step.
Algorithm 18.3 The stochastic maximum likelihood / persistent contrastive divergence algorithm using gradient ascent as the optimization procedure.
Set , the step size, to a small positive number.  Set k, the number of Gibbs steps, high enough to allow a Markov chain sampling from p(x;θ + g) to burn in, starting from samples from p(x;θ).
, x̃( )m } to random values (e.g., from a uniform or normal distribution, or possibly a distribution with marginals matched to the model’s marginals).
CONFRONTING THE PARTITION FUNCTION  initialized from a random starting point after the model is done training.
The samples present in the persistent negative chains used for training have been influenced by several recent versions of the model, and thus can make the model appear to have greater capacity than it actually does.
Berglund and Raiko 2013( ) performed experiments to examine the bias and variance in the estimate of the gradient provided by CD and SML.
The cause of CD’s low variance is its use of the same training points  in both the positive and negative phase.
If the negative phase is initialized from different training points, the variance rises above that of the estimator based on exact sampling.
All of these methods based on using MCMC to draw samples from the model can in principle be used with almost any variant of MCMC.
This means that techniques such as SML can be improved by using any of the enhanced MCMC techniques described in chapter , such as parallel tempering ( ,17 Desjardins et al.
One approach to accelerating mixing during learning relies not on changing the Monte Carlo sampling technology but rather on changing the parametrization of the model and the cost function.
Fast PCD or FPCD ( ,Tieleman and Hinton  2009) involves replacing the parameters θ of a traditional model with an expression  θ θ= ( )slow + θ( )fast .
(18.16)  There are now twice as many parameters as before, and they are added together element-wise to provide the parameters used by the original model definition.
The fast copy of the parameters is trained with a much larger learning rate, allowing it to adapt rapidly in response to the negative phase of learning and push the Markov chain to new territory.
This forces the Markov chain to mix rapidly, though this effect only occurs during learning while the fast weights are free to change.
Typically one also applies significant weight decay to the fast weights, encouraging them to converge to small values, after only transiently taking on large values long enough to encourage the Markov chain to change modes.
One key benefit to the MCMC-based methods described in this section is that they provide an estimate of the gradient of logZ , and thus we can essentially decompose the problem into the log p̃ contribution and the logZ contribution.
We can then use any other method to tackle log p̃(x), and just add our negative phase gradient onto the other method’s gradient.
In particular, this means that our positive phase can make use of methods that provide only a lower bound on p̃.
18.3 Pseudolikelihood  Monte Carlo approximations to the partition function and its gradient directly confront the partition function.
Most of these approaches are based on the observation that it is easy to compute ratios of probabilities in an undirected probabilistic model.
This is because the partition function appears in both the numerator and the denominator of the ratio and cancels out:  p( )x  p( )y =  1 Z p̃( )x 1 Z p̃( )y  = p̃( )x  p̃( )y .
(18.17)  The pseudolikelihood is based on the observation that conditional probabilities take this ratio-based form, and thus can be computed without knowledge of the partition function.
Suppose that we partition x into a, b and c, where a contains the variables we want to find the conditional distribution over, b contains the variables we want to condition on, and c contains the variables that are not part of our query.
(18.18)  This quantity requires marginalizing out a, which can be a very efficient operation provided that a and c do not contain very many variables.
In the extreme case, a can be a single variable and c can be empty, making this operation require only as many evaluations of p̃ as there are values of a single random variable.
Unfortunately, in order to compute the log-likelihood, we need to marginalize  out large sets of variables.
By the chain rule of probability,n− 1  log ( ) = log (p x p x1) + log (p x2 | x1) + + (· · · p xn | x1: 1n− ).
This yields the pseudolikelihood ( , ) objective function, based on predicting the valueBesag 1975 of feature xi given all of the other features x−i:  n  i=1  log (p xi | x−i).
CONFRONTING THE PARTITION FUNCTION  If each random variable has k different values, this requires onlyk n× evaluations of p̃ to compute, as opposed to the kn evaluations needed to compute the partition function.
This may look like an unprincipled hack, but it can be proven that estimation by maximizing the pseudolikelihood is asymptotically consistent ( , ).Mase 1995 Of course, in the case of datasets that do not approach the large sample limit, pseudolikelihood may display different behavior from the maximum likelihood estimator.
It is possible to trade computational complexity for deviation from maximum likelihood behavior by using the generalized pseudolikelihood estimator (Huang and Ogata 2002, ).
In the extreme case of m = n and S ( )i = { }i , the generalized pseudolikelihood recovers the pseudolikelihood.
The generalized pseudolikelihood objective function is given by  m  i=1  log (p x S( )i  | x−S( )i ).
(18.21)  The performance of pseudolikelihood-based approaches depends largely on how the model will be used.
Pseudolikelihood tends to perform poorly on tasks that require a good model of the full joint p(x), such as density estimation and sampling.
However, it can perform better than maximum likelihood for tasks that require only the conditional distributions used during training, such as filling in small amounts of missing values.
Generalized pseudolikelihood techniques are especially powerful if the data has regular structure that allows the S index sets to be designed to capture the most important correlations while leaving out groups of variables that only  have negligible correlation.
For example, in natural images, pixels that are widely separated in space also have weak correlation, so the generalized pseudolikelihood can be applied with each set being a small, spatially localized window.S  One weakness of the pseudolikelihood estimator is that it cannot be used with other approximations that provide only a lower bound on p̃(x), such as variational inference, which will be covered in chapter .
A lower bound on the denominator provides only an upper bound on the expression as a whole, and there is no benefit to maximizing an upper bound.
This makes it difficult to apply pseudolikelihood approaches to deep models such as deep Boltzmann machines, since variational methods are one of the dominant approaches to approximately marginalizing out the many layers of hidden variables  616    CHAPTER 18.
However, pseudolikelihood is still useful for deep learning, because it can be used to train single layer models, or deep models using approximate inference methods that are not based on lower bounds.
Pseudolikelihood has a much greater cost per gradient step than SML, due to its explicit computation of all of the conditionals.
However, generalized pseudo- likelihood and similar criteria can still perform well if only one randomly selected conditional is computed per example (Goodfellow 2013bet al., ), thereby bringing the computational cost down to match that of SML.
Though the pseudolikelihood estimator does not explicitly minimize logZ , it can still be thought of as having something resembling a negative phase.
The denominators of each conditional distribution result in the learning algorithm suppressing the probability of all states that have only one variable differing from a training example.
See Marlin and de Freitas 2011( ) for a theoretical analysis of the asymptotic efficiency of pseudolikelihood.
18.4 Score Matching and Ratio Matching  Score matching ( , ) provides another consistent means of training aHyvärinen 2005 model without estimating Z or its derivatives.
The name score matching comes from terminology in which the derivatives of a log density with respect to its argument, ∇x log p(x), are called its score.
The strategy used by score matching is to minimize the expected squared difference between the derivatives of the model’s log density with respect to the input and the derivatives of the data’s log density with respect to the input:  L ,(x θ) = 1  2 ||∇x log pmodel ( ; )x θ − ∇x log pdata( )x ||22 (18.22)  J( ) =θ 1  2 Epdata( )x L ,(x θ) (18.23)  θ∗ = min θ  J( )θ (18.24)  This objective function avoids the difficulties associated with differentiating the partition function Z because Z is not a function of x and therefore ∇xZ = 0.
Initially, score matching appears to have a new difficulty: computing the score of the data distribution requires knowledge of the true distribution generating the training data, pdata.
CONFRONTING THE PARTITION FUNCTION  equivalent to minimizing the expected value of  L̃ ,(x θ) =  n  j=1   ∂2  ∂x2j log pmodel( ; ) +x θ  1  2   ∂  ∂xj log pmodel( ; )x θ  2  (18.25)  where is the dimensionality of .n x  Because score matching requires taking derivatives with respect to x, it is not  applicable to models of discrete data.
Like the pseudolikelihood, score matching only works when we are able to evaluate log p̃(x) and its derivatives directly.
It is not compatible with methods that only provide a lower bound on log p̃(x), because score matching requires the derivatives and second derivatives of log p̃(x) and a lower bound conveys no information about its derivatives.
This means that score matching cannot be applied to estimating models with complicated interactions between the hidden units, such as sparse coding models or deep Boltzmann machines.
While score matching can be used to pretrain the first hidden layer of a larger model, it has not been applied as a pretraining strategy for the deeper layers of a larger model.
While score matching does not explicitly have a negative phase, it can be viewed as a version of contrastive divergence using a specific kind of Markov chain ( , ).
The Markov chain in this case is not Gibbs sampling, butHyvärinen 2007a rather a different approach that makes local moves guided by the gradient.
Score matching is equivalent to CD with this type of Markov chain when the size of the local moves approaches zero.
Lyu 2009( ) generalized score matching to the discrete case (but made an error in their derivation that was corrected by ( )).Marlin et al.
( ) found that2010 generalized score matching (GSM) does not work in high  dimensional discrete spaces where the observed probability of many events is 0.
A more successful approach to extending the basic ideas of score matching to discrete data is ratio matching ( , ).
Ratio matching consists of minimizing the average over examples of the following objective function:  L( )RM ( ) =x θ,  n  j=1     1 1 + pmodel( ; )x θpmodel( ( ) ); )f x ,j θ     2  , (18.26)  618    CHAPTER 18.
Ratio matching avoidsf , j(x ) x j the partition function using the same trick as the pseudolikelihood estimator: in a ratio of two probabilities, the partition function cancels out.
2010 found that ratio matching outperforms SML, pseudolikelihood and GSM in terms of the ability of models trained with ratio matching to denoise test set images.
Like the pseudolikelihood estimator, ratio matching requires n evaluations of p̃ per data point, making its computational cost per update roughly n times higher than that of SML.
As with the pseudolikelihood estimator, ratio matching can be thought of as pushing down on all fantasy states that have only one variable different from a training example.
Since ratio matching applies specifically to binary data, this means that it acts on all fantasy states within Hamming distance 1 of the data.
Ratio matching can also be useful as the basis for dealing with high-dimensional sparse data, such as word count vectors.
This kind of data poses a challenge for MCMC-based methods because the data is extremely expensive to represent in dense format, yet the MCMC sampler does not yield sparse values until the model has learned to represent the sparsity in the data distribution.
Dauphin and Bengio ( ) overcame this issue by designing an unbiased stochastic approximation to2013 ratio matching.
The approximation evaluates only a randomly selected subset of  the terms of the objective, and does not require the model to generate complete fantasy samples.
See Marlin and de Freitas 2011( ) for a theoretical analysis of the asymptotic efficiency of ratio matching.
18.5 Denoising Score Matching  In some cases we may wish to regularize score matching, by fitting a distribution  psmoothed( ) =x   pdata( ) ( )y q x y| dy (18.27)  rather than the true pdata.
The distribution q(x y| ) is a corruption process, usually one that forms by adding a small amount of noise to .x y  Denoising score matching is especially useful because in practice we usually do not have access to the true pdata but rather only an empirical distribution defined  by samples from it.
Any consistent estimator will, given enough capacity, make pmodel into a set of Dirac distributions centered on the training points.
Smoothing by q helps to reduce this problem, at the loss of the asymptotic consistency property  619    CHAPTER 18.
( ) introduced a procedure for5.4.5 Kingma and LeCun 2010 performing regularized score matching with the smoothing distribution q being normally distributed noise.
Recall from section that several autoencoder training algorithms are14.5.1 equivalent to score matching or denoising score matching.
These autoencoder training algorithms are therefore a way of overcoming the partition function problem.
18.6 Noise-Contrastive Estimation  Most techniques for estimating models with intractable partition functions do not provide an estimate of the partition function.
SML and CD estimate only the gradient of the log partition function, rather than the partition function itself.
Score matching and pseudolikelihood avoid computing quantities related to the partition function altogether.
In this approach, the probability distribution estimated by the model is represented explicitly as  log pmodel ( ) = log ˜x pmodel ( ; ) +x θ c, (18.28)  where c is explicitly introduced as an approximation of − logZ(θ).
Rather than estimating only θ , the noise contrastive estimation procedure treats c as just another parameter and estimates θ and c simultaneously, using the same algorithm for both.
The resulting log pmodel(x) thus may not correspond exactly to a valid probability distribution, but will become closer and closer to being valid as the estimate of improves.c 1  Such an approach would not be possible using maximum likelihood as the criterion for the estimator.
The maximum likelihood criterion would choose to set c carbitrarily high, rather than setting to create a valid probability distribution.
NCE works by reducing the unsupervised learning problem of estimating p(x) to that of learning a probabilistic binary classifier in which one of the categories  corresponds to the data generated by the model.
This supervised learning problem is constructed in such a way that maximum likelihood estimation in this supervised  1 NCE is also applicable to problems with a tractable partition function, where there is no  need to introduce the extra parameter c. However, it has generated the most interest as a means of estimating models with difficult partition functions.
CONFRONTING THE PARTITION FUNCTION  learning problem defines an asymptotically consistent estimator of the original problem.
In the new joint model, we specify that  pjoint( = 1) =y 1  2 , (18.29)  pjoint( = 1) = x | y pmodel( )x , (18.30)  and pjoint( = 0) = x | y pnoise( )x .
(18.31)  In other words, y is a switch variable that determines whether we will generate x from the model or from the noise distribution.
In this case, the switch variable determines whether we draw x from the data or from the noise distribution.
Formally, ptrain(y = 1) =  1 2 , ptrain(x | y = 1) = pdata(x), and  ptrain( = 0) = x | y pnoise( )x .
We can now just use standard maximum likelihood learning on the supervised  learning problem of fitting pjoint to ptrain:  θ, c = arg max θ,c  Ex, py∼ train log pjoint ( )y | x .
(18.32)  The distribution pjoint is essentially a logistic regression model applied to the difference in log probabilities of the model and the noise distribution:  pjoint( = 1 ) =y | x pmodel ( )x  pmodel( ) +x pnoise( )x (18.33)  = 1  1 + pnoise( )xpmodel ( )x  (18.34)  = 1  1 + exp  log pnoise( )xpmodel( )x   (18.35)  = σ   − log pnoise( )x  pmodel( )x   (18.36)  = (logσ pmodel( ) logx − pnoise( ))x .
CONFRONTING THE PARTITION FUNCTION  NCE is thus simple to apply so long as log p̃model is easy to back-propagate through, and, as specified above, pnoise is easy to evaluate (in order to evaluate pjoint) and sample from (in order to generate the training data).
NCE is most successful when applied to problems with few random variables, but can work well even if those random variables can take on a high number of values.
For example, it has been successfully applied to modeling the conditional distribution over a word given the context of the word (Mnih and Kavukcuoglu, 2013).
The logistic regression classifier can reject a noise sample by identifying any one variable whose value is unlikely.
If pmodel learns about eyes, it can reject almost all unstructured noise samples without having learned anything about other facial features, such as mouths.
The constraint that pnoise must be easy to evaluate and easy to sample from can be overly restrictive.
When pnoise is simple, most samples are likely to be too obviously distinct from the data to force pmodel to improve noticeably.
Like score matching and pseudolikelihood, NCE does not work if only a lower bound on p̃ is available.
Such a lower bound could be used to construct a lower bound on pjoint(y = 1 | x), but it can only be used to construct an upper bound on pjoint(y = 0 | x), which appears in half the terms of the NCE objective.
Likewise, a lower bound on pnoise is not useful, because it provides only an upper bound on pjoint( = 1 )y | x .
When the model distribution is copied to define a new noise distribution before each gradient step, NCE defines a procedure called self-contrastive estimation, whose expected gradient is equivalent to the expected gradient of maximum likelihood ( , ).
The special case of NCE where the noise samplesGoodfellow 2014 are those generated by the model suggests that maximum likelihood can be  interpreted as a procedure that forces a model to constantly learn to distinguish reality from its own evolving beliefs, while noise contrastive estimation achieves some reduced computational cost by only forcing the model to distinguish reality from a fixed baseline (the noise model).
Using the supervised task of classifying between training samples and generated samples (with the model energy function used in defining the classifier) to provide a gradient on the model was introduced earlier in various forms (Welling et al., 2003b Bengio 2009; , ).
CONFRONTING THE PARTITION FUNCTION  Noise contrastive estimation is based on the idea that a good generative model should be able to distinguish data from noise.
A closely related idea is that a good generative model should be able to generate samples that no classifier can distinguish from data.
This idea yields generative adversarial networks (section ).20.10.4  18.7 Estimating the Partition Function  While much of this chapter is dedicated to describing methods that avoid needing to compute the intractable partition function Z(θ) associated with an undirected graphical model, in this section we discuss several methods for directly estimating the partition function.
Estimating the partition function can be important because we require it if we wish to compute the normalized likelihood of data.
This is often important in evaluating the model, monitoring training performance, and comparing models to each other.
For example, imagine we have two models: model MA defining a probabil- ity distribution pA(x;θA) =  1 ZA p̃A(x;θA ) and model MB defining a probability  distribution pB(x;θB) = 1 ZB p̃B(x;θB ).
A common way to compare the models  is to evaluate and compare the likelihood that both models assign to an i.i.d.
If i pA(x  ( )i ;θA) >  i pB(x  ( )i ;θB ) or equivalently if    i  log pA (x ( )i ;θA) −    i  log pB (x ( )i ;θB) 0> , (18.38)  then we say that MA is a better model than MB (or, at least, it is a better model of the test set), in the sense that it has a better test log-likelihood.
Unfortunately, equation seems to require evaluating the log probability that18.38 the model assigns to each point, which in turn requires evaluating the partition function.
We can simplify the situation slightly by re-arranging equation 18.38 into a form where we need to know only the ratio of the two model’s partition functions:    i  log pA(x ( )i ;θA)−    i  log pB(x ( )i ;θB ) =    i    log p̃A(x  ( )i ;θA)  p̃B(x( )i ;θB)   −m logZ(θA)  Z(θB) .
CONFRONTING THE PARTITION FUNCTION  We can thus determine whether MA is a better model than MB without knowing the partition function of either model but only their ratio.
As we will see shortly, we can estimate this ratio using importance sampling, provided that the two models are similar.
If, however, we wanted to compute the actual probability of the test data under either MA or MB, we would need to compute the actual value of the partition functions.
That said, if we knew the ratio of two partition functions, r = Z(θB)  Z(θA) ,  and we knew the actual value of just one of the two, say Z (θA ), we could compute the value of the other:  Z(θB ) = (rZ θA) = Z(θB )  Z(θA ) Z(θA).
(18.40)  A simple way to estimate the partition function is to use a Monte Carlo method such as simple importance sampling.
We present the approach in terms of continuous variables using integrals, but it can be readily applied to discrete variables by replacing the integrals with summation.
We use a proposal distribution p0(x) =  1 Z0 p̃0(x) which supports tractable sampling and tractable evaluation of  both the partition function Z0 and the unnormalized distribution p̃0( )x .
Z1 =   p̃1 ( )x dx (18.41)  =   p0( )x  p0( )x p̃1( )x dx (18.42)  = Z0   p0( )x  p̃1( )x  p̃0( )x dx (18.43)  Ẑ1 = Z0  K  K  k=1  p̃1 (x( )k )  p̃0 (x( )k ) s t :.
x( )k ∼ p0 (18.44)  In the last line, we make a Monte Carlo estimator, Ẑ1 , of the integral using samples drawn from p0(x) and then weight each sample with the ratio of the unnormalized p̃1 and the proposal p0 .
We see also that this approach allows us to estimate the ratio between the partition functions as  1  K  K  k=1  p̃1(x ( )k )  p̃0(x( )k ) s t :.
(18.45)  This value can then be used directly to compare two models as described in equation .18.39  624    CHAPTER 18.
CONFRONTING THE PARTITION FUNCTION  If the distribution p0 is close to p1, equation can be an effective way of18.44 estimating the partition function (Minka 2005, ).
Unfortunately, most of the time p1 is both complicated (usually multimodal) and defined over a high dimensional space.
It is difficult to find a tractable p0 that is simple enough to evaluate while still being close enough to p1 to result in a high quality approximation.
If p0 and p1 are not close, most samples from p0 will have low probability under p1 and therefore make (relatively) negligible contribution to the sum in equation .18.44  Having few samples with significant weights in this sum will result in an  estimator that is of poor quality due to high variance.
This can be understood quantitatively through an estimate of the variance of our estimate Ẑ1:  V̂ar  Ẑ1   = Z0 K2  K  k=1   p̃1(x  ( )k )  p̃0(x( )k ) − Ẑ1  2 .
(18.46)  This quantity is largest when there is significant deviation in the values of the  importance weights p̃1(x ( )k )  p̃0(x( )k ) .
We now turn to two related strategies developed to cope with the challeng-  ing task of estimating partition functions for complex distributions over high- dimensional spaces: annealed importance sampling and bridge sampling.
Both start with the simple importance sampling strategy introduced above and both attempt to overcome the problem of the proposal p0 being too far from p1 by introducing intermediate distributions that attempt to betweenbridge the gap p0 and p1.
18.7.1 Annealed Importance Sampling  In situations where DKL(p0p1) is large (i.e., where there is little overlap between p0 and p1), a strategy called annealed importance sampling (AIS) attempts  to bridge the gap by introducing intermediate distributions ( , ; ,Jarzynski 1997 Neal 2001).
, pηn , with 0 = η0 < η1 < <· · · ηn−1 < ηn = 1 so that the first and last distributions in the sequence are p0 and p1 respectively.
This approach allows us to estimate the partition function of a multimodal distribution defined over a high-dimensional space (such as the distribution defined by a trained RBM).
We begin with a simpler model with a known partition function (such as an RBM with zeroes for weights) and estimate the ratio between the two model’s partition functions.
The estimate of this ratio is based on the estimate of the ratios of a sequence of many similar distributions, such as the sequence of RBMs with weights interpolating between zero and the learned weights.
CONFRONTING THE PARTITION FUNCTION  We can now write the ratio Z1Z0 as  Z1 Z0  = Z1 Z0  Zη 1 Zη 1  · · · Zηn−1 Zηn−1  (18.47)  = Zη1 Z0  Zη2 Zη1  · · · Zηn−1 Zηn−2  Z1 Zηn−1  (18.48)  =  n−1  j=0  Zηj+1 Zηj  (18.49)  Provided the distributions pηj and pηj+1 , for all 0 ≤ ≤ −j n 1, are sufficiently close, we can reliably estimate each of the factors  Zη j+1 Zηj  using simple importance  sampling and then use these to obtain an estimate of Z1Z0 .
Just as the original proposal distribution p0 is a design choice, so is the sequence of distributions pη1 .
One general-purpose and popular choice for the intermediate distributions is to use the weighted geometric average of the target distribution p1 and the starting proposal distribution (for which the partition function is known) p0:  pηj ∝ p ηj 1 p  1−ηj 0 (18.50)  In order to sample from these intermediate distributions, we define a series of Markov chain transition functions Tηj(x   | x) that define the conditional probability distribution of transitioning to x given we are currently at x.
The transition operator Tηj(x   | x) is defined to leave pηj ( )x invariant:  pηj ( ) =x   pηj(x  )Tηj (x x| ) dx (18.51)  These transitions may be constructed as any Markov chain Monte Carlo method (e.g., Metropolis-Hastings, Gibbs), including methods involving multiple passes through all of the random variables or other kinds of iterations.
The AIS sampling strategy is then to generate samples from p0 and then use the transition operators to sequentially generate samples from the intermediate  distributions until we arrive at samples from the target distribution p1:  • for k .
– Sample x ( )k ηn−1 ∼ Tηn−2(x  ( )k ηn−1 | x  ( )k ηn−2)  – Sample x ( )k ηn ∼ Tηn−1(x  ( )k ηn | x( )kηn−1 )  • end  For sample k, we can derive the importance weight by chaining together the  importance weights for the jumps between the intermediate distributions given in equation :18.49  w ( )k = p̃η1 (x  ( )k η1 )  p̃0(x ( )k η1 )  p̃η2(x ( )k η2 )  p̃η1(x ( )k η2 )  .
(18.52)  To avoid numerical issues such as overflow, it is probably best to compute logw( )k by adding and subtracting log probabilities, rather than computing w( )k by multiplying and dividing probabilities.
With the sampling procedure thus defined and the importance weights given in equation , the estimate of the ratio of partition functions is given by:18.52  Z1  Z0 ≈ 1 K  K  k=1  w( )k (18.53)  In order to verify that this procedure defines a valid importance sampling scheme, we can show ( , ) that the AIS procedure corresponds to simpleNeal 2001 importance sampling on an extended state space with points sampled over the product space [xη1, .
T̃η1 (xη1 | xη2 ), (18.55)  where T̃a is the reverse of the transition operator defined by Ta (via an application of Bayes’ rule):  T̃a(x  | x) = pa(x  )  pa( )x Ta(x x| ) =  p̃a (x)  p̃a ( )x Ta(x x| ).
(18.56)  Plugging the above into the expression for the joint distribution on the extended state space given in equation , we get:18.55  p̃(xη1 , .
CONFRONTING THE PARTITION FUNCTION  = p̃1(x1) p̃ηn−1(xηn−1)  p̃ηn−1(x1) Tηn−1(x 1 | xηn−1 )  n−2  i=1  p̃ηi (xηi)  p̃ηi (xηi+1) Tη i(xηi+1 | xηi)  (18.58)  = p̃1(x1 )  p̃ηn−1(x1) T ηn−1(x1 | xηn−1) p̃η1 (xη1)  n−2  i=1  p̃ηi+1(xηi+1)  p̃ηi (xηi+1) Tη i(xηi+1 | xηi ).
(18.59)  We now have means of generating samples from the joint proposal distribution q over the extended sample via a sampling scheme given above, with the joint distribution given by:  q(xη 1, .
,xηn−1,x1) as the proposal distribution on the extended state space from which we will draw samples, it remains to determine the importance weights:  w( )k = p̃(xη1 , .
Thus we can interpret AIS as simple importance sampling applied to an extended state and its validity follows immediately from the validity of importance sampling.
Annealed importance sampling (AIS) was first discovered by ( )Jarzynski 1997 and then again, independently, by ( ).
It is currently the most commonNeal 2001  way of estimating the partition function for undirected probabilistic models.
The reasons for this may have more to do with the publication of an influential paper (Salakhutdinov and Murray 2008, ) describing its application to estimating the partition function of restricted Boltzmann machines and deep belief networks than with any inherent advantage the method has over the other method described below.
A discussion of the properties of the AIS estimator (e.g.. its variance and efficiency) can be found in ( ).Neal 2001  18.7.2 Bridge Sampling  Bridge sampling ( ) is another method that, like AIS, addresses theBennett 1976 shortcomings of importance sampling.
CONFRONTING THE PARTITION FUNCTION  intermediate distributions, bridge sampling relies on a single distribution p∗, known as the bridge, to interpolate between a distribution with known partition function, p0, and a distribution p1 for which we are trying to estimate the partition function Z1 .
Bridge sampling estimates the ratio Z1/Z0 as the ratio of the expected impor- tance weights between p̃0 and p̃∗ and between p̃1 and p̃∗:  Z1 Z0  ≈ K  k=1  p̃∗(x ( )k 0 )  p̃0(x ( )k 0 )   K  k=1  p̃∗(x ( )k 1 )  p̃1(x ( )k 1 )  (18.62)  If the bridge distribution p∗ is chosen carefully to have a large overlap of support with both p0 and p1, then bridge sampling can allow the distance between two distributions (or more formally, DKL(p0p1)) to be much larger than with standard importance sampling.
It can be shown that the optimal bridging distribution is given by p ( )opt ∗ (x) ∝  p̃0( )˜x p1( )x rp̃0( )+˜x p1( )x  where r = Z1/Z0 .
At first, this appears to be an unworkable solution  as it would seem to require the very quantity we are trying to estimate, Z1/Z0.
However, it is possible to start with a coarse estimate of r and use the resulting bridge distribution to refine our estimate iteratively ( , ).
That is, weNeal 2005 iteratively re-estimate the ratio and use each iteration to update the value of .r  Linked importance sampling Both AIS and bridge sampling have their ad- vantages.
If DKL (p0p1) is not too large (because p0 and p1 are sufficiently close) bridge sampling can be a more effective means of estimating the ratio of partition  functions than AIS.
If, however, the two distributions are too far apart for a single distribution p∗ to bridge the gap then one can at least use AIS with potentially many intermediate distributions to span the distance between p0 and p1.
Neal ( ) showed how his linked importance sampling method leveraged the power of2005 the bridge sampling strategy to bridge the intermediate distributions used in AIS to significantly improve the overall partition function estimates.
Estimating the partition function while training While AIS has become accepted as the standard method for estimating the partition function for many undirected models, it is sufficiently computationally intensive that it remains infeasible to use during training.
However, alternative strategies that have been explored to maintain an estimate of the partition function throughout training  Using a combination of bridge sampling, short-chain AIS and parallel tempering, Desjardins 2011et al.
The strategy is based on the maintenance of independent estimates of the partition functions of the RBM at every temperature operating in the parallel tempering scheme.
The authors combined bridge sampling estimates of the ratios of partition functions of neighboring chains (i.e.
from parallel tempering) with AIS estimates across time to come up with a low variance estimate of the partition functions at every iteration of learning.
The tools described in this chapter provide many different ways of overcoming the problem of intractable partition functions, but there can be several other  difficulties involved in training and using generative models.
                                     Chapter 19  Approximate Inference  Many probabilistic models are difficult to train because it is difficult to perform inference in them.
In the context of deep learning, we usually have a set of visible variables v and a set of latent variables h. The challenge of inference usually refers to the difficult problem of computing p(h v| ) or taking expectations with respect to it.
Many simple graphical models with only one hidden layer, such as restricted Boltzmann machines and probabilistic PCA, are defined in a way that makes inference operations like computing p(h v| ), or taking expectations with respect to it, simple.
Unfortunately, most graphical models with multiple layers of hidden variables have intractable posterior distributions.
In this chapter, we introduce several of the techniques for confronting these intractable inference problems.
Later, in chapter , we will describe how to use20  these techniques to train probabilistic models that would otherwise be intractable, such as deep belief networks and deep Boltzmann machines.
Intractable inference problems in deep learning usually arise from interactions between latent variables in a structured graphical model.
These interactions may be due to direct interactions in undirected models or “explaining away” interactions between mutual ancestors of the same visible unit in directed models.
APPROXIMATE INFERENCE  Figure 19.1: Intractable inference problems in deep learning are usually the result of interactions between latent variables in a structured graphical model.
These can be due to edges directly connecting one latent variable to another, or due to longer paths that are activated when the child of a V-structure is observed.
(Left)A semi-restricted Boltzmann machine ( , ) with connections between hiddenOsindero and Hinton 2008 units.
These direct connections between latent variables make the posterior distribution intractable due to large cliques of latent variables.
A deep Boltzmann machine,(Center) organized into layers of variables without intra-layer connections, still has an intractable posterior distribution due to the connections between layers.
This directed model(Right) has interactions between latent variables when the visible variables are observed, because every two latent variables are co-parents.
Some probabilistic models are able to provide tractable inference over the latent variables despite having one of the graph structures depicted above.
This is possible if the conditional probability distributions are chosen to introduce additional independences beyond those described by the graph.
For example, probabilistic PCA has the graph structure shown in the right, yet still has simple inference due to special properties of the specific conditional distributions it uses (linear-Gaussian conditionals with mutually orthogonal basis vectors).
APPROXIMATE INFERENCE  19.1 Inference as Optimization  Many approaches to confronting the problem of difficult inference make use of the observation that exact inference can be described as an optimization problem.
Approximate inference algorithms may then be derived by approximating the underlying optimization problem.
To construct the optimization problem, assume we have a probabilistic model consisting of observed variables v and latent variables h. We would like to compute the log probability of the observed data, log p(v; θ).
Sometimes it is too difficult to compute log p(v; θ) if it is costly to marginalize out h. Instead, we can compute a lower bound L(v θ, , q) on log p(v; θ).
Specifically, the evidence lower bound is defined to be  L −( ) = log ( ; )v θ, , q p v θ DKL ( ( ) ( ; ))q h v| p h v| θ (19.1)  where is an arbitrary probability distribution over .q h  Because the difference between log p(v) and L(v θ, , q) is given by the KL divergence and because the KL divergence is always non-negative, we can see that L always has at most the same value as the desired log probability.
The two are equal if and only if is the same distribution as .q p( )h v|  Surprisingly, L can be considerably easier to compute for some distributions q.
Simple algebra shows that we can rearrange L into a much more convenient form:  L −( ) = log ( ; )v θ, , q p v θ DKL( ( ) ( ; ))q h v| p h v| θ (19.2)  = log ( ; )p v θ − Eh∼q log q( )h v| p( )h v| (19.3)  = log ( ; )p v θ − Eh∼q log q( )h v| p ,(h v θ; ) p( ; )v θ  (19.4)  = log ( ; )p v θ − Eh∼q [log ( ) log ( ; ) + log ( ; )]q h v| − p h v, θ p v θ (19.5) = − Eh∼q [log ( ) log ( ; )]q h v| − p h v, θ .
(19.6)  This yields the more canonical definition of the evidence lower bound,  L( ) = v θ, , q Eh∼q [log ( )] + ( )p h v, H q .
APPROXIMATE INFERENCE  approximations of p(h v| ), the lower bound L will be tighter, in other words, closer to log p(v).
We can thus think of inference as the procedure for finding the q that maximizes  L. Exact inference maximizes L perfectly by searching over a family of functions q that includes p(h v| ).
Throughout this chapter, we will show how to derive different forms of approximate inference by using approximate optimization to find q.
We can make the optimization procedure less expensive but approximate  by restricting the family of distributions q the optimization is allowed to search over or by using an imperfect optimization procedure that may not completely maximize but merely increase it by a significant amount.L  No matter what choice of q we use, L is a lower bound.
We can get tighter or looser bounds that are cheaper or more expensive to compute depending on how we choose to approach this optimization problem.
We can obtain a poorly matched q but reduce the computational cost by using an imperfect optimization procedure, or by using a perfect optimization procedure over a restricted family of q distributions.
19.2 Expectation Maximization  The first algorithm we introduce based on maximizing a lower bound L is the expectation maximization (EM) algorithm, a popular training algorithm for models with latent variables.
Unlike most of the other algorithms weNeal and Hinton 1999 describe in this chapter, EM is not an approach to approximate inference, but rather an approach to learning with an approximate posterior.
The EM algorithm consists of alternating between two steps until convergence:  • The E-step (Expectation step): Let θ(0) denote the value of the parameters at the beginning of the step.
Set q(h( )i | v) = p(h( )i | v ( )i ;θ(0)) for all indices i of the training examples v ( )i we want to train on (both batch and minibatch variants are valid).
By this we mean q is defined in terms of the current parameter value of θ(0); if we vary θ then p(h v| ;θ) will change but q p( )h v| will remain equal to ( ;h v| θ(0)).
• The (Maximization step): Completely or partially maximizeM-step   i  L(v ( )i , , qθ ) (19.8)  634    CHAPTER 19.
APPROXIMATE INFERENCE  with respect to using your optimization algorithm of choice.θ  This can be viewed as a coordinate ascent algorithm to maximize L. On one step, we maximize L with respect to q , and on the other, we maximize L with respect to .θ  Stochastic gradient ascent on latent variable models can be seen as a special case of the EM algorithm where the M step consists of taking a single gradient step.
For some model families, the M step can even be performed analytically, jumping all the  way to the optimal solution for given the current .θ q  Even though the E-step involves exact inference, we can think of the EM algorithm as using approximate inference in some sense.
This will introduce a gap between L and the true log p(v) as the M-step moves further and further away from the value θ(0) used in the E-step.
First, there is the basic structure of the learning process, in which we update the model parameters to improve the likelihood of a completed dataset, where all missing variables have their values provided by an estimate of the posterior distribution.
For example, using gradient descent to maximize the log-likelihood also has this same property; the log-likelihood gradient computations require taking expectations with respect to the posterior distribution over the hidden units.
Another key insight in the EM algorithm is that we can continue to use one value of q even after we have moved to a different value of θ.
This particular insight is used throughout classical machine learning to derive large M-step updates.
In the context of deep learning, most models are too complex to admit a tractable solution for an optimal large M-step update, so this second insight which is more unique to the EM algorithm is rarely used.
19.3 MAP Inference and Sparse Coding  We usually use the term inference to refer to computing the probability distribution over one set of variables given another.
When training probabilistic models with latent variables, we are usually interested in computing p(h v| ).
An alternative form of inference is to compute the single most likely value of the missing variables, rather than to infer the entire distribution over their possible values.
MAP inference is usually not thought of as approximate inference—it does compute the exact most likely value of h∗.
However, if we wish to develop a learning process based on maximizing L(v h, , q), then it is helpful to think of MAP inference as a procedure that provides a value of q.
In this sense, we can think of MAP inference as approximate inference, because it does not provide the optimal q.
Recall from section that exact inference consists of maximizing19.1  L( ) = v θ, , q Eh∼q [log ( )] + ( )p h v, H q (19.10)  with respect to q over an unrestricted family of probability distributions, using an exact optimization algorithm.
We can derive MAP inference as a form of approximate inference by restricting the family of distributions q may be drawn from.
Dropping terms of L that do not vary with , we are left with the optimization problemµ  µ∗ = arg max µ  log ( = )p h µ v, , (19.12)  which is equivalent to the MAP inference problem  h∗ = arg max h  p .
( )h v| (19.13)  We can thus justify a learning procedure similar to EM, in which we alternate between performing MAP inference to infer h∗ and then update θ to increase log p(h∗, v).
As with EM, this is a form of coordinate ascent on L, where we alternate between using inference to optimize L with respect to q and using parameter updates to optimize L with respect to θ.
In the case of MAP inference, this justification is rather vacuous, because the bound is infinitely loose, due to the Dirac distribution’s differential entropy of negative infinity.
APPROXIMATE INFERENCE  MAP inference is commonly used in deep learning as both a feature extractor and a learning mechanism.
Recall from section that sparse coding is a linear factor model that imposes13.4 a sparsity-inducing prior on its hidden units.
(19.14)  The visible units are then generated by performing a linear transformation and adding noise:  p , β( ) = ( ; +x h| N v Wh b −1I).
Every pair of variables hi and hj are both parents of v. This means that when v is observed, the graphical model contains an active path connecting hi and hj .
If the model were Gaussian then these interactions could be modeled efficiently via the covariance matrix, but the  sparse prior makes these interactions non-Gaussian.
Instead, we use MAP inference and learn the parameters by maximizing the ELBO defined by the Dirac distribution around the MAP estimate of .h  If we concatenate all of the h vectors in the training set into a matrix H, and concatenate all of the vectors into a matrix , then the sparse coding learningv V process consists of minimizing  J ,(H W ) =   i,j  |Hi,j | +   i,j   V HW−   2 i,j .
(19.16)  Most applications of sparse coding also involve weight decay or a constraint on the norms of the columns of W , in order to prevent the pathological solution with extremely small and large .H W  We can minimize J by alternating between minimization with respect to H and minimization with respect to W .
Minimization with respect to H requires specialized algorithms such as the feature-sign search algorithm ( , ).Lee et al.
APPROXIMATE INFERENCE  19.4 Variational Inference and Learning  We have seen how the evidence lower bound L(v θ, , q) is a lower bound on log p(v ;θ), how inference can be viewed as maximizing L with respect to q, and how learning can be viewed as maximizing L with respect to θ.
We have seen that the EM algorithm allows us to make large learning steps with a fixed q and that learning algorithms based on MAP inference allow us to learn using a point  estimate of p(h v| ) rather than inferring the entire distribution.
The core idea behind variational learning is that we can maximize L over a restricted family of distributions q .
A typical way to do this is to introduce assumptions about how factorizes.q  A common approach to variational learning is to impose the restriction that q is a factorial distribution:  q( ) =h v|   i  q h( i | v).
More generally, we can impose any graphi- cal model structure we choose on q, to flexibly determine how many interactions we want our approximation to capture.
This fully general graphical model approach is called structured variational inference ( , ).Saul and Jordan 1996  The beauty of the variational approach is that we do not need to specify a specific parametric form for q.
We specify how it should factorize, but then the optimization problem determines the optimal probability distribution within those factorization constraints.
For discrete latent variables, this just means that we use traditional optimization techniques to optimize a finite number of variables describing the q distribution.
For continuous latent variables, this means that we  use a branch of mathematics called calculus of variations to perform optimization over a space of functions, and actually determine which function should be used to represent q .
Calculus of variations is the origin of the names “variational learning” and “variational inference,” though these names apply even when the latent variables are discrete and calculus of variations is not needed.
In the case of continuous latent variables, calculus of variations is a powerful technique that removes much of the responsibility from the human designer of the model, who now must specify only how q factorizes, rather than needing to guess how to design a specific that can accurately approximate the posterior.q  Because L(v θ, , q ) is defined to be log p(v;θ) −DKL (q(h v| )p(h v| ;θ)), we can think of maximizing L with respect to q as minimizing DKL(q(h v| )p(h v| )).
However, we are doing so with the opposite direction of the KL divergence than we are used to using for fitting an approximation.
As illustrated in figure , this means that maximum likelihood3.6 encourages the model to have high probability everywhere that the data has high probability, while our optimization-based inference procedure encourages q to have low probability everywhere the true posterior has low probability.
The  choice of which to use depends on which properties are the highest priority for each application.
In the case of the inference optimization problem, we choose to use DKL(q(h v| )p(h v| )) for computational reasons.
Specifically, computing DKL(q(h v| )p(h v| )) involves evaluating expectations with respect to q, so by designing q to be simple, we can simplify the required expectations.
The opposite direction of the KL divergence would require computing expectations with respect to the true posterior.
Because the form of the true posterior is determined by the choice of model, we cannot design a reduced-cost approach to computing DKL( ( ) ( ))p h v| q h v| exactly.
19.4.1 Discrete Latent Variables  Variational inference with discrete latent variables is relatively straightforward.
We define a distribution q, typically one where each factor of q is just defined by a lookup table over discrete states.
In the simplest case, h is binary and we make the mean field assumption that factorizes over each individualq hi .
In principle the selection of q could be done with any optimization algorithm, such as gradient descent.
Because this optimization must occur in the inner loop of a learning algorithm, it must be very fast.
To achieve this speed, we typically use special optimization algorithms that are designed to solve comparatively small and simple problems in very few iterations.
A popular choice is to iterate fixed point equations, in other words, to solve  ∂  ∂ĥi L = 0 (19.18)  for ĥi .
To make this more concrete, we show how to apply variational inference to the binary sparse coding model (we present here the model developed by Henniges et al.
( ) but demonstrate traditional, generic mean field applied to the model,2010 while they introduce a specialized algorithm).
This derivation goes into considerable mathematical detail and is intended for the reader who wishes to fully resolve any ambiguity in the high-level conceptual description of variational inference and learning we have presented so far.
Readers who do not plan to derive or implement  variational learning algorithms may safely skip to the next section without missing any new high-level concepts.
Readers who proceed with the binary sparse coding example are encouraged to review the list of useful properties of functions that commonly arise in probabilistic models in section .
We use these properties3.10 liberally throughout the following derivations without highlighting exactly where we use each one.
In the binary sparse coding model, the input v ∈ Rn is generated from the model by adding Gaussian noise to the sum of m different components which can each be present or absent.
Each component is switched on or off by the  corresponding hidden unit in h ∈ { }0 1, m:  p h( i = 1) = (σ bi) (19.19)  p ,( ) = ( ;v h| N v Wh β−1) (19.20)  where b is a learnable set of biases, W is a learnable weight matrix, and β is a learnable, diagonal precision matrix.
Training this model with maximum likelihood requires taking the derivative with respect to the parameters.
Consider the derivative with respect to one of the biases:  ∂  ∂bi log ( )p v (19.21)  =  ∂ ∂b i p( )v  p( )v (19.22)  =  ∂ ∂b i   h p ,(h v)  p( )v (19.23)  =  ∂ ∂b i   h p p( )h ( )v h| p( )v  (19.24)  640    CHAPTER 19.
APPROXIMATE INFERENCE  h1h1 h2h2 h3h3  v1v1 v2v2 v3v3  h4h4  h1h1  h2h2  h3h3  h4h4  Figure 19.2: The graph structure of a binary sparse coding model with four hidden units.
Note that the edges are directed, and that every two hidden units are co-parents of every visible unit.
In order to account for the active paths between co-parents, the posterior distribution needs an edge between all of the hidden units.
=   h p( )v h| ∂∂b ip( )h p( )v  (19.25)  =   h  p( )h v| ∂ ∂bi p( )h  p( )h (19.26)  =Eh∼ |p(h v) ∂  ∂b i log ( )p h .
The posterior distribution corresponds to the complete graph over the hidden units, so variable elimination algorithms do not help us to compute  the required expectations any faster than brute force.
(19.28)  The latent variables of the binary sparse coding model are binary, so to represent a factorial q we simply need to model m Bernoulli distributions q(hi | v).
A natural way to represent the means of the Bernoulli distributions is with a vector ĥ of probabilities, with q(hi = 1 | v) = ĥi .
We impose a restriction that ĥ i is never equal to 0 or to 1, in order to avoid errors when computing, for example, log ĥi.
In software, we may wish to implement binary sparse0 1 coding using an unrestricted vector of variational parameters z and obtain ĥ via the relation ĥ = σ(z ).
We can thus safely compute log ĥi on a computer by using the identity log (σ zi) = (−ζ −zi ) relating the sigmoid and the softplus.
To begin our derivation of variational learning in the binary sparse coding model, we show that the use of this mean field approximation makes learning tractable.
The evidence lower bound is given by  L( )v θ, , q (19.29) =Eh∼q[log ( )] + ( )p h v, H q (19.30)  =Eh∼q[log ( ) + log ( ) log ( )]p h p v h| − q h v| (19.31)  =Eh∼q   m  i=1  log (p hi ) +  n  i=1  log (p vi | −h) m  i=1  log (q hi | v)   (19.32)  =  m  i=1   ĥi(log (σ bi) log− ĥi) + (1 − ĥi)(log (σ −b i) log(1− − ĥi))   (19.33)  + Eh∼q   n  i=1  log   βi  2π exp   −βi  2 (vi −Wi,:h)2   (19.34)  =  m  i=1   ĥi(log (σ bi) log− ĥi) + (1 − ĥi)(log (σ −b i) log(1− − ĥi))   (19.35)  + 1  2  n  i=1    log βi 2π  − βi    v2i − 2viWi,: ĥ+   j    W 2i,jĥj +   k j= Wi,jWi,k ĥjĥk             .
(19.36)  While these equations are somewhat unappealing aesthetically, they show that L can be expressed in a small number of simple arithmetic operations.
In principle, we could simply run gradient ascent on both v and h and this would make a perfectly acceptable combined inference and training algorithm.
First, this would require storing ĥ for each v. We typically prefer algorithms that do not require per- example memory.
It is difficult to scale learning algorithms to billions of examples if we must remember a dynamically updated vector associated with each example.
APPROXIMATE INFERENCE  Second, we would like to be able to extract the features ĥ very quickly, in order to recognize the content of v .
For both these reasons, we typically do not use gradient descent to compute the mean field parameters ĥ.
The idea behind fixed point equations is that we are seeking a local maximum with respect to ĥ, where ∇hL(v θ, , ĥ) = 0 .
Common convergence criteria include stopping when a full cycle of updates does not improve L by more than some tolerance amount, or when the cycle does not change ĥ by more than some amount.
Iterating mean field fixed point equations is a general technique that can provide fast variational inference in a broad variety of models.
To make this more concrete, we show how to derive the updates for the binary sparse coding model in particular.
To do so, we substitute equation into the left side of equation :19.36 19.37  ∂  ∂ ĥi L(v θ, , ĥ) (19.38)  = ∂  ∂ ĥi     m  j=1   ĥj (log (σ bj ) log− ĥj) + (1 − ĥj )(log (σ −bj) log(1− − ĥj))   (19.39)  + 1  2  n  j=1    log βj 2π  − βj    v 2j − 2vjWj,: ĥ+   k    W2j,kĥk +   l k= Wj,kWj,l ĥkĥl                  (19.40)  = log (σ bi) log− ĥi − −1 + log(1 ĥ i) + 1 log (− σ −bi) (19.41)  +  n  j=1    βj    vjWj,i − 1  2 W 2j,i −    k i= Wj,kWj,i ĥk         (19.42)  643    CHAPTER 19.
APPROXIMATE INFERENCE  =bi − log ĥi + log(1 − ĥi) + vβW:,i − 1  2 W :,iβW:,i −    j i= W:,jβW:,iĥj.
(19.43)  To apply the fixed point update inference rule, we solve for the ĥi that sets equation to 0:19.43  ĥi = σ    bi + vβW:,i − 1  2 W :,iβW:,i −    j i= W:,jβW:,iĥj     .
(19.44)  At this point, we can see that there is a close connection between recurrent neural networks and inference in graphical models.
We have described how to derive this network from a model description, but it is also possible to train the inference network directly.
Several ideas based on this theme are described in chapter .20  In the case of binary sparse coding, we can see that the recurrent network connection specified by equation consists of repeatedly updating the hidden19.44 units based on the changing values of the neighboring hidden units.
The input always sends a fixed message of vβW to the hidden units, but the hidden units constantly update the message they send to each other.
This is a form of competition—between two hidden units that both explain the input, only the one that explains the input best will be allowed to remain active.
This competition is  the mean field approximation’s attempt to capture the explaining away interactions in the binary sparse coding posterior.
The explaining away effect actually should cause a multi-modal posterior, so that if we draw samples from the posterior, some samples will have one unit active, other samples will have the other unit active, but very few samples have both active.
Unfortunately, explaining away interactions cannot be modeled by the factorial q used for mean field, so the mean field approximation is forced to choose one mode to model.
This is an instance of the behavior illustrated in figure .3.6  We can rewrite equation into an equivalent form that reveals some further19.44 insights:  ĥi = σ    bi+    v −   j i= W:,j ĥj       βW :,i− 1  2 W:,iβW:,i     .
(19.45)  In this reformulation, we see the input at each step as consisting of v−  j i= W:,j ĥj  rather than v. We can thus think of unit i as attempting to encode the residual  644    CHAPTER 19.
We can thus think of sparse coding as an iterative autoencoder, that repeatedly encodes and decodes its input, attempting to fix mistakes in the reconstruction after each iteration.
Some graphical models, such as deep Boltzmann machines, are structured in such a way that we can solve for many entries of ĥ simultaneously.
In the damping approach, we solve for the individually optimal values of every element of ĥ, then move all of the values in a small step in that direction.
This approach is no longer guaranteed to increase L at each step, but works well in practice for many models.
See Koller and Friedman 2009( ) for more information about choosing the degree of synchrony and damping strategies in message passing algorithms.
19.4.2 Calculus of Variations  Before continuing with our presentation of variational learning, we must briefly introduce an important set of mathematical tools used in variational learning: calculus of variations.
Many machine learning techniques are based on minimizing a function J(θ) by finding the input vector θ ∈ Rn for which it takes on its minimal value.
This can be accomplished with multivariate calculus and linear algebra, by solving for the critical points where ∇θJ(θ) = 0.
In some cases, we actually want to solve for a function f(x), such as when we want to find the probability density function over some random variable.
Much as we can take partial derivatives of a function with respect to elements of its vector-  valued argument, we can take functional derivatives, also known as variational derivatives, of a functional J [f] with respect to individual values of the function f (x) at any specific value of x.
The functional derivative of the functional J with respect to the value of the function at point is denotedf x δδf x( )J .
For our purposes, it is sufficient to state that for differentiable functions f g y,( )x and differentiable functions ( x) with continuous derivatives, that  δ  δf( )x   g f , d( ( )x x) x =  ∂  ∂y g f , .
APPROXIMATE INFERENCE  To gain some intuition for this identity, one can think of f(x) as being a vector with uncountably many elements, indexed by a real vector x.
In this (somewhat incomplete view), the identity providing the functional derivatives is the same as  we would obtain for a vector θ ∈ Rn indexed by positive integers:  ∂  ∂θi    j  g θ( j, j) = ∂  ∂θi g θ( i , i .)
(19.47)  Many results in other machine learning publications are presented using the more general Euler-Lagrange equation which allows g to depend on the derivatives of f as well as the value of f , but we do not need this fully general form for the  results presented in this book.
To optimize a function with respect to a vector, we take the gradient of the function with respect to the vector and solve for the point where every element of the gradient is equal to zero.
Likewise, we can optimize a functional by solving for the function where the functional derivative at every point is equal to zero.
As an example of how this process works, consider the problem of finding the probability distribution function over x ∈ R that has maximal differential entropy.
( ) log ( ) (19.49)  We cannot simply maximize H[p ] with respect to the function p(x), because the result might not be a probability distribution.
Finally, the problem is underdetermined because the distribution can be shifted arbitrarily without changing the entropy.
The Lagrangian functional for this optimization problem is  L[ ] = p λ1   p x dx( ) − 1   +λ2 ( [ ] )+E x − µ λ3  E[( )x µ− 2] − σ2   + [ ]H p (19.50)  646    CHAPTER 19.
APPROXIMATE INFERENCE  =    λ1p x λ( ) + 2p x x λ( ) + 3p x x µ( )( − )2 − p x p x( ) log ( )   dx λ− 1 − µλ2 − σ2λ3.
(19.51)  To minimize the Lagrangian with respect to p, we set the functional derivatives equal to 0:  ∀x, δ δp x( )  L = λ1 + λ2x λ+ 3( )x µ− 2− −1 log ( ) = 0p x .
By algebraically re-arranging the equation, we obtain  p x( ) = exp  λ1 + λ2x λ+ 3( )x µ− 2 − 1   .
(19.53)  We never assumed directly that p(x) would take this functional form; we obtained the expression itself by analytically minimizing a functional.
To finish the minimization problem, we must choose the λ values to ensure that all of our constraints are satisfied.
We are free to choose any λ values, because the gradient of the Lagrangian with respect to the λ variables is zero so long as the constraints are satisfied.
To satisfy all of the constraints, we may set λ1 = 1 − log σ  √ 2π ,  λ2 = 0, and λ3 = − 12σ2 to obtain  p x x µ,σ( ) = (N ; 2).
(19.54)  This is one reason for using the normal distribution when we do not know the  true distribution.
Because the normal distribution has the maximum entropy, we impose the least possible amount of structure by making this assumption.
While examining the critical points of the Lagrangian functional for the entropy, we found only one critical point, corresponding to maximizing the entropy for fixed variance.
As functions place more probability density on the two points x = µ+ σ and x = µ σ− , and place less probability density on all other values of x, they lose entropy while maintaining the desired variance.
However, any function placing exactly zero mass on all but two points does not integrate to one, and is not a  valid probability distribution.
There thus is no single minimal entropy probability distribution function, much as there is no single minimal positive real number.
Instead, we can say that there is a sequence of probability distributions converging toward putting mass only on these two points.
Because Dirac distributions are not described by a single probability distribution function, no Dirac or mixture of Dirac distribution corresponds to a single specific point in function space.
These distributions are thus invisible to our method of solving for a specific point where the functional derivatives are zero.
Distributions such as the Dirac must be found by other methods, such as guessing the solution and then proving that it is correct.
19.4.3 Continuous Latent Variables  When our graphical model contains continuous latent variables, we may still perform variational inference and learning by maximizing L. However, we must now use calculus of variations when maximizing with respect to .L q( )h v|  In most cases, practitioners need not solve any calculus of variations problems themselves.
If we make the mean field approximation  q( ) =h v|   i  q h( i | v), (19.55)  and fix q(hj | v) for all j = i, then the optimal q(h i | v) may be obtained by normalizing the unnormalized distribution  q̃ h( i | v) = exp  Eh−i∼q(h−i |v) log p̃ ,(v h)   (19.56)  so long as p does not assign probability to any joint configuration of variables.0 Carrying out the expectation inside the equation will yield the correct functional form of q(hi | v).
It is only necessary to derive functional forms of q directly using calculus of variations if one wishes to develop a new form of variational learning;  equation yields the mean field approximation for any probabilistic model.19.56  Equation is a fixed point equation, designed to be iteratively applied for19.56 each value of i repeatedly until convergence.
It tells us the functional form that the optimal solution will take, whether we arrive there by fixed point equations or not.
This means we can take the functional form from that equation but regard some of the values that appear in it as parameters, that we can optimize with any optimization algorithm we like.
As an example, consider a very simple probabilistic model, with latent variables  h ∈ R2 and just one visible variable, v. Suppose that p(h) = N (h ; 0,I) and p(v | h) = N (v ;wh; 1).
We could actually simplify this model by integrating out h; the result is just a Gaussian distribution over v. The model itself is not  648    CHAPTER 19.
APPROXIMATE INFERENCE  interesting; we have constructed it only to provide a simple demonstration of how calculus of variations may be applied to probabilistic modeling.
The true posterior is given, up to a normalizing constant, by  p( )h v| (19.57) ∝p ,(h v) (19.58) = (p h1 ) (p h2) ( )p v h| (19.59)  ∝ exp   −1 2   h21 + h  2 2 + (v h− 1w1 − h2w2)2   (19.60)  = exp   −1  2   h21 + h  2 2 + v  2 + h21w 2 1 + h  2 2w  2 2 − 2vh1w1 − 2vh2w2 + 2h1w1h2w2   .
(19.61)  Due to the presence of the terms multiplying h1 and h2 together, we can see that  the true posterior does not factorize over h1 and h2.
Applying equation , we find that19.56  q̃ h( 1 | v) (19.62) = exp   Eh2∼q(h2 |v) log p̃ ,(v h)   (19.63)  = exp   − 1  2 Eh2∼q(h2 |v)   h21 + h  2 2 + v  2+ h21w 2 1 + h  2 2w 2 2 (19.64)  −2vh1w1 − 2vh2w2+ 2h1w1h2w2]  .
(19.65)  From this, we can see that there are effectively only two values we need to obtain from q(h2 | v): Eh2∼ |q(h v)[h2] and Eh2∼ |q(h v)[h22].
Writing these as h2 and h22, we obtain  q̃ h( 1 | v) = exp   − 1 2   h21 + h22 + v2 + h21w21 + h22w22 (19.66)  −2vh1w1 − 2v h2w2+ 2h1w1h2w2]  .
We can thus conclude q(h v| ) = N(h;µ β, −1) where µ and diagonal β are variational parameters that we can optimize using any technique we choose.
It is important to recall that we did not ever assume that q would be Gaussian; its Gaussian  form was derived automatically by using calculus of variations to maximize q with  649    CHAPTER 19.
APPROXIMATE INFERENCE  respect to L. Using the same approach on a different model could yield a different functional form of .q  This was of course, just a small case constructed for demonstration purposes.
For examples of real applications of variational learning with continuous variables in the context of deep learning, see ( ).Goodfellow et al.
2013d  19.4.4 Interactions between Learning and Inference  Using approximate inference as part of a learning algorithm affects the learning process, and this in turn affects the accuracy of the inference algorithm.
Specifically, the training algorithm tends to adapt the model in a way that makes the approximating assumptions underlying the approximate inference algorithm become more true.
(19.68)  For a specific v, this increases p(h v| ) for values of h that have high probability under q(h v| ) and decreases p(h v| ) for values of h that have low probability under .q( )h v|  This behavior causes our approximating assumptions to become self-fulfilling prophecies.
If we train the model with a unimodal approximate posterior, we will obtain a model with a true posterior that is far closer to unimodal than we would have obtained by training the model with exact inference.
Computing the true amount of harm imposed on a model by a variational approximation is thus very difficult.
We often estimate log p(v; θ) after training the model, and find that the gap with L(v θ, , q) is small.
From this, we can conclude that our variational approximation is accurate for the specific value of θ that we obtained from the learning process.
We should not conclude that our variational approximation is accurate in general or that the variational approximation did little harm to the  learning process.
To measure the true amount of harm induced by the variational approximation, we would need to know θ∗ = maxθ log p(v;θ).
If maxqL(v θ, ∗ , q)  log p(v ;θ∗), because θ∗ induces too complicated of a posterior distribution for our q family to capture, then the learning process will never approach θ∗.
Such a problem is very difficult to detect, because we can only know for sure that it happened if we have a superior learning algorithm that can find θ∗  for comparison.
APPROXIMATE INFERENCE  19.5 Learned Approximate Inference  We have seen that inference can be thought of as an optimization procedure that increases the value of a function L. Explicitly performing optimization via iterative procedures such as fixed point equations or gradient-based optimization is often very expensive and time-consuming.
Specifically, we can  think of the optimization process as a function f that maps an input v to an approximate distribution q∗ = arg maxq L(v, q).
Once we think of the multi-step iterative optimization process as just being a function, we can approximate it with a neural network that implements an approximation f̂( ; )v θ .
19.5.1 Wake-Sleep  One of the main difficulties with training a model to infer h from v is that we  do not have a supervised training set with which to train the model.
Given a v , we do not know the appropriate h. The mapping from v to h depends on the choice of model family, and evolves throughout the learning process as θ changes.
The wake-sleep algorithm (Hinton 1995b Frey 1996et al., ; et al., ) resolves this problem by drawing samples of both h and v from the model distribution.
For example, in a directed model, this can be done cheaply by performing ancestral sampling beginning at h and ending at v. The inference network can then be trained to perform the reverse mapping: predicting which h caused the present v. The main drawback to this approach is that we will only be able to train the inference network on values of v that have high probability under the model.
Early in learning, the model distribution will not resemble the data distribution, so the inference network will not have an opportunity to learn on samples that resemble  data.
In section we saw that one possible explanation for the role of dream sleep18.2 in human beings and animals is that dreams could provide the negative phase samples that Monte Carlo training algorithms use to approximate the negative gradient of the log partition function of undirected models.
Another possible explanation for biological dreaming is that it is providing samples from p(h v, ) which can be used to train an inference network to predict h given v .
Monte Carlo algorithms generally do not perform well if they are run using only the positive phase of the gradient for several steps then with only the negative phase of the gradient for several steps.
Human beings and animals are usually  awake for several consecutive hours then asleep for several consecutive hours.
APPROXIMATE INFERENCE  not readily apparent how this schedule could support Monte Carlo training of an undirected model.
Learning algorithms based on maximizing L can be run with prolonged periods of improving q and prolonged periods of improving θ, however.
If the role of biological dreaming is to train networks for predicting q, then this explains how animals are able to remain awake for several hours (the longer they are awake, the greater the gap between L and log p(v), but L will remain a lower bound) and to remain asleep for several hours (the generative model itself is not modified during sleep) without damaging their internal models.
Of course, these  ideas are purely speculative, and there is no hard evidence to suggest that dreaming accomplishes either of these goals.
Dreaming may also serve reinforcement learning rather than probabilistic modeling, by sampling synthetic experiences from the animal’s transition model, on which to train the animal’s policy.
19.5.2 Other Forms of Learned Inference  This strategy of learned approximate inference has also been applied to other  models.
Salakhutdinov and Larochelle 2010( ) showed that a single pass in a learned inference network could yield faster inference than iterating the mean field fixed point equations in a DBM.
The training procedure is based on running the inference network, then applying one step of mean field to improve its estimates, and training the inference network to output this refined estimate instead of its original estimate.
We have already seen in section that the predictive sparse decomposition14.8 model trains a shallow encoder network to predict a sparse code for the input.
It is possible to devise probabilistic semantics for the model, under which the encoder may be viewed as performing learned approximate MAP inference.
Due to its  shallow encoder, PSD is not able to implement the kind of competition between units that we have seen in mean field inference.
However, that problem can be remedied by training a deep encoder to perform learned approximate inference, as in the ISTA technique ( , ).Gregor and LeCun 2010b  Learned approximate inference has recently become one of the dominant approaches to generative modeling, in the form of the variational autoencoder ( , ; , ).
Instead, the inference network is simply used to define L, and then the parameters of the inference network are adapted to increase .
APPROXIMATE INFERENCE  Using approximate inference, it is possible to train and use a wide variety of models.
                                     Chapter 20  Deep Generative Models  In this chapter, we present several of the specific kinds of generative models that can be built and trained using the techniques presented in chapters – .
Others do not allow the evaluation of the probability distribution function, but support operations that implicitly require knowledge of it, such as drawing samples from the distribution.
Some of these models are structured probabilistic models described in terms of graphs and factors, using the language of graphical models presented in chapter .
Others can not easily be described in terms of factors,16 but represent probability distributions nonetheless.
20.1 Boltzmann Machines  Boltzmann machines were originally introduced as a general “connectionist” ap-  proach to learning arbitrary probability distributions over binary vectors (Fahlman et al., ;1983 Ackley 1985 Hinton 1984 Hinton and Sejnowski 1986et al., ; et al., ; , ).
Variants of the Boltzmann machine that include other kinds of variables have long ago surpassed the popularity of the original.
In this section we briefly introduce the binary Boltzmann machine and discuss the issues that come up when trying to train and perform inference in the model.
We define the Boltzmann machine over a d-dimensional binary random vector  x ∈ {0,1}d. The Boltzmann machine is an energy-based model (section ),16.2.4  654    CHAPTER 20.
DEEP GENERATIVE MODELS  meaning we define the joint probability distribution using an energy function:  P ( ) =x exp ( ( ))−E x  Z , (20.1)  where E(x) is the energy function and Z is the partition function that ensures that   x P ( ) = 1x .
The energy function of the Boltzmann machine is given by  E( ) = x −xUx b− x, (20.2)  where U is the “weight” matrix of model parameters and b is the vector of bias  parameters.
In the general setting of the Boltzmann machine, we are given a set of training examples, each of which are n-dimensional.
While this scenario is certainly viable, it does limit the kinds of interactions between the observed variables to those described by the weight matrix.
Specifically, it means that the probability of one unit being on is given by a linear model (logistic regression) from the values of the other units.
In this case, the latent variables, can act similarly to hidden units in a multi-layer perceptron and model higher-order interactions among the visible units.
Just as the addition of hidden units to convert logistic regression into an MLP results in the MLP being a universal approximator of functions, a Boltzmann machine with hidden units is no longer limited to modeling linear relationships between variables.
Instead, the Boltzmann machine becomes a universal approximator of probability mass functions over discrete variables ( , ).Le Roux and Bengio 2008  Formally, we decompose the units x into two subsets: the visible units v and the latent (or hidden) units .
(20.3)  Boltzmann Machine Learning Learning algorithms for Boltzmann machines are usually based on maximum likelihood.
All Boltzmann machines have an intractable partition function, so the maximum likelihood gradient must be ap- proximated using the techniques described in chapter .18  One interesting property of Boltzmann machines when trained with learning rules based on maximum likelihood is that the update for a particular weight connecting two units depends only the statistics of those two units, collected under different distributions: Pmodel(v) and P̂data(v)Pmodel(h v| ).
DEEP GENERATIVE MODELS  network participates in shaping those statistics, but the weight can be updated without knowing anything about the rest of the network or how those statistics were produced.
This means that the learning rule is “local,” which makes Boltzmann machine learning somewhat biologically plausible.
It is conceivable that if each neuron were a random variable in a Boltzmann machine, then the axons and dendrites connecting two random variables could learn only by observing the firing pattern of the cells that they actually physically touch.
In particular, in the positive phase, two units that frequently activate together have their connection  strengthened.
This is an example of a Hebbian learning rule ( , ) oftenHebb 1949 summarized with the mnemonic “fire together, wire together.” Hebbian learning rules are among the oldest hypothesized explanations for learning in biological systems and remain relevant today ( , ).Giudice et al.
2009  Other learning algorithms that use more information than local statistics seem to require us to hypothesize the existence of more machinery than this.
For example, for the brain to implement back-propagation in a multilayer perceptron, it seems necessary for the brain to maintain a secondary communication network for transmitting gradient information backwards through the network.
Proposals for biologically plausible implementations (and approximations) of back-propagation have been made ( , ; , ) but remain to be validated, andHinton 2007a Bengio 2015  Bengio 2015( ) links back-propagation of gradients to inference in energy-based models similar to the Boltzmann machine (but with continuous latent variables).
The negative phase of Boltzmann machine learning is somewhat harder to explain from a biological point of view.
20.2 Restricted Boltzmann Machines  Invented under the name harmonium ( , ), restricted BoltzmannSmolensky 1986 machines are some of the most common building blocks of deep probabilistic models.
RBMs are undirected probabilistic graphical models containing a layer of observable variables and a single layer of latent variables.
It is a bipartite graph, with no connections permitted between any variables in the observed layer or between any units in the latent layer.
DEEP GENERATIVE MODELS  h1h1 h2h2 h3h3  v1v1 v2v2 v3v3  h4h4 h (1) 1h (1) 1 h  (1) 2h (1) 2 h  (1) 3h (1) 3  v1v1 v2v2 v3v3  h (2) 1h (2) 1 h  (2) 2h (2) 2 h  (2) 3h (2) 3  h (1) 4h (1) 4  (a) (b)  h(1)1h (1) 1 h  (1) 2h (1) 2 h  (1) 3h (1) 3  v1v1 v2v2 v3v3  h (2) 1h (2) 1 h  (2) 2h (2) 2 h  (2) 3h (2) 3  h(1)4h (1) 4  (c)  Figure 20.1: Examples of models that may be built with restricted Boltzmann machines.
(a)The restricted Boltzmann machine itself is an undirected graphical model based on a bipartite graph, with visible units in one part of the graph and hidden units in the other part.
Typically every visible unit is connected to every hidden unit but it is possible to construct sparsely connected RBMs such as convolutional RBMs.
A(b) deep belief network is a hybrid graphical model involving both directed and undirected connections.
However, a DBN has multiple hidden layers, and thus there are connections between hidden units that are in separate layers.
All of the local conditional probability distributions needed by the deep belief network are copied directly from the local conditional probability distributions of its constituent RBMs.
Alternatively, we could also represent the deep belief network with a completely undirected graph, but it would need intralayer connections to capture the dependencies between parents.
A deep Boltzmann machine is an undirected graphical(c) model with several layers of latent variables.
DEEP GENERATIVE MODELS  We begin with the binary version of the restricted Boltzmann machine, but as we see later there are extensions to other types of visible and hidden units.
More formally, let the observed layer consist of a set of n v binary random variables which we refer to collectively with the vector v. We refer to the latent or hidden layer of nh binary random variables as .h  Like the general Boltzmann machine, the restricted Boltzmann machine is an energy-based model with the joint probability distribution specified by its energy function:  P ,( = v v h = ) =h 1  Z exp ( ( ))−E v h, .
(20.4)  The energy function for an RBM is given by  E ,(v h b) = − v c− h v− Wh, (20.5)  and is the normalizing constant known as the partition function:Z  Z =   v    h  exp ( ){−E v h, } .
(20.6)  It is apparent from the definition of the partition function Z that the naive method of computing Z (exhaustively summing over all states) could be computationally intractable, unless a cleverly designed algorithm could exploit regularities in the probability distribution to compute Z faster.
In the case of restricted Boltzmann  machines, ( ) formally proved that the partition functionLong and Servedio 2010 Z is intractable.
The intractable partition function Z implies that the normalized joint probability distribution is also intractable to evaluate.P ( )v  20.2.1 Conditional Distributions  Though P (v) is intractable, the bipartite graph structure of the RBM has the very special property that its conditional distributions P(h v| ) and P (v h| ) are factorial and relatively simple to compute and to sample from.
Deriving the conditional distributions from the joint distribution is straightfor- ward:  P ( ) =h v| P ,(h v) P ( )v  (20.7)  = 1  P ( )v  1  Z exp   bv c+ h v+ Wh   (20.8)  = 1  Z  exp   ch v+ Wh   (20.9)  658    CHAPTER 20.
DEEP GENERATIVE MODELS  = 1  Z  exp       nh  j=1  cjhj +  nh  j=1  vW:,jhj      (20.10)  = 1  Z   nh  j=1  exp  cjhj + v  W:,jhj   (20.11)  Since we are conditioning on the visible units v , we can treat these as constant with respect to the distribution P (h v| ).
The factorial nature of the conditional P (h v| ) follows immediately from our ability to write the joint probability over the vector h as the product of (unnormalized) distributions over the individual elements, hj .
P h( j = 1 ) =| v P̃ h( j = 1 )| v  P̃ h( j = 0 ) +| v P̃ h( j = 1 )| v (20.12)  = exp   cj + v  W:,j   exp 0 + exp{ } {cj + vW:,j} (20.13)  = σ  cj + v  W:,j  .
(20.14)  We can now express the full conditional over the hidden layer as the factorial distribution:  P ( ) =h v| nh  j=1  σ   (2 1) ( +h−  c Wv)   j .
(20.15)  A similar derivation will show that the other condition of interest to us, P (v h| ), is also a factorial distribution:  P ( ) =v h| nv  i=1  σ ((2 1) ( + ))v−  b Wh i .
(20.16)  20.2.2 Training Restricted Boltzmann Machines  Because the RBM admits efficient evaluation and differentiation of P̃ (v) and  efficient MCMC sampling in the form of block Gibbs sampling, it can readily be trained with any of the techniques described in chapter for training models18 that have intractable partition functions.
Compared to other undirected models used in deep learning, the RBM is relatively straightforward to train because we can compute P(h | v)  659    CHAPTER 20.
Some other deep models, such as the deep Boltzmann machine, combine both the difficulty of an intractable partition function and the difficulty of intractable inference.
20.3 Deep Belief Networks  Deep belief networks (DBNs) were one of the first non-convolutional models  to successfully admit training of deep architectures (Hinton 2006 Hintonet al., ; , 2007b).
Prior to the introduction of deep belief networks, deep models were considered too difficult to optimize.
Deep belief networks demonstrated that deep architectures can be successful, by outperforming kernelized support vector machines on the MNIST dataset ( , ).
2006 networks have mostly fallen out of favor and are rarely used, even compared to other unsupervised or generative learning algorithms, but they are still deservedly recognized for their important role in deep learning history.
Usually, every unit in each layer is connected to every unit in each neighboring layer, though it is possible to construct more sparsely connected DBNs.
The connections between all other layers are directed, with the arrows pointed toward the layer that is closest to the data.
The probability distribution represented by the DBN is given by  P (h( )l ,h( 1)l− ) exp∝  b ( )l   h( )l + b( 1)l− h( 1)l− + h( 1)l− W ( )l h( )l   , (20.17)  P h( ( )k i = 1 | h( +1)k ) = σ   b ( )k i +W  ( +1)k  :,i h  ( +1)k   ∀ ∀ ∈ −i, k 1, .
(20.19)  In the case of real-valued visible units, substitute  v ∼ N  v b; (0) +W (1)h(1),β−1   (20.20)  660    CHAPTER 20.
To generate a sample from a DBN, we first run several steps of Gibbs sampling on the top two hidden layers.
We can then use a single pass of ancestral sampling through the rest of the model to draw a sample from the visible units.
Deep belief networks incur many of the problems associated with both directed models and undirected models.
Inference in a deep belief network is intractable due to the explaining away effect within each directed layer, and due to the interaction between the two hidden layers that have undirected connections.
Evaluating or maximizing the standard evidence lower bound on the log-likelihood is also intractable, because the evidence lower bound takes the expectation of cliques whose size is equal to the network width.
Evaluating or maximizing the log-likelihood requires not just confronting the problem of intractable inference to marginalize out the latent variables, but also the problem of an intractable partition function within the undirected model of  the top two layers.
To train a deep belief network, one begins by training an RBM to maximize Ev∼pdata log p(v) using contrastive divergence or stochastic maximum likelihood.
Next, a second RBM is trained to approximately maximize  Ev∼pdataEh(1)∼p(1)(h(1)|v) log p (2)(h(1)) (20.21)  where p(1) is the probability distribution represented by the first RBM and p(2)  is the probability distribution represented by the second RBM.
In other words, the second RBM is trained to model the distribution defined by sampling the hidden units of the first RBM, when the first RBM is driven by the data.
This procedure can be repeated indefinitely, to add as many layers to the DBN as desired, with each new RBM modeling the samples of the previous one.
This procedure can be justified as increasing a variational lower bound on the log-likelihood of the data under the DBN (Hinton et al., ).2006  In most applications, no effort is made to jointly train the DBN after the greedy layer-wise procedure is complete.
DEEP GENERATIVE MODELS  The trained DBN may be used directly as a generative model, but most of the interest in DBNs arose from their ability to improve classification models.
,m, (20.23)  After initializing this MLP with the weights and biases learned via generative training of the DBN, we may train the MLP to perform a classification task.
This specific choice of MLP is somewhat arbitrary, compared to many of the inference equations in chapter that are derived from first principles.
This MLP19 is a heuristic choice that seems to work well in practice and is used consistently in the literature.
Many approximate inference techniques are motivated by their ability to find a maximally variational lower bound on the log-likelihoodtight under some set of constraints.
One can construct a variational lower bound on the  log-likelihood using the hidden unit expectations defined by the DBN’s MLP, but this is true of probability distribution over the hidden units, and there is noany reason to believe that this MLP provides a particularly tight bound.
The MLP propagates information upward from the visible units to the deepest hidden units, but does not propagate any information downward or sideways.
The DBN graphical model has explaining away interactions between all of the hidden units within the same layer as well as top-down interactions between layers.
While the log-likelihood of a DBN is intractable, it may be approximated with AIS (Salakhutdinov and Murray 2008, ).
The term “deep belief network” is commonly used incorrectly to refer to any kind of deep neural network, even networks without latent variable semantics.
The term “deep belief network” should refer specifically to models with undirected connections in the deepest layer and directed connections pointing downward between all other pairs of consecutive layers.
The term “deep belief network” may also cause some confusion because the term “belief network” is sometimes used to refer to purely directed models, while deep belief networks contain an undirected layer.
Deep belief networks also share the acronym DBN with dynamic Bayesian networks (Dean and Kanazawa 1989, ), which are Bayesian networks for representing Markov chains.
DEEP GENERATIVE MODELS  h (1) 1h (1) 1 h  (1) 2h (1) 2 h  (1) 3h (1) 3  v1v1 v2v2 v3v3  h (2) 1h (2) 1 h  (2) 2h (2) 2 h  (2) 3h (2) 3  h (1) 4h (1) 4  Figure 20.2: The graphical model for a deep Boltzmann machine with one visible layer (bottom) and two hidden layers.
20.4 Deep Boltzmann Machines  A deep Boltzmann machine or DBM (Salakhutdinov and Hinton 2009a, ) is another kind of deep, generative model.
But like the RBM, within each layer, each of the variables are mutually independent, conditioned on the variables in the neighboring layers.
Deep Boltzmann20.2 machines have been applied to a variety of tasks including document modeling (Srivastava 2013et al., ).
Like RBMs and DBNs, DBMs typically contain only binary units—as we assume for simplicity of our presentation of the model—but it is straightforward  to include real-valued visible units.
A DBM is an energy-based model, meaning that the the joint probability distribution over the model variables is parametrized by an energy function E .
In the case of a deep Boltzmann machine with one visible layer, v, and three hidden layers, h(1), h(2) and h(3) , the joint probability is given by:  P  v h, (1),h(2),h(3)   =  1  Z( )θ exp   −E ,(v h(1),h(2),h(3) ; )θ   .
The DBM energy function is then defined as follows:  E ,(v h(1) ,h(2),h(3); ) = θ −vW (1)h(1)− h(1)W (2)h(2) − h(2)W (3)h(3).
DEEP GENERATIVE MODELS  h (1) 1h (1) 1 h  (1) 2h (1) 2 h  (1) 3h (1) 3  v1v1 v2v2  h(2)1h (2) 1 h  (2) 2h (2) 2 h  (2) 3h (2) 3  h (3) 1h (3) 1 h  (3) 2h (3) 2  v 1  v 2  h (2) 1h (2) 1  h (2) 2h (2) 2  h(2)3h (2) 3  h (1) 1h (1) 1  h (1) 2h (1) 2  h (1) 3h (1) 3  h (3) 1h (3) 1  h (3) 2h (3) 2  Figure 20.3: A deep Boltzmann machine, re-arranged to reveal its bipartite graph structure.
In comparison to the RBM energy function (equation ), the DBM energy20.5 function includes connections between the hidden units (latent variables) in the form of the weight matrices (W (2) and W (3)).
As we will see, these connections have significant consequences for both the model behavior as well as how we go  about performing inference in the model.
In comparison to fully connected Boltzmann machines (with every unit con- nected to every other unit), the DBM offers some advantages that are similar to those offered by the RBM.
Specifically, as illustrated in figure , the DBM20.3 layers can be organized into a bipartite graph, with odd layers on one side and even layers on the other.
This immediately implies that when we condition on the variables in the even layer, the variables in the odd layers become conditionally independent.
Of course, when we condition on the variables in the odd layers, the variables in the even layers also become conditionally independent.
The bipartite structure of the DBM means that we can apply the same equa- tions we have previously used for the conditional distributions of an RBM to  determine the conditional distributions in a DBM.
The units within a layer are conditionally independent from each other given the values of the neighboring layers, so the distributions over binary variables can be fully described by the Bernoulli parameters giving the probability of each unit being active.
In our example with two hidden layers, the activation probabilities are given by:  P v( i = 1 | h(1)) = σ  W  (1) i,: h  (1)  , (20.26)  664    CHAPTER 20.
DEEP GENERATIVE MODELS  P h( (1) i = 1 | v h, (2)) = σ   vW  (1) :,i +W  (2) i,: h  (2)   (20.27)  and P h(  (2) k = 1 | h  (1)) = σ  h (1)W  (2) :,k   .
RBMs allow all of the visible units to be updated in one block and all of the hidden units to be updated in a second block.
One might naively assume that a DBM with l layers requires l+ 1 updates, with each iteration updating a block consisting of one layer of units.
Gibbs sampling can be divided into two blocks of updates, one including all even layers (including the visible layer) and the other including all odd layers.
Due to the bipartite DBM connection pattern, given the even layers, the distribution over the odd layers is factorial and thus can be sampled simultaneously and independently as a block.
Likewise, given the odd layers, the even layers can be sampled simultaneously and independently as a  block.
Efficient sampling is especially important for training with the stochastic maximum likelihood algorithm.
Somewhat counterintuitively, the simplicity of this posterior distribution allows richer approximations of the posterior.
In the case of the DBN, we perform classification using a heuristically motivated approximate inference procedure, in which we guess that a reasonable value for the mean field expectation of the hidden units can be provided by an upward pass through the network in an MLP that uses sigmoid activation functions and the same weights as the original DBN.
In particular, the heuristic estimate of Q ignores interactions between hidden units within the same layer as well as the top-down feedback influence of hidden units in deeper layers on hidden units that are closer to the input.
Because the heuristic MLP-based inference procedure in the DBN  is not able to account for these interactions, the resulting Q is presumably far  665    CHAPTER 20.
In DBMs, all of the hidden units within a layer are conditionally independent given the other layers.
This lack of intralayer interaction makes it possible to use fixed point equations to actually optimize the variational lower bound and find the true optimal mean field expectations (to within some numerical tolerance).
The use of proper mean field allows the approximate inference procedure for DBMs to capture the influence of top-down feedback interactions.
This makes DBMs interesting from the point of view of neuroscience, because the human brain  is known to use many top-down feedback connections.
Because of this property, DBMs have been used as computational models of real neuroscientific phenomena ( , ;Series et al.
The other layers are used only at the end of the sampling process, in one efficient ancestral sampling pass.
To generate a sample from a DBM, it is necessary to use MCMC across all layers, with every layer of the model participating in every Markov chain transition.
20.4.2 DBM Mean Field Inference  The conditional distribution over one DBM layer given the neighboring layers is factorial.
In the example of the DBM with two hidden layers, these distributions are P (v h| (1)), P (h(1) | v h, (2)) and P (h(2) | h(1)).
The distribution over all hidden layers generally does not factorize because of interactions between layers.
In the example with two hidden layers, P (h(1),h(2) | v) does not factorize due due to the interaction weightsW (2) between h(1) and h(2) which render these variables mutually dependent.
As was the case with the DBN, we are left to seek out methods to approximate  the DBM posterior distribution.
However, unlike the DBN, the DBM posterior distribution over their hidden units—while complicated—is easy to approximate with a variational approximation (as discussed in section ), specifically a19.4 mean field approximation.
The mean field approximation is a simple form of variational inference, where we restrict the approximating distribution to fully factorial distributions.
In the context of DBMs, the mean field equations capture the bidirectional interactions between layers.
In this section we derive the iterative approximate inference procedure originally introduced in Salakhutdinov and Hinton ( ).2009a  In variational approximations to inference, we approach the task of approxi-  666    CHAPTER 20.
DEEP GENERATIVE MODELS  mating a particular target distribution—in our case, the posterior distribution over the hidden units given the visible units—by some reasonably simple family of dis- tributions.
In the case of the mean field approximation, the approximating family is the set of distributions where the hidden units are conditionally independent.
The mean field assumption implies that  Q(h(1) ,h(2) | v) =   j  Q h( (1) j | v)    k  Q h( (2) k | v).
(20.29)  The mean field approximation attempts to find a member of this family of distributions that best fits the true posterior P (h(1),h(2) | v).
Importantly, the inference process must be run again to find a different distribution Q every time we use a new value of .v  One can conceive of many ways of measuring how well Q(h v| ) fits P (h v| ).
The mean field approach is to minimize  KL( ) =Q P   h  Q(h(1),h(2) | v) log  Q(h(1),h(2) | v) P (h(1),h(2) | v)    .
(20.30)  In general, we do not have to provide a parametric form of the approximating distribution beyond enforcing the independence assumptions.
The variational approximation procedure is generally able to recover a functional form of the approximate distribution.
However, in the case of a mean field assumption on binary hidden units (the case we are developing here) there is no loss of generality resulting from fixing a parametrization of the model in advance.
We parametrize Q as a product of Bernoulli distributions, that is we associate the probability of each element of h(1) with a parameter.
Specifically, for each j,  ĥ (1) j =Q(h  (1) j = 1 | v ), where ĥ  (1) j ∈ [0, 1] and for each k , ĥ  (2) k = Q(h  (2) k = 1 | v),  where ĥ (2) k  ∈ [0 1], .
Thus we have the following approximation to the posterior:  Q(h(1),h(2) | v) =   j  Q h( (1) j | v)    k  Q h( (2) k | v) (20.31)  =   j  (ĥ (1) j )  h (1) j (1 − ĥ(1)j )  (1−h(1)j ) ×   k  (ĥ (2) k )  h (2) k (1 − ĥ(2)k )  (1−h(2) k ).
(20.32)  Of course, for DBMs with more layers the approximate posterior parametrization can be extended in the obvious way, exploiting the bipartite structure of the graph  667    CHAPTER 20.
DEEP GENERATIVE MODELS  to update all of the even layers simultaneously and then to update all of the odd layers simultaneously, following the same schedule as Gibbs sampling.
Now that we have specified our family of approximating distributions Q, it remains to specify a procedure for choosing the member of this family that best fits P. The most straightforward way to do this is to use the mean field equations specified by equation .
These equations were derived by solving for where the19.56 derivatives of the variational lower bound are zero.
They describe in an abstract manner how to optimize the variational lower bound for any model, simply by  taking expectations with respect to .Q  Applying these general equations, we obtain the update rules (again, ignoring bias terms):  ĥ (1) j = σ     i  viW (1) i,j +    k W (2) j,kĥ  (2) k   , j∀ (20.33)  ĥ (2) k = σ       j   W (2) j ,kĥ  (1) j     , k.∀ (20.34)  At a fixed point of this system of equations, we have a local maximum of the variational lower bound L(Q).
Thus these fixed point update equations define an iterative algorithm where we alternate updates of ĥ  (1) j (using equation ) and20.33  updates of ĥ (2) k (using equation ).
On small problems such as MNIST, as few20.34  as ten iterations can be sufficient to find an approximate positive phase gradient for learning, and fifty usually suffice to obtain a high quality representation of a single specific example to be used for high-accuracy classification.
20.4.3 DBM Parameter Learning  Learning in the DBM must confront both the challenge of an intractable partition function, using the techniques from chapter , and the challenge of an intractable18 posterior distribution, using the techniques from chapter .19  As described in section , variational inference allows the construction of20.4.2 a distribution Q(h v| ) that approximates the intractable P(h v| ).
Learning then proceeds by maximizing L(v θ, Q, ), the variational lower bound on the intractable log-likelihood, .log ( ; )P v θ  668    CHAPTER 20.
DEEP GENERATIVE MODELS  For a deep Boltzmann machine with two hidden layers, is given byL  L( ) =Q,θ   i    j viW  (1) i,j ĥ  (1) j  +    j    k ĥ (1) j  W  (2) j ,k ĥ  (2) k − Hlog ( ) +Z θ ( )Q .
Because a deep Boltzmann machine contains restricted Boltzmann machines as components, the hardness results for computing the partition function and sampling that apply to restricted Boltzmann machines also apply to deep Boltzmann machines.
This means that evaluating the probability mass function of a Boltzmann machine requires approximate methods such as annealed importance sampling.
Techniques such as pseudolikelihood require the18 ability to evaluate the unnormalized probabilities, rather than merely obtain a variational lower bound on them.
Contrastive divergence is slow for deep Boltzmann machines because they do not allow efficient sampling of the hidden units given the visible units—instead, contrastive divergence would require burning in a Markov chain every time a new negative phase sample is needed.
The non-variational version of stochastic maximum likelihood algorithm was discussed earlier, in section .
Recall that we describe a simplified20.1 varient of the DBM that lacks bias parameters; including them is trivial.
20.4.4 Layer-Wise Pretraining  Unfortunately, training a DBM using stochastic maximum likelihood (as described above) from a random initialization usually results in failure.
In other cases, the DBM may represent the distribution well, but with no higher likelihood than could  be obtained with just an RBM.
A DBM with very small weights in all but the first layer represents approximately the same distribution as an RBM.
However, the original and most popular method for20.4.5 overcoming the joint training problem of DBMs is greedy layer-wise pretraining.
DEEP GENERATIVE MODELS  Algorithm 20.1 The variational stochastic maximum likelihood algorithm for training a DBM with two hidden layers.
Set , the step size, to a small positive number Set k , the number of Gibbs steps, high enough to allow a Markov chain of p(v h, (1),h(2) ; θ+ ∆θ ) to burn in, starting from samples from p(v h,  (1),h(2) ;θ).
Initialize three matrices, Ṽ , H̃ (1) and H̃ (2) each withm rows set to random values (e.g., from Bernoulli distributions, possibly with marginals matched to the model’s marginals).
while not converged (learning loop) do Sample a minibatch of m examples from the training data and arrange them  as the rows of a design matrix .V Initialize matrices Ĥ (1) and Ĥ(2), possibly to the model’s marginals.
end while ∆  W (1) ← 1mV Ĥ (1) ∆  W (2) ← 1  mĤ (1)  Ĥ(2)  for dol k= 1 to (Gibbs sampling) Gibbs block 1:  ∀i, j, Ṽ i,j sampled from P (Ṽi,j = 1) = σ  W  (1) j,:   H̃ (1) i,:   .
Gibbs block 2:  ∀i, j, H̃ (1)i,j sampled from P (H̃ (1) i,j = 1) = σ   Ṽi,:W  (1) :,j + H̃  (2) i,: W  (2) j,:   .
end for ∆  W (1) ← ∆W (1) − 1mV H̃ (1) ∆  W (2) ← ∆  W (2) − 1 m H̃  (1)H̃ (2)  W (1) ←W (1) + ∆ W (1)  (this is a cartoon illustration, in practice use a more effective algorithm, such as momentum with a decaying learning rate) W (2) ←W (2) + ∆  W (2)  end while  670    CHAPTER 20.
Typically PCD training will make only a small change in the model’s parameters and its performance as measured by the log-likelihood it assigns to the data, or its ability to classify inputs.
It bears some passing resemblance to coordinate ascent because we optimize one subset of the parameters at each step.
The two methods differ because the greedy layer-wise  training procedure uses a different objective function at each step.
A layer in the middle of the stack of RBMs is trained with only bottom-up input, but after the stack is combined to form the DBM, the layer will have both bottom-up and top-down input.
To account for this effect, Salakhutdinov and Hinton 2009a( ) advocate dividing the weights of all but the top and bottom RBM in half before inserting them into the DBM.
Additionally, the bottom RBM must be trained using two “copies” of each visible unit and the weights tied to be equal between the two copies.
Obtaining the state of the art results with the deep Boltzmann machine requires a modification of the standard SML algorithm, which is to use a small amount of mean field during the negative phase of the joint PCD training step (Salakhutdinov and Hinton 2009a, ).
Specifically, the expectation of the energy gradient should be computed with respect to the mean field distribution in which all of the units are independent from each other.
The parameters of this mean field distribution should be obtained by running the mean field fixed point equations for just one step.
20.4.5 Jointly Training Deep Boltzmann Machines  Classic DBMs require greedy unsupervised pretraining, and to perform classification well, require a separate MLP-based classifier on top of the hidden features they extract.
It is hard to track performance during training because we cannot evaluate properties of the full DBM while training the first RBM.
DEEP GENERATIVE MODELS  d)  a) b)  c)  Figure 20.4: The deep Boltzmann machine training procedure used to classify the MNIST dataset (Salakhutdinov and Hinton 2009a Srivastava 2014, ; et al., ).
Train a second RBM that models(b) h(1) and target class y by using CD-k to approximately maximize logP (h(1) ,y) where h(1) is drawn from the first RBM’s posterior conditioned on the data.
Define a new set of features h(1) and h(2) that are obtained by running mean field inference in the model lacking y.
Use these features as input to an MLP whose structure is the same as an additional pass of mean field, with an additional output layer for the estimate of y. Initialize the MLP’s weights to be the same as the DBM’s weights.
Software implementations of DBMs need to have many different components for CD training of individual RBMs, PCD training of the full DBM, and training based on back-propagation through the MLP.
Finally, the MLP on top of the Boltzmann machine loses many of the advantages of the Boltzmann machine probabilistic model, such as being able to perform inference when some input values are missing.
The first is the centered deep Boltzmann machine  (Montavon and Muller 2012, ), which reparametrizes the model in order to make the Hessian of the cost function better-conditioned at the beginning of the learning process.
The second way to jointly train a deep Boltzmann machine is to use a multi-prediction deep Boltzmann machine (Goodfellow 2013bet al., ).
This model uses an alternative training criterion that allows the use of the back-propagation algorithm in order to avoid the problems with MCMC estimates of the gradient.
Unfortunately, the new criterion does not lead to good likelihood or samples, but, compared to the MCMC  approach, it does lead to superior classification performance and ability to reason well about missing inputs.
The centering trick for the Boltzmann machine is easiest to describe if we return to the general view of a Boltzmann machine as consisting of a set of units x with a weight matrix U and biases b.
(20.36)  Using different sparsity patterns in the weight matrix U, we can implement structures of Boltzmann machines, such as RBMs, or DBMs with different numbers of layers.
This is accomplished by partitioning x into visible and hidden units and zeroing out elements of U for units that do not interact.
The centered Boltzmann machine introduces a vector that is subtracted from all of the states:µ  E( ; ) = ( )x U b, − x µ− U x µ x µ( − ) (− − )b.
This reparametrization does not change the set of probability distributions that the model can represent, but it does change the dynamics of stochastic gradient descent applied to the likelihood.
2013 confirmed that the conditioning of the Hessian matrix improves, and observed that the centering trick is equivalent to another Boltzmann machine learning technique, the enhanced gradient ( , ).
2011 Hessian matrix allows learning to succeed, even in difficult cases like training a deep Boltzmann machine with multiple layers.
The other approach to jointly training deep Boltzmann machines is the multi- prediction deep Boltzmann machine (MP-DBM) which works by viewing the mean  field equations as defining a family of recurrent networks for approximately solving every possible inference problem ( , ).
2013b the model to maximize the likelihood, the model is trained to make each recurrent network obtain an accurate answer to the corresponding inference problem.
It consists of randomly sampling a20.5 training example, randomly sampling a subset of inputs to the inference network, and then training the inference network to predict the values of the remaining units.
This general principle of back-propagating through the computational graph for approximate inference has been applied to other models (Stoyanov 2011et al., ; Brakel 2013et al., ).
Instead, the final loss is typically based on the approximate conditional distribution that the approximate inference network imposes over the missing values.
If we inspect the p(v) represented by the Boltzmann machine learned by the MP-DBM, it tends to be somewhat defective, in the sense that Gibbs sampling yields poor samples.
This means that approximate inference, for example, to fill in missing inputs, or to perform classification despite the presence of missing inputs, is more accurate in the MP- DBM than in the original DBM.
The original DBM does not make an accurate  classifier on its own; the best classification results with the original DBM were based on training a separate classifier to use features extracted by the DBM, rather than by using inference in the DBM to compute the distribution over the class labels.
The other advantage of back-propagating through approximate inference is that back-propagation computes the exact gradient of the loss.
This is better for optimization than the approximate gradients of SML training, which suffer from both bias and variance.
DEEP GENERATIVE MODELS  Figure 20.5: An illustration of the multi-prediction training process for a deep Boltzmann machine.
For each example, we sample a subset of the data variables to serve as inputs to the inference process.
We then run the mean field inference process, with arrows indicating which variables influence which other variables in the process.
The data variables that were not used as inputs to the inference process become targets, shaded in gray.
We use gradient descent and back-propagation to train these recurrent networks to produce the correct targets given their inputs.
DEEP GENERATIVE MODELS  DBMs may be trained jointly while DBMs require a greedy layer-wise pretraining.
The disadvantage of back-propagating through the approximate inference graph is that it does not provide a way to optimize the log-likelihood, but rather a heuristic approximation of the generalized pseudolikelihood.
The MP-DBM inspired the NADE-k (Raiko 2014et al., ) extension to the NADE framework, which is described in section .20.10.10  The MP-DBM has some connections to dropout.
Dropout shares the same pa- rameters among many different computational graphs, with the difference between  each graph being whether it includes or excludes each unit.
In the case of the MP-DBM, the difference between the graphs is whether each input unit is observed or not.
One could imagine applying dropout to the MP-DBM by additionally removing some units rather than making them latent.
20.5 Boltzmann Machines for Real-Valued Data  While Boltzmann machines were originally developed for use with binary data, many applications such as image and audio modeling seem to require the ability to represent probability distributions over real values.
In some cases, it is possible to treat real-valued data in the interval [0, 1] as representing the expectation of a binary variable.
For example, ( ) treats grayscale images in the trainingHinton 2000 set as defining [0,1] probability values.
Each pixel defines the probability of a binary value being 1, and the binary pixels are all sampled independently from each other.
However, it is not a particularly theoretically satisfying approach, and binary images sampled independently in this way have a noisy appearance.
In this section, we present Boltzmann machines that define a probability density over real-valued data.
20.5.1 Gaussian-Bernoulli RBMs  Restricted Boltzmann machines may be developed for many exponential family conditional distributions (Welling 2005et al., ).
Of these, the most common is the RBM with binary hidden units and real-valued visible units, with the conditional distribution over the visible units being a Gaussian distribution whose mean is a function of the hidden units.
One choice is whether to use a covariance matrix or a precision matrix for the Gaussian distribution.
(20.38) We can find the terms we need to add to the energy function by expanding the unnormalized log conditional distribution:  log ( ;N v Wh β, −1) = −1 2  ( )v Wh− β v Wh β( − ) + (f ).
(20.39)  Here f encapsulates all the terms that are a function only of the parameters  and not the random variables in the model.
We can discard f because its only role is to normalize the distribution, and the partition function of whatever energy function we choose will carry out that role.
If we include all of the terms (with their sign flipped) involving v from equa- tion in our energy function and do not add any other terms involving20.39 v, then our energy function will represent the desired conditional .p( )v h|  We have some freedom regarding the other conditional distribution, p(h v| ).
If we included these terms, we would have a linear factor model instead of a restricted Boltzmann machine.
Omitting them does not change the conditional p(v h| ) so equation is still respected.20.39 However, we still have a choice about whether to include the terms involving only a single hi.
If we assume a diagonal precision matrix, we find that for each hidden unit hi we have a term  1  2 h i    j  βjW 2 j,i.
If we include this term (with its sign flipped) in the energy function, then it will naturally bias h i to be turned off when the weights for that unit are large and connected to visible units with high precision.
The choice of whether or not to include this bias term does not affect the family of distributions the model can represent (assuming that  677    CHAPTER 20.
DEEP GENERATIVE MODELS  we include bias parameters for the hidden units) but it does affect the learning dynamics of the model.
Including the term may help the hidden unit activations remain reasonable even when the weights rapidly increase in magnitude.
One way to define the energy function on a Gaussian-Bernoulli RBM is thus  E ,(v h) = 1  2 v( ) ( )β v − v β Wh b− h (20.42)  but we may also add extra terms or parametrize the energy in terms of the variance rather than precision if we choose.
In this derivation, we have not included a bias term on the visible units, but one could easily be added.
One final source of variability in the parametrization of a Gaussian-Bernoulli RBM is the choice of how to treat the precision matrix.
It may either be fixed to a constant (perhaps estimated based on the marginal precision of the data) or learned.
Typically we do not allow the precision matrix to be non-diagonal in this context, because some operations on the Gaussian distribution require inverting the matrix, and a diagonal matrix can be inverted trivially.
In  the sections ahead, we will see that other forms of Boltzmann machines permit modeling the covariance structure, using various techniques to avoid inverting the precision matrix.
20.5.2 Undirected Models of Conditional Covariance  While the Gaussian RBM has been the canonical energy model for real-valued data, ( ) argue that the Gaussian RBM inductive bias is notRanzato et al.
2010a well suited to the statistical variations present in some types of real-valued data,  especially natural images.
The problem is that much of the information content present in natural images is embedded in the covariance between pixels rather than in the raw pixel values.
In other words, it is the relationships between pixels and not their absolute values where most of the useful information in images resides.
Since the Gaussian RBM only models the conditional mean of the input given the hidden units, it cannot capture conditional covariance information.
In response to these criticisms, alternative models have been proposed that attempt to better account for the covariance of real-valued data.
These models include the mean and covariance RBM (mcRBM1), the mean-product of t-distribution (mPoT) model and the spike and slab RBM (ssRBM).
1 The term “mcRBM” is pronounced by saying the name of the letters M-C-R-B-M; the “mc”  is not pronounced like the “Mc” in “McDonald’s.”  678    CHAPTER 20.
DEEP GENERATIVE MODELS  Mean and Covariance RBM The mcRBM uses its hidden units to indepen- dently encode the conditional mean and covariance of all observed units.
Specifically, with binary mean units h( )m and binary covariance units h( )c , the mcRBM model is defined as the combination of two energy functions:  Emc(x h, ( )m ,h( )c ) = Em(x h,  ( )m ) + Ec(x h, ( )c ), (20.43)  where Em is the standard Gaussian-Bernoulli RBM energy function: 2  Em(x h, ( )m ) =  1  2 xx−    j  xW:,jh ( )m j −    j  b ( )m j h  ( )m j , (20.44)  and Ec is the cRBM energy function that models the conditional covariance information:  Ec(x h, ( )c ) =  1  2    j  h ( )c j   xr( )j  2 −    j  b ( )c j h  ( )c j .
(20.45)  The parameter r( )j corresponds to the covariance weight vector associated with  h ( )c j and b  ( )c is a vector of covariance offsets.
The combined energy function defines a joint distribution:  pmc(x h, ( )m ,h( )c ) =  1  Z exp   −Emc(x h, ( )m ,h( )c )   , (20.46)  and a corresponding conditional distribution over the observations given h( )m and h( )c as a multivariate Gaussian distribution:  pmc(x h| ( )m , h( )c ) = N    x C; mc x h|       j  W:,jh ( )m j     ,Cmc x h|     .
(20.47)  Note that the covariance matrix Cmc x h| =   j h  ( )c j r  ( )j r( )j  + I −1  is non-diagonal  and thatW is the weight matrix associated with the Gaussian RBM modeling the  2 This version of the Gaussian-Bernoulli RBM energy function assumes the image data has  zero mean, per pixel.
It is difficult to train the mcRBM via contrastive divergence or persistent contrastive divergence because of its non-diagonal conditional covariance structure.
CD and PCD require sampling from the joint distribution of x h, ( )m ,h( )c  which, in a standard RBM, is accomplished by Gibbs sampling over the conditionals.
However, in the mcRBM, sampling from pmc(x h| ( )m ,h( )c ) requires computing (Cmc)−1 at every iteration of learning.
( ) avoid direct samplingRanzato and Hinton 2010 from the conditional pmc (x h| ( )m ,h( )c ) by sampling directly from the marginal p(x) using Hamiltonian (hybrid) Monte Carlo ( , ) on the mcRBM freeNeal 1993 energy.
Mean-Product of Student’s -distributionst The mean-product of Student’s t-distribution (mPoT) model ( , ) extends the PoTmodel (Ranzato et al.
This2003a is achieved by including nonzero Gaussian means by the addition of Gaussian RBM-like hidden units.
Like the mcRBM, the PoT conditional distribution over the observation is a multivariate Gaussian (with non-diagonal covariance) distribution; however, unlike the mcRBM, the complementary conditional distribution over the hidden variables is given by conditionally independent Gamma distributions.
The Gamma distribution G(k, θ) is a probability distribution over positive real numbers, with mean kθ.
It is not necessary to have a more detailed understanding of the  Gamma distribution to understand the basic ideas underlying the mPoT model.
The mPoT energy function is:  EmPoT(x h, ( )m ,h( )c ) (20.48)  = Em(x h, ( )m ) +    j   h ( )c j   1 +  1  2   r ( )j x  2 + (1 − γj) logh( )cj    (20.49)  where r( )j is the covariance weight vector associated with unit h ( )c j and Em(x h,  ( )m ) is as defined in equation .20.44  Just as with the mcRBM, the mPoT model energy function specifies a mul- tivariate Gaussian, with a conditional distribution over x that has non-diagonal covariance.
Learning in the mPoT model—again, like the mcRBM—is compli- cated by the inability to sample from the non-diagonal Gaussian conditional  pmPoT(x h| ( )m ,h( )c ), so ( ) also advocate direct sampling ofRanzato et al.
DEEP GENERATIVE MODELS  Spike and Slab Restricted Boltzmann Machines Spike and slab restricted Boltzmann machines ( , ) or ssRBMs provide another meansCourville et al.
Compared to mcRBMs, ssRBMs have the advantage of requiring neither matrix inversion nor Hamiltonian Monte Carlo methods.
Like the mcRBM and the mPoT model, the ssRBM’s binary hidden units encode the conditional covariance across pixels through the use of auxiliary real-valued variables.
The spike and slab RBM has two sets of hidden units: binary spike units h,  and real-valued slab units s .
When a spike variable is active, the corresponding slab variable adds variance to the input along the axis defined byW:,i .
Fortunately, contrastive divergence and persistent contrastive divergence with Gibbs sampling are still applicable.
Formally, the ssRBM model is defined via its energy function:  Ess( ) =x s h, , −   i  xW:,isihi + 1  2 x   Λ +    i  Φihi   x (20.50)  + 1  2    i  αis 2 i −    i  αiµisih i −   i  bih i +   i  αiµ 2 ihi, (20.51)  where bi is the offset of the spike hi and Λ is a diagonal precision matrix on the observations x.
The parameter Φi is a non-negative diagonal matrix that defines an h-modulated quadratic penalty on x.
With the joint distribution defined via the energy function, it is relatively straightforward to derive the ssRBM conditional distributions.
For example, by marginalizing out the slab variables s, the conditional distribution over the observations given the binary spike variables is given by:h  pss( ) =x h| 1  P ( )h  1  Z   exp ( ){−E x s h, , } ds (20.52)  = N   x C; ss x h|    i  W:,iµih i , C ss x h|   (20.53)  681    CHAPTER 20.
This is different from sparse coding, where samples from the model “almost never” (in the measure theoretic sense) contain zeros in the code, and MAP inference is required to impose sparsity.
Comparing the ssRBM to the mcRBM and the mPoT models, the ssRBM parametrizes the conditional covariance of the observation in a significantly different  way.
The mcRBM and mPoT both model the covariance structure of the observation  as   j h ( )c j r  ( )j r( )j  + I −1  , using the activation of the hidden units hj > 0 to  enforce constraints on the conditional covariance in the direction r ( )j .
In contrast, the ssRBM specifies the conditional covariance of the observations using the hidden spike activations hi = 1 to pinch the precision matrix along the direction specified by the corresponding weight vector.
The ssRBM conditional covariance is very similar to that given by a different model: the product of probabilistic principal components analysis (PoPPCA) (Williams and Agakov 2002, ).
In the overcomplete  setting, sparse activations with the ssRBM parametrization permit significant variance (above the nominal variance given by Λ−1) only in the selected directions of the sparsely activated hi.
In the mcRBM or mPoT models, an overcomplete representation would mean that to capture variation in a particular direction in the observation space requires removing potentially all constraints with positive projection in that direction.
The primary disadvantage of the spike and slab restricted Boltzmann machine is that some settings of the parameters can correspond to a covariance matrix that is not positive definite.
Such a covariance matrix places more unnormalized probability on values that are farther from the mean, causing the integral over all possible outcomes to diverge.
Using constrained optimization to explicitly avoid the regions where the probability is undefined is difficult to do without being overly conservative and also preventing the model from accessing high-performing regions of parameter space.
Including higher-order interactions and average-pooling of the slab variables ( , ) enables the modelCourville et al.
DEEP GENERATIVE MODELS  term to the energy function that prevents the partition function from becoming undefined results in a sparse coding model, spike and slab sparse coding (Goodfellow et al., ), also known as S3C.2013d  20.6 Convolutional Boltzmann Machines  As seen in chapter , extremely high dimensional inputs such as images place9  great strain on the computation, memory and statistical requirements of machine learning models.
Replacing matrix multiplication by discrete convolution with a small kernel is the standard way of solving these problems for inputs that have translation invariant spatial or temporal structure.
Deep convolutional networks usually require a pooling operation so that the spatial size of each successive layer decreases.
Feedforward convolutional networks often use a pooling function such as the maximum of the elements to be pooled.
We could introduce a binary pooling unit p over n binary detector units d and enforce p = maxi di by setting the energy function to be ∞ whenever that constraint is violated.
This does not scale well though, as it requires evaluating 2n different energy configurations to compute the normalization constant.
For a small 3 × 3 pooling region this requires 29 = 512 energy function evaluations per pooling unit!
( ) developed a solution to this problem called probabilistic max pooling (not to be confused with “stochastic pooling,” which is a technique for implicitly constructing ensembles of convolutional feedforward networks).
The strategy behind probabilistic max pooling is to constrain the detector units so at most one may be active at a time.
This means there are only n+ 1 total states (one state for each of the n detector units being on, and an additional state corresponding to all of the detector units being off).
We can think of this as describing a model with a single variable that  has n+ 1 states, or equivalently as a model that has n + 1 variables that assigns energy to all but joint assignments of variables.∞ n+ 1  While efficient, probabilistic max pooling does force the detector units to be mutually exclusive, which may be a useful regularizing constraint in some contexts or a harmful limit on model capacity in other contexts.
Overlapping pooling regions are usually required to obtain the best performance from feedforward convolutional networks, so this constraint probably greatly reduces the performance of convolutional Boltzmann  683    CHAPTER 20.
( ) demonstrated that probabilistic max pooling could be used to build convolutional deep Boltzmann machines.3 This model is able to perform operations such as filling in missing portions of its input.
While intellectually appealing, this model is challenging to make work in practice, and usually does not perform as well as a classifier as traditional convolutional networks trained with supervised learning.
Moreover, many convolutional networks achieve size invariance by scaling up the size of their pooling regions proportional to the size of the input, but scaling Boltzmann machine pooling regions is awkward.
Traditional convolutional neural networks can use a fixed number of pooling units and dynamically increase the size of their pooling regions in order to obtain a fixed-size representation of a variable-sized input.
2009 each of the detector units in the same pooling region mutually exclusive solves the computational problems, but still does not allow variable-size pooling regions.
For example, suppose we learn a model with 2 × 2 probabilistic max pooling over detector units that learn edge detectors.
If we then increase the size of the input image by 50% in each direction, we would expect the number of edges to increase correspondingly.
Instead, if we increase the size of the pooling regions by 50% in each direction to 3× 3, then the mutual exclusivity constraint now specifies that each of these edges may only appear once in a 3 × 3 region.
Of course, these issues only arise when the model must use variable amounts of pooling in order to emit a fixed-size output vector.
Models that use probabilistic max pooling may still accept variable-sized input images so long as the output of the model is a feature map that can scale in size proportional to the input image.
Pixels at the boundary of the image also pose some difficulty, which is exac- erbated by the fact that connections in a Boltzmann machine are symmetric.
If we do not implicitly zero-pad the input, then there are fewer hidden units than visible units, and the visible units at the boundary of the image are not modeled  3 The publication describes the model as a “deep belief network” but because it can be described  as a purely undirected model with tractable layer-wise mean field fixed point updates, it best fits  the definition of a deep Boltzmann machine.
However, if we do implicitly zero-pad the input, then the hidden units at the boundary are driven by fewer input pixels, and may fail to activate when needed.
20.7 Boltzmann Machines for Structured or Sequential  Outputs  In the structured output scenario, we wish to train a model that can map from some input x to some output y , and the different entries of y are related to each other and must obey some constraints.
For example, in the speech synthesis task,  y is a waveform, and the entire waveform must sound like a coherent utterance.
A natural way to represent the relationships between the entries in y is to use a probability distribution p(y | x).
Boltzmann machines, extended to model conditional distributions, can supply this probabilistic model.
The same tool of conditional modeling with a Boltzmann machine can be used not just for structured output tasks, but also for sequence modeling.
In the latter case, rather than mapping an input x to an output y, the model must estimate a probability distribution over a sequence of variables, p(x(1) , .
An important sequence modeling task for the video game and film industry is modeling sequences of joint angles of skeletons used to render 3-D characters.
A probabilistic model of a character’s movement allows the generation of new, previously unseen, but realistic animations.
,x( )t m− ) for small m. The model is an RBM over p(x( )t ) whose bias parameters are a linear function of the preceding m values of x.
The weights in the RBM over x never change, but by conditioning on different past values, we can change the probability of different hidden units in the RBM being active.
By activating and deactivating different subsets of hidden units,  we can make large changes to the probability distribution induced on x .
2011 modeling using conditional RBMs are possible (Taylor and Hinton 2009 Sutskever, ; et al., ;2009 Boulanger-Lewandowski 2012et al., ).
The RNN-RBM is a generative model of a sequence of frames x( )t consisting of an RNN that emits the RBM parameters for each time step.
Unlike previous approaches in which only the bias parameters of the RBM varied from one time step to the next, the RNN-RBM uses the RNN to emit all of the parameters of the RBM, including the weights.
To train the model, we need to be able to back-propagate the gradient of the loss function through the RNN.
This means that we must approximately differentiate the loss with respect to the RBM parameters using contrastive divergence or a related algorithm.
This approximate gradient may then be back-propagated through the RNN using the usual back-propagation through time algorithm.
We have  focused on Boltzmann machines trained to approximately maximize the generative criterion log p(v).
This approach oftenLarochelle and Bengio 2008 performs the best when using a linear combination of both the generative and the discriminative criteria.
Unfortunately, RBMs do not seem to be as powerful supervised learners as MLPs, at least using existing methodology.
Most Boltzmann machines used in practice have only second-order interactions in their energy functions, meaning that their energy functions are the sum of many terms and each individual term only includes the product between two random variables.
It is also possible to train higher-order Boltzmann machines ( , ) whose energy function termsSejnowski 1987 involve the products between many variables.
Three-way interactions between a  hidden unit and two different images can model spatial transformations from one frame of video to the next (Memisevic and Hinton 2007 2010, , ).
Multiplication by a one-hot class variable can change the relationship between visible and hidden units depending on which class is present ( , ).
One recent exampleNair and Hinton 2009 of the use of higher-order interactions is a Boltzmann machine with two groups of hidden units, with one group of hidden units that interact with both the visible units v and the class label y, and another group of hidden units that interact only with the v input values ( , ).
DEEP GENERATIVE MODELS  some hidden units to learn to model the input using features that are relevant to the class but also to learn extra hidden units that explain nuisance details that are necessary for the samples of v to be realistic but do not determine the class of the example.
( ) introduced a Boltzmann machine with third-order interactions with binary mask variables associated with each visible unit.
When these masking variables are set to zero, they remove the influence of a visible unit on the hidden units.
This allows visible units that are not relevant to the classification problem  to be removed from the inference pathway that estimates the class.
More generally, the Boltzmann machine framework is a rich space of models permitting many more model structures than have been explored so far.
Developing a new form of Boltzmann machine requires some more care and creativity than developing a new neural network layer, because it is often difficult to find an energy function that maintains tractability of all of the different conditional distributions needed to use the Boltzmann machine, but despite this required effort the field remains open to innovation.
20.9 Back-Propagation through Random Operations  Traditional neural networks implement a deterministic transformation of some input variables x.
When developing generative models, we often wish to extend neural networks to implement stochastic transformations of x.
One straightforward way to do this is to augment the neural network with extra inputs z that are sampled from some simple probability distribution, such as a uniform or Gaussian distribution.
The neural network can then continue to perform deterministic computation internally, but the function f (x z, ) will appear stochastic to an observer who does not have access to z.
Provided that f is continuous and differentiable, we can then compute the gradients necessary for training using back-propagation as usual.
As an example, let us consider the operation consisting of drawing samples y  from a Gaussian distribution with mean and varianceµ σ2:  y ∼ N (µ, σ2 ).
(20.54)  Because an individual sample of y is not produced by a function, but rather by a sampling process whose output changes every time we query it, it may seem counterintuitive to take the derivatives of y with respect to the parameters of its distribution, µ and σ2.
DEEP GENERATIVE MODELS  transforming an underlying random value z ∼ N (z; 0, 1) to obtain a sample from the desired distribution:  y µ σz= + (20.55)  We are now able to back-propagate through the sampling operation, by regard- ing it as a deterministic operation with an extra input z. Crucially, the extra input is a random variable whose distribution is not a function of any of the variables whose derivatives we want to calculate.
The result tells us how an infinitesimal change in µ or σ would change the output if we could repeat the sampling operation again with the same value of z.
Being able to back-propagate through this sampling operation allows us to incorporate it into a larger graph.
We can also build elements of the graph whose outputs  are the inputs or the parameters of the sampling operation.
We can express any probability distribution of the form p(y; θ) or p (y | x; θ) as p(y | ω), where ω is a variable containing both parameters θ , and if applicable, the inputs x.
Given a value y sampled from distribution p(y | ω), where ω may in turn be a function of other variables, we can rewrite  y y ∼ p( | ω) (20.56)  as y z ω= (f ; ), (20.57)  where z is a source of randomness.
We may then compute the derivatives of y with respect to ω using traditional tools such as the back-propagation algorithm applied to f , so long as f is continuous and differentiable almost everywhere.
This technique is often called the reparametrization trick, stochastic back-propagation or perturbation analysis.
If we wish to back-propagate through a sampling process that produces discrete-valued samples, it may still be possible to estimate a gradient on ω, using reinforcement learning algorithms such as variants of the REINFORCE algorithm ( , ), discussed in section .Williams 1992 20.9.1  688    CHAPTER 20.
DEEP GENERATIVE MODELS  In neural network applications, we typically choose z to be drawn from some simple distribution, such as a unit uniform or unit Gaussian distribution, and achieve more complex distributions by allowing the deterministic portion of the network to reshape its input.
The idea of propagating gradients or optimizing through stochastic operations dates back to the mid-twentieth century ( , ; , ) and wasPrice 1958 Bonnet 1964 first used for machine learning in the context of reinforcement learning ( ,Williams 1992).
More recently, it has been applied to variational approximations (Opper  and Archambeau 2009, ) and stochastic or generative neural networks (Bengio et al., ; , ;2013b Kingma 2013 Kingma and Welling 2014b a Rezende 2014, , ; et al., ; Goodfellow 2014cet al., ).
Many networks, such as denoising autoencoders or networks regularized with dropout, are also naturally designed to take noise as an input without requiring any special reparametrization to make the noise independent from the model.
20.9.1 Back-Propagating through Discrete Stochastic Operations  When a model emits a discrete variable y, the reparametrization trick is not applicable.
Suppose that the model takes inputs x and parameters θ, both encapsulated in the vector ω , and combines them with random noise z to produce y:  y z ω= (f ; ).
The large problem is that the derivatives are zero almost everywhere, on the regions between step boundaries.
The derivatives of any cost function J(y) therefore do not give any information for how to update the model parameters .θ  The REINFORCE algorithm (REward Increment = Non-negative Factor × Offset Reinforcement × Characteristic Eligibility) provides a framework defining a family of simple but powerful solutions ( , ).
The core idea is thatWilliams 1992 even though J (f (z ;ω)) is a step function with useless derivatives, the expected cost Ez z∼p( )J f( ( ; ))z ω is often a smooth function amenable to gradient descent.
Although that expectation is typically not tractable when y is high-dimensional (or is the result of the composition of many discrete stochastic decisions), it can be estimated without bias using a Monte Carlo average.
The stochastic estimate of the gradient can be used with SGD or other stochastic gradient-based optimization techniques.
DEEP GENERATIVE MODELS  The simplest version of REINFORCE can be derived by simply differentiating the expected cost:  Ez[ ( )] =J y   y  J p( )y ( )y (20.59)  ∂ JE[ ( )]y  ∂ω =    y  J( )y ∂p( )y  ∂ω (20.60)  =   y  J p( )y ( )y ∂ plog ( )y  ∂ω (20.61)  ≈ 1 m  m  y( )i ∼p , i( )y =1  J(y( )i ) ∂ plog (y( )i )  ∂ω .
One issue with the above simple REINFORCE estimator is that it has a very high variance, so that many samples of y need to be drawn to obtain a good estimator of the gradient, or equivalently, if only one sample is drawn, SGD will converge very slowly and will require a smaller learning rate.
It is possible to considerably reduce the variance of that estimator by using variance reduction methods ( , ; , ).
The idea is to modify the estimator soWilson 1984 L’Ecuyer 1994 that its expected value remains unchanged but its variance get reduced.
In the context of REINFORCE, the proposed variance reduction methods involve the  computation of a baseline that is used to offset J (y).
Note that any offset b(ω) that does not depend on y would not change the expectation of the estimated gradient because  Ep( )y   ∂ plog ( )y  ∂ω   =    y  p( )y ∂ plog ( )y  ∂ω (20.63)  =   y  ∂p( )y  ∂ω (20.64)  = ∂  ∂ω    y  p( ) =y ∂  ∂ω 1 = 0, (20.65)  690    CHAPTER 20.
DEEP GENERATIVE MODELS  which means that  Ep( )y   ( ( ) ( ))J y − b ω ∂ plog ( )y  ∂ω   = Ep( )y   J( )y  ∂ plog ( )y  ∂ω   − b E( )ω p( )y   ∂ plog ( )y  ∂ω    (20.66)  = Ep( )y   J( )y  ∂ plog ( )y  ∂ω   .
(20.67)  Furthermore, we can obtain the optimal b(ω) by computing the variance of (J(y) − b(ω))  ∂ plog ( )y ∂ω under p(y) and minimizing with respect to b(ω).
What we find is  that this optimal baseline b∗( )ω i is different for each element ωi of the vector :ω  b∗( )ω i = Ep( )y   J( )y ∂ plog ( )y∂ωi  2  Ep( )y   ∂ plog ( )y ∂ωi  2  .
(20.68)  The gradient estimator with respect to ωi then becomes  ( ( ) ( )J y − b ω i) ∂ plog ( )y  ∂ωi (20.69)  where b(ω )i estimates the above b∗(ω )i.
The estimate b is usually obtained by adding extra outputs to the neural network and training the new outputs to estimate  Ep( )y [J(y) ∂ plog ( )y ∂ω i  2 ] and Ep( )y   ∂ plog ( )y ∂ωi  2  for each element of ω.
These extra  outputs can be trained with the mean squared error objective, using respectively  J(y)∂ plog ( )y∂ωi 2 and ∂ plog ( )y∂ωi  2 as targets when y is sampled from p(y), for a given  ω.
( ) preferred to use a single shared output20.68 Mnih and Gregor 2014 (across all elements i of ω) trained with the target J(y), using as baseline b(ω) ≈ Ep( )y [ ( )]J y .
Variance reduction methods have been introduced in the reinforcement learning context ( , ;Sutton et al.
2000 Weaver and Tao 2001, ), generalizing previous work on the case of binary reward by Dayan 1990 Bengio 2013b Mnih( ).
( ) for examples of modern uses of the REINFORCE algorithm with reduced variance in the context of deep learning.
In addition to the use of an input-dependent baseline b(ω) (, ( ) found that the scale ofMnih and Gregor 2014 J(y) − b(ω)) could be adjusted during training by dividing it by its standard deviation estimated by a moving average during training, as a kind of adaptive learning rate, to counter the effect of important variations that occur during the course of training in the  691    CHAPTER 20.
REINFORCE-based estimators can be understood as estimating the gradient by correlating choices of y with corresponding values of J (y).
If a good value of y is unlikely under the current parametrization, it might take a long time to obtain it by chance, and get the required signal that this configuration should be reinforced.
20.10 Directed Generative Nets  As discussed in chapter , directed graphical models make up a prominent class16 of graphical models.
While directed graphical models have been very popular within the greater machine learning community, within the smaller deep learning community they have until roughly 2013 been overshadowed by undirected models such as the RBM.
In this section we review some of the standard directed graphical models that have traditionally been associated with the deep learning community.
We have also already described sparse coding models, which can be thought  of as shallow directed generative models.
They are often used as feature learners in the context of deep learning, though they tend to perform poorly at sample generation and density estimation.
20.10.1 Sigmoid Belief Nets  Sigmoid belief networks ( , ) are a simple form of directed graphical modelNeal 1990 with a specific kind of conditional probability distribution.
In general, we can  think of a sigmoid belief network as having a vector of binary states s, with each element of the state influenced by its ancestors:  p s( i) = σ       j<i  Wj,isj+ bi     .
(20.70)  The most common structure of sigmoid belief network is one that is divided into many layers, with ancestral sampling proceeding through a series of many hidden layers and then ultimately generating the visible layer.
This structure is very similar to the deep belief network, except that the units at the beginning of  692    CHAPTER 20.
DEEP GENERATIVE MODELS  the sampling process are independent from each other, rather than sampled from a restricted Boltzmann machine.
One reason is that the structure is a universal approximator of probability distributions over the visible units, in the sense that it can approximate any probability distribution over binary variables arbitrarily well, given enough depth, even if the width of the individual layers is restricted to the dimensionality of the visible layer (Sutskever and Hinton 2008, ).
While generating a sample of the visible units is very efficient in a sigmoid  belief network, most other operations are not.
Mean field inference is also intractable because the variational lower bound involves taking expectations of cliques that encompass entire layers.
One approach for performing inference in a sigmoid belief network is to construct a different lower bound that is specialized for sigmoid belief networks ( ,Saul et al.
The19.5 Helmholtz machine (Dayan 1995 Dayan and Hinton 1996et al., ; , ) is a sigmoid belief network combined with an inference network that predicts the parameters of the  mean field distribution over the hidden units.
One cannot simply back-propagate through the output of the inference network, but instead must use the relatively unreliable machinery for back- propagating through discrete sampling processes, described in section .
Recent20.9.1 approaches based on importance sampling, reweighted wake-sleep (Bornschein and Bengio 2015 Bornschein 2015, ) and bidirectional Helmholtz machines ( et al., ) make it possible to quickly train sigmoid belief networks and reach state-of-the-art performance on benchmark tasks.
Learning in this case is efficient, because there is no need to marginalize latent variables out of the likelihood.
A family of models called auto-regressive networks generalize this fully visible belief network to other kinds of variables besides binary variables and other structures of conditional distributions besides log- linear relationships.
DEEP GENERATIVE MODELS  20.10.2 Differentiable Generator Nets  Many generative models are based on the idea of using a differentiable generator  network.
The model transforms samples of latent variables z to samples x or to distributions over samples x using a differentiable function g(z; θ( )g ) which is typically represented by a neural network.
This model class includes variational autoencoders, which pair the generator net with an inference net, generative adversarial networks, which pair the generator network with a discriminator network, and techniques that train generator networks in isolation.
Generator networks are essentially just parametrized computational procedures for generating samples, where the architecture provides the family of possible distributions to sample from and the parameters select a distribution from within that family.
As an example, the standard procedure for drawing samples from a normal  distribution with mean µ and covariance Σ is to feed samples z from a normal distribution with zero mean and identity covariance into a very simple generator network.
This generator network contains just one affine layer:  x z Lz= (g ) = +µ (20.71)  where is given by the Cholesky decomposition of .L Σ  Pseudorandom number generators can also use nonlinear transformations of simple distributions.
For example, inverse transform sampling (Devroye 2013, ) draws a scalar z from U (0, 1) and applies a nonlinear transformation to a scalar x.
In this case g(z) is given by the inverse of the cumulative distribution function F (x) =   x −∞ p(v)dv .
If we are able to specify p(x), integrate over x, and invert the  resulting function, we can sample from without using machine learning.p x( )  To generate samples from more complicated distributions that are difficult to specify directly, difficult to integrate over, or whose resulting integrals are difficult to invert, we use a feedforward network to represent a parametric family of nonlinear functions g, and use training data to infer the parameters selecting the desired function.
We can think of g as providing a nonlinear change of variables that transforms the distribution over into the desired distribution over .z x  Recall from equation that, for invertible, differentiable, continuous ,3.47 g  pz( ) = z px( ( ))g z  det( ∂g  ∂z )   .
DEEP GENERATIVE MODELS  This implicitly imposes a probability distribution over :x  px( ) =x pz(g−1( ))xdet( ∂g∂z )   .
(20.73)  Of course, this formula may be difficult to evaluate, depending on the choice of g , so we often use indirect means of learning g, rather than trying to maximize log ( )p x directly.
In some cases, rather than using g to provide a sample of x directly, we use g to define a conditional distribution over x.
For example, we could use a generator net whose final layer consists of sigmoid outputs to provide the mean parameters of Bernoulli distributions:  p(xi = 1 ) = ( )| z g z i .
(20.74)  In this case, when we use g to define p(x z| ), we impose a distribution over x by marginalizing :z  p( ) = x Ezp .
( )x z| (20.75)  Both approaches define a distribution pg(x) and allow us to train various criteria of pg using the reparametrization trick of section .20.9  The two different approaches to formulating generator nets—emitting the parameters of a conditional distribution versus directly emitting samples—have complementary strengths and weaknesses.
When the generator net defines a conditional distribution over x, it is capable of generating discrete data as well as  continuous data.
When the generator net provides samples directly, it is capable of generating only continuous data (we could introduce discretization in the forward propagation, but doing so would mean the model could no longer be trained using back-propagation).
The advantage to direct sampling is that we are no longer forced to use conditional distributions whose form can be easily written down and algebraically manipulated by a human designer.
Approaches based on differentiable generator networks are motivated by the success of gradient descent applied to differentiable feedforward networks for classification.
In the context of supervised learning, deep feedforward networks trained with gradient-based learning seem practically guaranteed to succeed given enough hidden units and enough training data.
Generative modeling seems to be more difficult than classification or regression because the learning process requires optimizing intractable criteria.
DEEP GENERATIVE MODELS  of differentiable generator nets, the criteria are intractable because the data does not specify both the inputs z and the outputs x of the generator net.
In the case of supervised learning, both the inputs x and the outputs y were given, and the optimization procedure needs only to learn how to produce the specified mapping.
In the case of generative modeling, the learning procedure needs to determine how to arrange space in a useful way and additionally how to map from to .z z x  Dosovitskiy 2015et al.
The latent variables z are parameters given to the rendering engine describing the choice of which chair model to use, the position of the chair, and other configuration details that affect the rendering of the image.
Using this synthetically generated data, a convolutional network is able to learn to map z descriptions of the content of an image to x approximations of rendered images.
This suggests that contemporary differentiable generator networks have sufficient model capacity to be good generative models, and that contemporary optimization algorithms have the ability to fit them.
The difficulty lies in determining how to train generator networks when the value of z for each x is not fixed and known ahead of each time.
The following sections describe several approaches to training differentiable  generator nets given only training samples of .x  20.10.3 Variational Autoencoders  The variational autoencoder or VAE ( , ; , ) is aKingma 2013 Rezende et al.
2014 directed model that uses learned approximate inference and can be trained purely with gradient-based methods.
To generate a sample from the model, the VAE first draws a sample z from the code distribution pmodel (z).
However, during training, the approximate inference network (or encoder) q(z x| ) is used to obtain z and pmodel(x z| ) is then viewed as a decoder network.
The key insight behind variational autoencoders is that they may be trained by maximizing the variational lower bound associated with data point :L( )q x  L( ) = q Ez z x∼q( | ) log pmodel( ) + ( ( ))z x, H q z | x (20.76) = Ez z x∼q( | ) log pmodel( )x z| −DKL( ( )q z | x ||pmodel( ))z (20.77) ≤ log pmodel( )x .
DEEP GENERATIVE MODELS  In equation , we recognize the first term as the joint log-likelihood of the visible20.76 and hidden variables under the approximate posterior over the latent variables (just like with EM, except that we use an approximate rather than the exact posterior).
When q is chosen to be a Gaussian distribution, with noise added to a predicted mean value, maximizing this entropy term encourages increasing the standard deviation of this noise.
More generally, this entropy term encourages the variational posterior to place high probability mass on many z values that could  have generated x, rather than collapsing to a single point estimate of the most likely value.
In equation , we recognize the first term as the reconstruction20.77 log-likelihood found in other autoencoders.
The second term tries to make the approximate posterior distribution q(z | x) and the model prior pmodel(z) approach each other.
Traditional approaches to variational inference and learning infer q via an opti- mization algorithm, typically iterated fixed point equations (section ).
These19.4 approaches are slow and often require the ability to compute Ez∼q log pmodel(z x, ) in closed form.
The main idea behind the variational autoencoder is to train a parametric encoder (also sometimes called an inference network or recognition model) that produces the parameters of q.
So long as z is a continuous variable, we  can then back-propagate through samples of z drawn from q(z x| ) = q(z; f(x; θ)) in order to obtain a gradient with respect to θ.
Learning then consists solely of maximizing L with respect to the parameters of the encoder and decoder.
All of the expectations in may be approximated by Monte Carlo sampling.L  The variational autoencoder approach is elegant, theoretically pleasing, and simple to implement.
It also obtains excellent results and is among the state of the art approaches to generative modeling.
Its main drawback is that samples from variational autoencoders trained on images tend to be somewhat blurry.
One possibility is that the blurriness is an intrinsic effect of maximum likelihood, which minimizes DKL(pdatapmodel).
As illustrated in figure , this means that the model will assign high probability to3.6 points that occur in the training set, but may also assign high probability to other  points.
Part of the reason that the model would choose to put probability mass on blurry images rather than some other part of the space is that the variational autoencoders used in practice usually have a Gaussian distribution for pmodel(x; g(z)).
Maximizing a lower bound on the likelihood of such a distribution is similar to training a traditional autoencoder with mean squared error, in the sense that it has a tendency to ignore features of the input that occupy few pixels or that cause only a small change in the brightness of the pixels that they occupy.
DEEP GENERATIVE MODELS  is shared with generative models that optimize a log-likelihood, or equivalently, DKL(pdatapmodel), as argued by ( ) and by ( ).
2015 Huszar 2015 troubling issue with contemporary VAE models is that they tend to use only a small subset of the dimensions of z, as if the encoder was not able to transform enough of the local directions in input space to a space where the marginal distribution matches the factorized prior.
This is a key advantage over Boltzmann machines, which require  extremely careful model design to maintain tractability.
One particularly sophisticated VAE is the deep recurrent attention writer or DRAW model ( , ).Gregor et al.
The generation process for the DRAW model consists of sequentially visiting different small image patches and drawing the values of the pixels at those points.
VAEs can also be extended to generate sequences by defining variational RNNs ( , ) by using a recurrent encoder and decoder withinChung et al.
Generating a sample from a traditional RNN involves only non-deterministic operations at the output space.
Variational RNNs also have random variability at the potentially more abstract level captured by the VAE  latent variables.
The VAE framework has been extended to maximize not just the traditional variational lower bound, but instead the importance weighted autoencoder ( , ) objective:Burda et al.
2015  Lk ( ) = x, q Ez(1),...,z( )k ∼ |q(z x)    log 1  k  k  i=1  pmodel(x z, ( )i )  q(z( )i | x)    .
However, it may also be interpreted as forming an estimate of the true log pmodel(x) using importance sampling of z from proposal distribution q(z x| ).
The importance weighted autoencoder objective is also a lower bound on log pmodel (x) and becomes tighter as increases.k  Variational autoencoders have some interesting connections to the MP-DBM and other approaches that involve back-propagation through the approximate inference graph (Goodfellow 2013b Stoyanov 2011 Brakel 2013et al., ; et al., ; et al., ).
These previous approaches required an inference procedure such as mean field fixed point equations to provide the computational graph.
The variational autoencoder is defined for arbitrary computational graphs, which makes it applicable to a wider range of probabilistic model families because there is no need to restrict the choice  698    CHAPTER 20.
The variational autoencoder also has the advantage that it increases a bound on the log-likelihood of the model, while the criteria for the MP-DBM and related models are more heuristic and have little probabilistic interpretation beyond making the results of approximate inference accurate.
One disadvantage of the variational autoencoder is that it learns an inference network for only one problem, inferring z given x.
The older methods are able to perform approximate inference over any subset of variables given any other subset of variables, because the mean field fixed point  equations specify how to share parameters between the computational graphs for all of these different problems.
One very nice property of the variational autoencoder is that simultaneously training a parametric encoder in combination with the generator network forces the model to learn a predictable coordinate system that the encoder can capture.
In one of the cases demonstrated in the figure, the algorithm discovered two independent factors of variation present in images of faces: angle of rotation and emotional expression.
20.10.4 Generative Adversarial Networks  Generative adversarial networks or GANs ( , ) are anotherGoodfellow et al.
Generative adversarial networks are based on a game theoretic scenario in which the generator network must compete against an adversary.
Its adversary, the discriminator network, attempts to distinguish between samples drawn from the training data and samples drawn from the generator.
The discriminator emits a probability value given by d(x; θ( )d ), indicating the probability that x is a real training example rather than a fake sample drawn from the model.
The simplest way to formulate learning in generative adversarial networks is  as a zero-sum game, in which a function v(θ( )g ,θ( )d ) determines the payoff of the discriminator.
During learning, each player attempts to maximize its own payoff, so that at convergence  g∗ = arg min g  max d v g, d .
( ) (20.80)  The default choice for isv  v(θ ( )g ,θ( )d ) = Ex∼pdata log ( ) +d x Ex∼pmodel log (1 ( ))− d x .
DEEP GENERATIVE MODELS  Figure 20.6: Examples of two-dimensional coordinate systems for high-dimensional mani- folds, learned by a variational autoencoder (Kingma and Welling 2014a, ).
Two dimensions may be plotted directly on the page for visualization, so we can gain an understanding of how the model works by training a model with a 2-D latent code, even if we believe the intrinsic dimensionality of the data manifold is much higher.
The images shown are not examples from the training set but images x actually generated by the model p(x z| ), simply by changing the 2-D “code” z (each image corresponds to a different choice of “code” z on a 2-D uniform grid).
One dimension that has been discovered (horizontal) mostly corresponds to a rotation of the face, while the other (vertical) corresponds to the emotional expression.
At convergence, the generator’s samples are indistinguishable from real data, and the discriminator outputs 12 everywhere.
The main motivation for the design of GANs is that the learning process requires neither approximate inference nor approximation of a partition function gradient.
In the case where maxd v(g, d) is convex in θ  ( )g (such as the case where optimization is performed directly in the space of probability density functions) the procedure is guaranteed to converge and is asymptotically consistent.
Unfortunately, learning in GANs can be difficult in practice when g and d are represented by neural networks and maxd v(g, d) is not convex.
DEEP GENERATIVE MODELS  ( ) identified non-convergence as an issue that may cause GANs to underfit.2014 In general, simultaneous gradient descent on two players’ costs is not guaranteed to reach an equilibrium.
Consider for example the value function v(a, b) = ab, where one player controls a and incurs cost ab, while the other player controls b and receives a cost −ab.
If we model each player as making infinitesimally small gradient steps, each player reducing their own cost at the expense of the other player, then a and b go into a stable, circular orbit, rather than arriving at the equilibrium point at the origin.
Note that the equilibria for a minimax game are  not local minima of v. Instead, they are points that are simultaneously minima for both players’ costs.
This means that they are saddle points of v that are local minima with respect to the first player’s parameters and local maxima with respect to the second player’s parameters.
It is possible for the two players to take turns increasing then decreasing v forever, rather than landing exactly on the saddle point where neither player is capable of reducing its cost.
Goodfellow 2014( ) identified an alternative formulation of the payoffs, in which the game is no longer zero-sum, that has the same expected gradient as maximum likelihood learning whenever the discriminator is optimal.
Because maximum likelihood training converges, this reformulation of the GAN game should also  converge, given enough samples.
Unfortunately, this alternative formulation does not seem to improve convergence in practice, possibly due to suboptimality of the discriminator, or possibly due to high variance around the expected gradient.
In realistic experiments, the best-performing formulation of the GAN game is a different formulation that is neither zero-sum nor equivalent to maximum likelihood, introduced by ( ) with a heuristic motivation.
2014c this best-performing formulation, the generator aims to increase the log probability that the discriminator makes a mistake, rather than aiming to decrease the log probability that the discriminator makes the correct prediction.
This reformulation is motivated solely by the observation that it causes the derivative of the generator’s cost function with respect to the discriminator’s logits to remain large even in the situation where the discriminator confidently rejects all generator samples.
Fortunately, GAN learning performs well when the model architecture and hyperparameters are care- fully selected.
2015 that performs very well for image synthesis tasks, and showed that its latent repre- sentation space captures important factors of variation, as shown in figure .15.9 See figure for examples of images generated by a DCGAN generator.20.7  The GAN learning problem can also be simplified by breaking the generation  701    CHAPTER 20.
Images of churches generated by a LAPGAN model, reproduced with2015 (Right) permission from ( ).Denton et al.
It is possible to train conditional GANs (Mirza and Osindero 2014, ) that learn to sample from a distribution p(x y| ) rather than simply sampling from a marginal distribution p(x).
2015 showed that a series of conditional GANs can be trained to first generate a very low-resolution version of an image, then incrementally add details to the image.
This technique is called the LAPGAN model, due to the use of a Laplacian pyramid to generate the images containing varying levels of detail.
LAPGAN generators are able to fool not only discriminator networks but also human observers, with experimental subjects identifying up to 40% of the outputs of the network as being real data.
One unusual capability of the GAN training procedure is that it can fit proba- bility distributions that assign zero probability to the training points.
Rather than maximizing the log probability of specific points, the generator net learns to trace out a manifold whose points resemble training points in some way.
Somewhat para- doxically, this means that the model may assign a log-likelihood of negative infinity to the test set, while still representing a manifold that a human observer judges to capture the essence of the generation task.
This is not clearly an advantage or a disadvantage, and one may also guarantee that the generator network assigns non-zero probability to all points simply by making the last layer of the generator network add Gaussian noise to all of the generated values.
Generator networks  that add Gaussian noise in this manner sample from the same distribution that one obtains by using the generator network to parametrize the mean of a conditional  702    CHAPTER 20.
In particular, units should be stochastically dropped while computing the gradient for the generator network to follow.
Following the gradient of the deterministic version of the discriminator with its weights divided by two does not seem to be as effective.
While the GAN framework is designed for differentiable generator networks, similar principles can be used to train other kinds of models.
For example, self-  supervised boosting can be used to train an RBM generator to fool a logistic regression discriminator (Welling 2002et al., ).
Unlike VAEs and GANs, they do not need to pair the generator network  with any other network—neither an inference network as used with VAEs nor a discriminator network as used with GANs.
The basic idea behind moment matching is to train the generator in such a way that many of the statistics of samples generated by the model are as similar as possible to those of the statistics of the examples in the training set.
For example, the first moment is the mean, the second moment is the mean of the squared values, and so on.
In multiple dimensions, each element of the random vector may be raised to different powers, so that a moment may be any quantity of the form  ExΠix ni i (20.82)  where n = [n1, n2, .
For example, if we want to match all the moments of the form xixj , then we need to minimize the difference between a number of values that is quadratic in the dimension of x.
Moreover, even matching all of the first and second moments would only be sufficient to fit a multivariate Gaussian distribution, which captures only linear relationships between values.
Our ambitions for neural networks are to capture complex nonlinear relationships, which would require far more moments.
DEEP GENERATIVE MODELS  dynamically updated discriminator that automatically focuses its attention on whichever statistic the generator network is matching the least effectively.
Instead, generative moment matching networks can be trained by minimizing a cost function called maximum mean discrepancy (Schölkopf and Smola, 2002 Gretton 2012; et al., ) or MMD.
This cost function measures the error in the first moments in an infinite-dimensional space, using an implicit mapping to feature space defined by a kernel function in order to make computations on infinite-dimensional vectors tractable.
The generator network is then trained to generate code samples, which may be mapped to visually pleasing samples via the decoder.
Unlike GANs, the cost function is defined only with respect to a batch of examples from both the training set and the generator network.
It is not possible to make a training update as a function of only one training example or only one sample from the generator network.
When the batch size is too small, MMD can underestimate the true amount of variation in the distributions being sampled.
No finite batch size is sufficiently large to eliminate this problem entirely, but larger batches reduce the amount of underestimation.
When the batch size is too large, the training procedure becomes infeasibly slow, because many examples must be processed in order to compute a single small gradient step.
As with GANs, it is possible to train a generator net using MMD even if that generator net assigns zero probability to the training points.
20.10.6 Convolutional Generative Networks  When generating images, it is often useful to use a generator network that includes a convolutional structure (see for example Goodfellow 2014c Dosovitskiyet al.
This approach often yields more realistic images and does9.5 so using fewer parameters than using fully connected layers without parameter sharing.
Convolutional networks for recognition tasks have information flow from the image to some summarization layer at the top of the network, often a class label.
DEEP GENERATIVE MODELS  As this image flows upward through the network, information is discarded as the representation of the image becomes more invariant to nuisance transformations.
Rich details must be added as the representation of the image to be generated propagates through the network, culminating in the final representation of the image, which is of course the image itself, in all of its detailed glory, with object positions and poses and textures and lighting.
The primary mechanism for discarding information in a convolutional recognition network is the pooling layer.
We cannot put the inverse of a pooling layer into the generator network because most pooling functions are not invertible.
An approach that seems to perform acceptably is to use an “un-pooling” as introduced by Dosovitskiy et al.
This layer corresponds to the inverse of the max-pooling operation under2015 certain simplifying conditions.
First, the stride of the max-pooling operation is constrained to be equal to the width of the pooling region.
Second, the maximum input within each pooling region is assumed to be the input in the upper-left corner.
These are very strong and unrealistic assumptions, but they do allow the max-pooling operator to be inverted.
The inverse un-pooling operation allocates a tensor of zeros, then copies each value from spatial coordinate i of the input  to spatial coordinate i k× of the output.
Even though the assumptions motivating the definition of the un-pooling operator are unrealistic, the subsequent layers are able to learn to compensate for its unusual output, so the samples generated by the model as a whole are visually pleasing.
20.10.7 Auto-Regressive Networks  Auto-regressive networks are directed probabilistic models with no latent random variables.
The conditional probability distributions in these models are represented by neural networks (sometimes extremely simple neural networks such as logistic regression).
They decompose a joint probability over the observed variables using the chain rule of probability to obtain a product of conditionals of the form P(xd | xd−1, .
Such models have been called fully-visible Bayes networks (FVBNs) and used successfully in many forms, first with logistic regression for each conditional distribution (Frey 1998, ) and then with neural networks with hidden units (Bengio and Bengio 2000b Larochelle and Murray 2011, ; , ).
In some forms of auto- regressive networks, such as NADE ( , ), describedLarochelle and Murray 2011  705    CHAPTER 20.
DEEP GENERATIVE MODELS  in section below, we can introduce a form of parameter sharing that20.10.10 brings both a statistical advantage (fewer unique parameters) and a computational advantage (less computation).
x1x1 x 2x 2 x3x3 x4x4  P x( 4 | x1, x2 , x3)P x( 4 | x1, x2 , x3)  P x( 3 | x1, x2)P x( 3 | x1, x2)  P x( 2 | x1)P x( 2 | x1)  P x( 1)P x( 1)  x1x1 x2x2 x3x3 x4x4  Figure 20.8: A fully visible belief network predicts the i-th variable from the i − 1 previous ones.
Corresponding computational graph, in the case of the logistic FVBN, where each prediction is made by a linear predictor.
20.10.8 Linear Auto-Regressive Networks  The simplest form of auto-regressive network has no hidden units and no sharing of parameters or features.
, x1) is parametrized as a linear model (linear regression for real-valued data, logistic regression for binary data, softmax regression for discrete data).
This model was introduced by Frey 1998( ) and has O(d2 ) parameters when there are d variables to model.
It is illustrated in figure .20.8  If the variables are continuous, a linear auto-regressive model is merely another way to formulate a multivariate Gaussian distribution, capturing linear pairwise  interactions between the observed variables.
Linear auto-regressive networks are essentially the generalization of linear classification methods to generative modeling.
Like linear classifiers, they may be trained with convex loss functions, and sometimes admit closed form solutions (as in the Gaussian case).
Like linear classifiers, the model itself does not offer a way of increasing its capacity, so capacity must be raised using techniques like basis expansions of the input or the kernel trick.
x1x1 x2x2 x3x3 x4x4  h1h1 h2h2 h3h3  P x( 4 | x1 , x2, x3)P x( 4 | x1 , x2, x3)  P x( 3 | x1, x2)P x( 3 | x1, x2)  P x( 2 | x1)P x( 2 | x1)  P x( 1)P x( 1)  Figure 20.9: A neural auto-regressive network predicts the i-th variable xi from the i− 1 previous ones, but is parametrized so that features (groups of hidden units denoted hi) that are functions of x1, .
20.10.9 Neural Auto-Regressive Networks  Neural auto-regressive networks ( , , ) have the sameBengio and Bengio 2000a b left-to-right graphical model as logistic auto-regressive networks (figure ) but20.8 employ a different parametrization of the conditional distributions within that  graphical model structure.
The new parametrization is more powerful in the sense that its capacity can be increased as much as needed, allowing approximation of any joint distribution.
The new parametrization can also improve generalization by introducing a parameter sharing and feature sharing principle common to deep learning in general.
The models were motivated by the objective of avoiding the curse of dimensionality arising out of traditional tabular graphical models, sharing the same structure as figure .
In tabular discrete probabilistic models, each20.8 conditional distribution is represented by a table of probabilities, with one entry and one parameter for each possible configuration of the variables involved.
, x1) by a neural network with (i − 1) × k inputs and k outputs (if the variables are discrete and take k values, encoded one-hot) allows one to estimate the conditional probability without requiring an exponential number of parameters (and examples), yet still is able to capture high-order dependencies between the random variables.
Instead of having a different neural network for the prediction of each xi , a connectivity illustrated in figure allows one to merge allleft-to-right 20.9 the neural networks into one.
Equivalently, it means that the hidden layer features computed for predicting xi can be reused for predicting xi k+ (k > 0).
The hidden units are thus organized in groups that have the particularity that all the units in the i-th group only depend on the input values x1, .
The parameters used to compute these hidden units are jointly optimized to improve the prediction of all the variables in the sequence.
This is an instance of the reuse principle that recurs throughout deep learning in scenarios ranging from recurrent and convolutional network architectures to multi-task and transfer learning.
, x1) can represent a conditional distribution by having outputs of the neural network predict parameters of the conditional distribution of xi , as discussed in section .
Although the original neural auto-regressive6.2.1.1 networks were initially evaluated in the context of purely discrete multivariate data (with a sigmoid output for a Bernoulli variable or softmax output for a multinoulli variable) it is natural to extend such models to continuous variables or joint distributions involving both discrete and continuous variables.
20.10.10 NADE  The neural autoregressive density estimator (NADE) is a very successful recent form of neural auto-regressive network (Larochelle and Murray 2011, ).
The connectivity is the same as for the original neural auto-regressive network of Bengio and Bengio 2000b( ) but NADE introduces an additional parameter sharing scheme, as illustrated in figure .
The weights W j,k,i from the i-th input xi to the k -th element of the j-th group  of hidden unit h ( )j k ( ) are shared among the groups:j i≥  W j,k,i = Wk,i.
DEEP GENERATIVE MODELS  x1x1 x2x2 x3x3 x4x4  h1h1 h2h2 h3h3  P x( 4 | x1, x2, x3)P x( 4 | x1, x2, x3)  P x( 3 | x1 , x2)P x( 3 | x1 , x2)  P x( 2 | x1)P x( 2 | x1)  P x( 1)P x( 1)  W: 1, W: 1, W: 1, W: 2, W: 2, W: 3,  Figure 20.10: An illustration of the neural autoregressive density estimator (NADE).
, x1), for j > i. NADE is differentiated from earlier neural auto-regressive networks by the use of a particular weight sharing pattern: W j,k,i =Wk,i is shared (indicated in the figure by the use of the same line pattern for every instance of a replicated weight) for all the weights going out from xi to the k-th unit of any group .
Larochelle and Murray 2011( ) chose this sharing scheme so that forward propagation in a NADE model loosely resembles the computations performed in mean field inference to fill in missing inputs in an RBM.
This mean field inference corresponds to running a recurrent network with shared weights and the first step of that inference is the same as in NADE.
The only difference is that with NADE, the output weights connecting the hidden units to the output are parametrized independently from the weights connecting the input units to the hidden units.
The NADE architecture can be extended to mimic not just one time step of the mean field recurrent inference but to mimic k steps.
2014  As mentioned previously, auto-regressive networks may be extend to process  continuous-valued data.
A particularly powerful and generic way of parametrizing a continuous density is as a Gaussian mixture (introduced in section ) with3.9.6 mixture weights αi (the coefficient or prior probability for component i), per- component conditional mean µi and per-component conditional variance σ  2 i .
DEEP GENERATIVE MODELS  distribution are outputs of the network, with the mixture weight probabilities produced by a softmax unit, and the variances parametrized so that they are positive.
Stochastic gradient descent can be numerically ill-behaved due to the interactions between the conditional means µi and the conditional variances σ  2 i .
Another very interesting extension of the neural auto-regressive architectures gets rid of the need to choose an arbitrary order for the observed variables (Murray  and Larochelle 2014, ).
In auto-regressive networks, the idea is to train the network to be able to cope with any order by randomly sampling orders and providing the information to hidden units specifying which of the inputs are observed (on the right side of the conditioning bar) and which are to be predicted and are thus considered missing (on the left side of the conditioning bar).
This is nice because it allows one to use a trained auto-regressive network to perform any inference problem (i.e.
predict or sample from the probability distribution over any subset of variables given any subset) extremely efficiently.
for n variables) and each order o of variables yields a  different , we can form an ensemble of models for many values of :p o(x | ) o  pensemble( ) =x 1  k  k  i=1  p o(x | ( )i ).
(20.84)  This ensemble model usually generalizes better and assigns higher probability to the test set than does an individual model defined by a single ordering.
In the same paper, the authors propose deep versions of the architecture, but  unfortunately that immediately makes computation as expensive as in the original neural auto-regressive neural network ( , ).
The first layerBengio and Bengio 2000b and the output layer can still be computed in O(nh) multiply-add operations, as in the regular NADE, where h is the number of hidden units (the size of the groups hi, in figures and ), whereas it is20.10 20.9 O(n  2h) in Bengio and Bengio ( ).
However, for the other hidden layers, the computation is2000b O(n2h2) if every “previous” group at layer l participates in predicting the “next” group at layer l+ 1, assuming n groups of h hidden units at each layer.
Making the i-th group at layer l + 1 only depend on the i -th group, as in Murray and Larochelle 2014( ) at layer l reduces it to O nh( 2), which is still times worse than the regular NADE.h  710    CHAPTER 20.
DEEP GENERATIVE MODELS  20.11 Drawing Samples from Autoencoders  In chapter , we saw that many kinds of autoencoders learn the data distribution.14 There are close connections between score matching, denoising autoencoders, and contractive autoencoders.
These connections demonstrate that some kinds of autoencoders learn the data distribution in some way.
Some kinds of autoencoders, such as the variational autoencoder, explicitly represent a probability distribution and admit straightforward ancestral sampling.
Contractive autoencoders are designed to recover an estimate of the tangent plane of the data manifold.
This means that repeated encoding and decoding with injected noise will induce a random walk along the surface of the manifold (Rifai et al.
20.11.1 Markov Chain Associated with any Denoising Autoen- coder  The above discussion left open the question of what noise to inject and where, in order to obtain a Markov chain that would generate from the distribution estimated by the autoencoder.
Generalized denoising autoencoders are specified by a denoising distribution for sampling an estimate of the clean input given the corrupted input.
Each step of the Markov chain that generates from the estimated distribution consists of the following sub-steps, illustrated in figure :20.11  1.
DEEP GENERATIVE MODELS  xx  x̃̃x  hh  ωω  x̂̂x  C(x̃ x| ) p( )x | ω  f g  Figure 20.11: Each step of the Markov chain associated with a trained denoising autoen- coder, that generates the samples from the probabilistic model implicitly trained by the denoising log-likelihood criterion.
Each step consists in (a) injecting noise via corruption process C in state x, yielding x̃, (b) encoding it with function f, yielding h = f (x̃), (c) decoding the result with function g, yielding parameters ω for the reconstruction distribution, and (d) given ω, sampling a new state from the reconstruction distribution p(x | ω = g(f(x̃ ))).
In the typical squared reconstruction error case, g (h) = x̂, which estimates E[x | x̃], corruption consists in adding Gaussian noise and sampling from p(x | ω) consists in adding Gaussian noise, a second time, to the reconstruction x̂.
The latter noise level should correspond to the mean squared error of reconstructions, whereas the injected noise is a hyperparameter that controls the mixing speed as well as the extent to which the estimator smooths the empirical distribution ( , ).
In theVincent 2011 example illustrated here, only the C and p conditionals are stochastic steps (f and g are deterministic computations), although noise can also be injected inside the autoencoder, as in generative stochastic networks ( , ).Bengio et al.
( ) showed that if the autoencoder p(x | x̃) forms a consistent estimator of the corresponding true conditional distribution, then the stationary distribution of the above Markov chain forms a consistent estimator (albeit an implicit one) of the data generating distribution of .x  20.11.2 Clamping and Conditional Sampling  Similarly to Boltzmann machines, denoising autoencoders and their generalizations (such as GSNs, described below) can be used to sample from a conditional distri- bution p(xf | xo), simply by clamping the observed units xf and only resampling the free units xo given xf and the sampled latent variables (if any).
For example, MP-DBMs can be interpreted as a form of denoising autoencoder, and are able to sample missing inputs.
2014 that the transition operator (defined by the stochastic mapping going from one state of the chain to the next) should satisfy a property called detailed balance,  which specifies that a Markov Chain at equilibrium will remain in equilibrium whether the transition operator is run in forward or reverse.
An experiment in clamping half of the pixels (the right part of the image) and running the Markov chain on the other half is shown in figure .20.12  713    CHAPTER 20.
DEEP GENERATIVE MODELS  Figure 20.12: Illustration of clamping the right half of the image and running the Markov Chain by resampling only the left half at each step.
These samples come from a GSN trained to reconstruct MNIST digits at each time step using the walkback procedure.
20.11.3 Walk-Back Training Procedure  The walk-back training procedure was proposed by ( ) as a wayBengio et al.
Instead of performing a one-step encode-decode reconstruction, this procedure consists in alternative multiple stochastic encode-decode steps (as in the generative  Markov chain) initialized at a training example (just like with the contrastive divergence algorithm, described in section ) and penalizing the last probabilistic18.2 reconstructions (or all of the reconstructions along the way).
Training with k steps is equivalent (in the sense of achieving the same stationary distribution) as training with one step, but practically has the advantage that spurious modes further from the data can be removed more efficiently.
20.12 Generative Stochastic Networks  Generative stochastic networks or GSNs ( , ) are generaliza-Bengio et al.
2014  tions of denoising autoencoders that include latent variables h in the generative  714    CHAPTER 20.
DEEP GENERATIVE MODELS  Markov chain, in addition to the visible variables (usually denoted ).x  A GSN is parametrized by two conditional probability distributions which specify one step of the Markov chain:  1. p(x( )k | h( )k ) tells how to generate the next visible variable given the current latent state.
2. p(h( )k | h( 1)k− ,x( 1)k− ) tells how to update the latent state variable, given the previous latent state and visible variable.
Denoising autoencoders and GSNs differ from classical probabilistic models (directed or undirected) in that they parametrize the generative process itself rather than the mathematical specification of the joint distribution of visible and latent variables.
Instead, the latter is defined , , as the stationaryimplicitly if it exists distribution of the generative Markov chain.
The conditions for existence of the stationary distribution are mild and are the same conditions required by standard MCMC methods (see section ).
These conditions are necessary to guarantee17.3 that the chain mixes, but they can be violated by some choices of the transition  distributions (for example, if they were deterministic).
This is achieved by clamping x(0) = x to the observed example and maximizing the probability of generating x at some subsequent time steps, i.e., maximizing log p(x( )k = x | h( )k ), where h( )k is sampled from the chain, given x(0) = x.
In order to estimate the gradient of log p(x( )k = x | h( )k ) with respect to the other pieces of the model, Bengio et al.
( ) use the reparametrization trick, introduced in section .2014 20.9  Thewalk-back training protocol (described in section ) was used (20.11.3 Ben- gio 2014et al., ) to improve training convergence of GSNs.
20.12.1 Discriminant GSNs  The original formulation of GSNs ( , ) was meant for unsupervisedBengio et al.
2014 learning and implicitly modeling p(x) for observed data x, but it is possible to  modify the framework to optimize .p( )y | x For example, Zhou and Troyanskaya 2014( ) generalize GSNs in this way, by  only back-propagating the reconstruction log-probability over the output variables, keeping the input variables fixed.
DEEP GENERATIVE MODELS  (protein secondary structure) and introduced a (one-dimensional) convolutional structure in the transition operator of the Markov chain.
It is important to remember that, for each step of the Markov chain, one generates a new sequence for each layer, and that sequence is the input for computing other layer values (say the one below and the one above) at the next time step.
Hence the Markov chain is really over the output variable (and associated higher- level hidden layers), and the input sequence only serves to condition that chain, with back-propagation allowing to learn how the input sequence can condition the  output distribution implicitly represented by the Markov chain.
Zöhrer and Pernkopf 2014( ) introduced a hybrid model that combines a super- vised objective (as in the above work) and an unsupervised objective (as in the original GSN work), by simply adding (with a different weight) the supervised and unsupervised costs i.e., the reconstruction log-probabilities of y and x respectively.
20.13 Other Generation Schemes  The methods we have described so far use either MCMC sampling, ancestral sampling, or some mixture of the two to generate samples.
While these are the most popular approaches to generative modeling, they are by no means the only approaches.
( ) developed a diffusion inversion training scheme for learning a generative model, based on non-equilibrium thermodynamics.
The approach is based on the idea that the probability distributions we wish to sample from have structure.
This structure can gradually be destroyed by a diffusion process that incrementally changes the probability distribution to have more  entropy.
To form a generative model, we can run the process in reverse, by training a model that gradually restores the structure to an unstructured distribution.
By iteratively applying a process that brings a distribution closer to the target one, we can gradually approach that target distribution.
This approach resembles MCMC methods in the sense that it involves many iterations to produce a sample.
However, the model is defined to be the probability distribution produced by the final step of the chain.
2015 is also very close to the generative interpretation of the denoising autoencoder  716    CHAPTER 20.
As with the denoising autoencoder, diffusion inversion trains a20.11.1 transition operator that attempts to probabilistically undo the effect of adding some noise.
The difference is that diffusion inversion requres undoing only one step of the diffusion process, rather than traveling all the way back to a clean data point.
This addresses the following dilemma present with the ordinary reconstruction log-likelihood objective of denoising autoencoders: with small levels of noise the learner only sees configurations near the data points, while with large levels of noise it is asked to do an almost impossible job (because the denoising distribution  is highly complex and multi-modal).
With the diffusion inversion objective, the learner can learn the shape of the density around the data points more precisely as well as remove spurious modes that could show up far from the data points.
Another approach to sample generation is the approximate Bayesian com- putation (ABC) framework ( , ).
1984 rejected or modified in order to make the moments of selected functions of the samples match those of the desired distribution.
While this idea uses the moments of the samples like in moment matching, it is different from moment matching because it modifies the samples themselves, rather than training the model to automatically emit samples with the correct moments.
( )Bachman and Precup 2015 showed how to use ideas from ABC in the context of deep learning, by using ABC  to shape the MCMC trajectories of GSNs.
20.14 Evaluating Generative Models  Researchers studying generative models often need to compare one generative model to another, usually in order to demonstrate that a newly invented generative model is better at capturing some distribution than the pre-existing models.
In many cases, we can not actually  evaluate the log probability of the data under the model, but only an approximation.
In these cases, it is important to think and communicate clearly about exactly what is being measured.
For example, suppose we can evaluate a stochastic estimate of the log-likelihood for model A, and a deterministic lower bound on the log-likelihood for model B.
If we care about determining which model has a better internal representation of the distribution, we actually cannot tell, unless we have some way of determining how loose the bound for model B is.
However, if we care about how well we can use the model in practice, for example to perform anomaly detection, then it is fair to  717    CHAPTER 20.
DEEP GENERATIVE MODELS  say that a model is preferable based on a criterion specific to the practical task of interest, e.g., based on ranking test examples and ranking criteria such as precision and recall.
Another subtlety of evaluating generative models is that the evaluation metrics are often hard research problems in and of themselves.
For example, suppose we use AIS to estimate logZ in order to compute log p̃(x) − logZ for a new model we have just invented.
A computationally economical implementation of AIS may fail  to find several modes of the model distribution and underestimate Z, which will result in us overestimating log p(x).
It can thus be difficult to tell whether a high likelihood estimate is due to a good model or a bad AIS implementation.
Other fields of machine learning usually allow for some variation in the pre- processing of the data.
For example, when comparing the accuracy of object recognition algorithms, it is usually acceptable to preprocess the input images slightly differently for each algorithm based on what kind of input requirements it has.
Generative modeling is different because changes in preprocessing, even very small and subtle ones, are completely unacceptable.
Any change to the input data changes the distribution to be captured and fundamentally alters the task.
Issues with preprocessing commonly arise when benchmarking generative models on the MNIST dataset, one of the more popular generative modeling benchmarks.
It is essential to compare real-valued models only to other real-valued models and binary-valued models only to other binary-valued models.
For binary-valued models, the log-likelihood can be at most zero, while for real-valued models it can be arbitrarily high, since it is the measurement of a density.
For example, we might binarize a gray pixel to 0 or 1 by thresholding at 0.5, or by drawing a random sample whose probability of being 1 is given by the gray pixel intensity.
If we use the random binarization, we might binarize the whole dataset once, or we might draw a different random example for each step of training and then draw multiple samples for evaluation.
Each of these three schemes yields wildly different likelihood numbers, and when comparing different models it is important that both models use the same binarization scheme for training and for evaluation.
DEEP GENERATIVE MODELS  binarization step share a file containing the results of the random binarization, so that there is no difference in results based on different outcomes of the binarization step.
Because being able to generate realistic samples from the data distribution is one of the goals of a generative model, practitioners often evaluate generative models by visually inspecting the samples.
In the best case, this is done not by the researchers themselves, but by experimental subjects who do not know the source of the samples (Denton 2015et al., ).
A common practice to verify if the model only copies some of the training examples is illustrated in figure .16.1 The idea is to show for some of the generated samples their nearest neighbor in the training set, according to Euclidean distance in the space of x.
This test is intended to detect the case where the model overfits the training set and just reproduces training instances.
It is even possible to simultaneously underfit and overfit yet still produce samples that individually look good.
Imagine a generative model trained on images of dogs and cats that simply learns to reproduce the training images of dogs.
Such a model has clearly overfit, because it does not produces images that were not in the training set, but it has also underfit, because it assigns no probability to the training images of cats.
In this simple example, it would be easy for a human observer who can inspect many samples to determine that the cats are absent.
In more realistic settings, a generative model trained on data with tens of thousands of modes may ignore a small number of modes, and a human observer would not easily be able to inspect or remember enough images to detect the missing variation.
Since the visual quality of samples is not a reliable guide, we often also evaluate the log-likelihood that the model assigns to the test data, when this is computationally feasible.
Unfortunately, in some cases the likelihood seems not to measure any attribute of the model that we really care about.
For example, real-valued models of MNIST can obtain arbitrarily high likelihood by assigning arbitrarily low variance to background pixels that never change.
Models and  algorithms that detect these constant features can reap unlimited rewards, even though this is not a very useful thing to do.
The potential to achieve a cost approaching negative infinity is present for any kind of maximum likelihood problem with real values, but it is especially problematic for generative models of MNIST because so many of the output values are trivial to predict.
They highlight the fact that there are many different uses of generative models and that the choice of metric must match the intended use of the model.
For example, some generative models are better at assigning high probability to most realistic points while other generative models are better at rarely assigning high probability to unrealistic points.
These differences can result from whether a generative model is designed to minimize DKL(pdatapmodel ) or DKL(pmodelpdata), as illustrated in figure .3.6 Unfortunately, even when we restrict the use of each metric to the task it is most  suited for, all of the metrics currently in use continue to have serious weaknesses.
One of the most important research topics in generative modeling is therefore not just how to improve generative models, but in fact, designing new techniques to measure our progress.
20.15 Conclusion  Training generative models with hidden units is a powerful way to make models understand the world represented in the given training data.
By learning a model pmodel(x) and a representation pmodel (h x| ), a generative model can provide answers to many inference problems about the relationships between input variables  in x and can provide many different ways of representing x by taking expectations of h at different layers of the hierarchy.
Generative models hold the promise to provide AI systems with a framework for all of the many different intuitive concepts they need to understand, and the ability to reason about these concepts in the face of uncertainty.
We hope that our readers will find new ways to make these approaches more powerful and continue the journey to understanding the principles that underlie learning and intelligence.
                                     Bibliography  Abadi, M., Agarwal, A., Barham, P., Brevdo, E., Chen, Z., Citro, C., Corrado, G. S., Davis, A., Dean, J., Devin, M., Ghemawat, S., Goodfellow, I., Harp, A., Irving, G., Isard, M., Jia, Y., Jozefowicz, R., Kaiser, L., Kudlur, M., Levenberg, J., Mané, D., Monga, R., Moore, S., Murray, D., Olah, C., Schuster, M., Shlens, J., Steiner, B., Sutskever, I., Talwar, K., Tucker, P., Vanhoucke, V., Vasudevan, V., Viégas, F., Vinyals, O., Warden, P., Wattenberg, M., Wicke, M., Yu, Y., and Zheng, X.
, , ,ICLR’2013, arXiv:1211.4246 507 513 514 521  Alain, G., Bengio, Y., Yao, L., Éric Thibodeau-Laufer, Yosinski, J., and Vincent, P. (2015).
In Proceedings of the 32nd International Conference on Machine Learning, ICML 2015, Lille, France, 6-11 July 2015 , pages 1964–1972.
In D. Koller, D. Schuurmans, Y. Bengio, and L. Bottou, editors, Advances in Neural Information Processing Systems 21 (NIPS’08), pages 113–120.
, , , , ,ICLR’2015, arXiv:1409.0473 25 101 397 418 420 465 475 476, ,  Bahl, L. R., Brown, P., de Souza, P. V., and Mercer, R. L. (1987).
Neural Networks, , 53–58.2 286  Baldi, P., Brunak, S., Frasconi, P., Soda, G., and Pollastri, G. (1999).
490  Bastien, F., Lamblin, P., Pascanu, R., Bergstra, J., Goodfellow, I. J., Bergeron, A., Bouchard, N., and Bengio, Y.
In Proceedings of the 8th International Conference on Computational Learning Theory (COLT’95), pages 311–320, Santa Cruz, California.
J. Computational Intelligence and Applications, (4), 427–438.1 515  Beiu, V., Quintana, J. M., and Avedillo, M. J.
In T. Dietterich, S. Becker, and Z. Ghahramani, editors, Advances in Neural Information Processing Systems 14 (NIPS’01), Cambridge, MA.
IEEE Transactions on Neural Networks, special issue on Data Mining and Knowledge Discovery, (3), 550–557.11 707  Bengio, S., Vinyals, O., Jaitly, N., and Shazeer, N. (2015b).
In Statistical Language and Speech Processing, volume 7978 of Lecture Notes in Computer Science, pages 1–37.
In S. Thrun, L. Saul, and B. Schölkopf, editors, Advances in Neural Information Processing Systems 16 (NIPS’03), Cambridge, MA.
In L. Saul, Y. Weiss, and L. Bottou, editors, Advances in Neural Information Processing Systems 17 (NIPS’04), pages 129–136.
Phonetically motivated acoustic parameters for continuous speech recognition using artificial neural networks.
, , , , , ,NIPS’2006 14 19 201 323 324 528 530  Bengio, Y., Louradour, J., Collobert, R., and Weston, J.
Stochastic gradient estimate variance in contrastive divergence and persistent contrastive divergence.
, ,13 433 434 435  Bergstra, J., Breuleux, O., Bastien, F., Lamblin, P., Pascanu, R., Desjardins, G., Turian, J., Warde-Farley, D., and Bengio, Y.
In Proceedings International Conference on Artificial Neural Networks ICANN’95 , volume 1, page 141–148.
Annales des Télécommunications , (9–10), 203–220.19 689  Bordes, A., Weston, J., Collobert, R., and Bengio, Y.
In C. Burges, L. Bottou, M. Welling, Z. Ghahramani, and K. Weinberger, editors, Advances in Neural Information Processing Systems 26 , pages 2787–2795.
In COLT ’92: Proceedings of the fifth annual workshop on Computational learning theory, pages 144–152, New York, NY, USA.
Modeling temporal dependencies in high-dimensional sequences: Application to polyphonic music generation and transcription.
Machine Learning , (2), 123–140.24 256  Breiman, L., Friedman, J. H., Olshen, R. A., and Stone, C. J.
Speech Communication, (1), 83–92.9 186  Briggman, K., Denk, W., Seung, S., Helmstaedter, M. N., and Turaga, S. C. (2009).
In , pages 1865–1873.NIPS’2009 360  Brown, P. F., Cocke, J., Pietra, S. A. D., Pietra, V. J. D., Jelinek, F., Lafferty, J. D., Mercer, R. L., and Roossin, P. S. (1990).
Computational linguistics , (2), 79–85.16 21  Brown, P. F., Pietra, V. J. D., DeSouza, P. V., Lai, J. C., and Mercer, R. L. (1992).
In Proceedings of the 12th ACM SIGKDD international conference on Knowledge discovery and data mining , pages 535–541.
In R. G. Cowell and Z. Ghahramani, editors, Proceedings of the Tenth International Workshop on Artificial Intelligence and Statistics (AISTATS’05), pages 33–40.
In S. Becker, S. Thrun, and K. Obermayer, editors, Advances in Neural Information Processing Systems 15 (NIPS’02), pages 585–592, Cambridge, MA.
In Guy Lorette, editor, Tenth International Workshop on Frontiers in Handwriting Recognition, La Baule (France).
In Pro- ceedings of the 19th international conference on Architectural support for programming languages and operating systems, pages 269–284.
451  Chen, T., Li, M., Li, Y., Lin, M., Wang, N., Wang, M., Xiao, T., Xu, B., Zhang, C., and Zhang, Z.
25  Chen, Y., Luo, T., Liu, S., Zhang, S., He, L., Wang, J., Li, L., Chen, T., Xu, Z., Sun, N., et al.
In , pages 105–112.ICML’2011 674  Cho, K., van Merriënboer, B., Gulcehre, C., Bougares, F., Schwenk, H., and Bengio, Y.
NIPS’2014 Deep Learning workshop, arXiv 1412.3555. ,412 460  Chung, J., Gülçehre, Ç., Cho, K., and Bengio, Y.
In Proceedings of the Thirteenth International Conference on Artificial Intelligence and Statistics (AISTATS 2011).
, ,363 364 455  730    BIBLIOGRAPHY  Coates, A., Huval, B., Wang, T., Wu, D., Catanzaro, B., and Andrew, N. (2013).
In S. Dasgupta and D. McAllester, editors, Proceedings of the 30th International Conference on Machine Learning (ICML-13), volume 28 (3), pages 1337–1345.
A unified architecture for natural language processing: Deep neural networks with multitask learning.
A unified architecture for natural language processing: Deep neural networks with multitask learning.
Neural Computation, (5), 1105–1114.14 450  Collobert, R., Weston, J., Bottou, L., Karlen, M., Kavukcuoglu, K., and Kuksa, P. (2011a).
Pattern Analysis and Machine Intelligence, IEEE Transactions on , (9), 1874–1887.36 682  Cover, T. M. and Thomas, J.
In Automatic Face & Gesture Recognition and Workshops (FG 2011), 2011 IEEE International Conference on , pages 8–15.
Mathematics of Control, Signals, and Systems, , 303–314.2 198  Dahl, G. E., Ranzato, M., Mohamed, A., and Hinton, G. E. (2010).
IEEE Transactions on Audio, Speech, and Language Processing, (1), 33–42.20 459  Dahl, G. E., Sainath, T. N., and Hinton, G. E. (2013).
, ,NIPS’2014 285 286 288  Davis, A., Rubinstein, M., Wadhwa, N., Mysore, G., Durand, F., and Freeman, W. T. (2014).
Neural computation, (5), 889–904.7 693  Dean, J., Corrado, G., Monga, R., Chen, K., Devin, M., Le, Q., Mao, M., Ranzato, M., Senior, A., Tucker, P., Yang, K., and Ng, A. Y.
Computational Intelligence, (3), 142–150.5 662  Deerwester, S., Dumais, S. T., Furnas, G. W., Landauer, T. K., and Harshman, R. (1990).
In Proceedings of the 11th European Conference on Computer Vision: Part V , ECCV’10, pages 71–84, Berlin, Heidelberg.
Technical Report 1327, Département d’Informatique et de Recherche Opéra- tionnelle, Université de Montréal.
683  733    BIBLIOGRAPHY  Desjardins, G., Courville, A. C., Bengio, Y., Vincent, P., and Delalleau, O.
493  Donahue, J., Hendricks, L. A., Guadarrama, S., Rohrbach, M., Venugopalan, S., Saenko, K., and Darrell, T. (2014).
IEEE Transactions on Neural Networks, (6), 991–997.3 271  734    BIBLIOGRAPHY  Duchi, J., Hazan, E., and Singer, Y.
In T. Leen, T. Dietterich, and V. Tresp, editors, Advances in Neural Information Processing Systems 13 (NIPS’00), pages 472–478.
Cognition, , 781–799.48 328  Erhan, D., Manzagol, P.-A., Bengio, Y., Bengio, S., and Vincent, P. (2009).
,570 654  Fang, H., Gupta, S., Iandola, F., Srivastava, R., Deng, L., Dollár, P., Gao, J., He, X., Mitchell, M., Platt, J. C., Zitnick, C. L., and Zweig, G. (2015).
102  Farabet, C., LeCun, Y., Kavukcuoglu, K., Culurciello, E., Martini, B., Akselrod, P., and Talay, S. (2011).
In R. Bekkerman, M. Bilenko, and J. Langford, editors, Scaling up Machine Learning: Parallel and Distributed Approaches.
In International Joint Conference on Neural Networks (IJCNN), volume 1, pages 401–405, Washington 1989.
In D. Touretzky, M. Mozer, and M. Hasselmo, editors, Advances in Neural Information Processing Systems 8 (NIPS’95), pages 661–670.
Neocognitron: A self-organizing neural network model for a mechanism of pattern recognition unaffected by shift in position.
In L. Saul, Y. Weiss, and L. Bottou, editors, Advances in Neural Information Processing Systems 17 (NIPS’04).
In , pages 646–654.NIPS’2009 255  Goodfellow, I., Koenig, N., Muja, M., Pantofaru, C., Sorokin, A., and Takayama, L. (2010).
In S. Dasgupta and D. McAllester, editors, , pages 1319–ICML’13 1327. , , , ,193 264 344 365 455  Goodfellow, I. J., Mirza, M., Courville, A., and Bengio, Y.
, , , , , , ,NIPS26 100 617 671 672 673 674 675 698  Goodfellow, I. J., Warde-Farley, D., Lamblin, P., Dumoulin, V., Mirza, M., Pascanu, R., Bergstra, J., Bastien, F., and Bengio, Y.
, , , ,CoRR abs/1412.6572 268 269 271 555 556  Goodfellow, I. J., Pouget-Abadie, J., Mirza, M., Xu, B., Warde-Farley, D., Ozair, S., Courville, A., and Bengio, Y.
In .NIPS’2014 544 689 699 701 704, , , ,  Goodfellow, I. J., Bulatov, Y., Ibarz, J., Arnoud, S., and Shet, V. (2014d).
In D. Koller, D. Schuurmans, Y. Bengio, and L. Bottou, editors, , pages 545–552.NIPS’2008 395  739    BIBLIOGRAPHY  Graves, A., Fernández, S., Gomez, F., and Schmidhuber, J.
Connectionist temporal classification: Labelling unsegmented sequence data with recurrent neural networks.
Singer, and S. Roweis, editors, , pages 577–584.NIPS’2007 395  Graves, A., Liwicki, M., Fernández, S., Bertolami, R., Bunke, H., and Schmidhuber, J.
Pattern Analysis and Machine Intelligence, IEEE Transactions on , (5), 855–868.31 410  Graves, A., Mohamed, A., and Hinton, G. (2013).
In .NIPS’2015 418  Greff, K., Srivastava, R. K., Koutník, J., Steunebrink, B. R., and Schmidhuber, J.
In L. Bottou and M. Littman, editors, Proceedings of the Twenty-seventh International Conference on Machine Learning (ICML-10).
Neural Networks, IEEE Transactions on, (6), 923–933.3 450  Gupta, S., Agrawal, A., Gopalakrishnan, K., and Narayanan, P. (2015).
In Proceedings of The Thirteenth International Conference on Artificial Intelligence and Statistics (AISTATS’10).
In Proceedings of the 18th annual ACM Symposium on Theory of Computing , pages 6–20, Berkeley, California.
Circuits neuronaux à synapses modifiables: Décodage de messages composites par apprentissage non supervisé.
307  Hinton, G., Deng, L., Dahl, G. E., Mohamed, A., Jaitly, N., Senior, A., Vanhoucke, V., Nguyen, P., Sainath, T., and Kingsbury, B.
In D. E. Rumelhart and J. L. McClelland, editors, Parallel Distributed Processing, volume 1, chapter 7, pages 282–317.
In D. E. Rumelhart and J. L. McClelland, editors, Parallel Distributed Processing: Explorations in the Microstructure of Cognition, volume 1, pages 77–109.
In G. Tesauro, D. Touretzky, and T. Leen, editors, Advances in Neural Information Processing Systems 7 (NIPS’94), pages 1015–1022.
IEEE Transactions on Neural Networks , , 65–74.8 499  Hinton, G. E., Welling, M., Teh, Y. W., and Osindero, S. (2001).
In Proceedings of 3rd International Conference on Independent Component Analysis and Blind Signal Separation (ICA’01), pages 746–751, San Diego, CA.
, , , , , , ,18 14 19 27 143 528 529 660 661  Hinton, G. E., Deng, L., Yu, D., Dahl, G. E., Mohamed, A., Jaitly, N., Senior, A., Vanhoucke, V., Nguyen, P., Sainath, T. N., and Kingsbury, B.
Deep neural networks for acoustic modeling in speech recognition: The shared views of four research groups.
Mag., (6), 82–97.29 101  743    BIBLIOGRAPHY  Hinton, G. E., Srivastava, N., Krizhevsky, A., Sutskever, I., and Salakhutdinov, R. (2012c).
In Neural Networks, 1991., IJCNN-91-Seattle International Joint Conference on , volume 2, pages 121–126.
Universal approximation of an unknown mapping and its derivatives using multilayer feedforward networks.
In Proceedings of the 22nd ACM international conference on Conference on information & knowledge management , pages 2333–2338.
Journal of Physiology (London), , 215–243.195 364  744    BIBLIOGRAPHY  Hubel, D. H. and Wiesel, T. N. (1959).
Connections between score matching, contrastive divergence, and pseudolikelihood for continuous-valued variables.
Improved generalization by adding both auto- association and hidden-layer noise to neural-network-based-classifiers.
Neural networks , (4), 295–307.1 307  Jacobs, R. A., Jordan, M. I., Nowlan, S. J., and Hinton, G. E. (1991).
407  Jain, V., Murray, J. F., Roth, F., Turaga, S., Zhigulin, V., Briggman, K. L., Helmstaedter, M. N., Denk, W., and Seung, H. S. (2007).
In Acoustics, Speech and Signal Processing (ICASSP), 2011 IEEE International Conference on, pages 5884–5887.
Signal Processing, , 1–10.24 491  Kahou, S. E., Pal, C., Bouthillier, X., Froumenty, P., Gülçehre, c., Memisevic, R., Vincent, P., Courville, A., Bengio, Y., Ferrari, R. C., Mirza, M., Jean, S., Carrier, P. L., Dauphin, Y., Boulanger-Lewandowski, N., Aggarwal, A., Zumer, J., Lamblin, P., Raymond, J.-P., Desjardins, G., Pascanu, R., Warde-Farley, D., Torabi, A., Sharma, A., Bengio, E., Côté, M., Konda, K. R., and Wu, Z.
arXiv:1412.2306.CVPR’2015 102  Karpathy, A., Toderici, G., Shetty, S., Leung, T., Sukthankar, R., and Fei-Fei, L. (2014).
Estimation of probabilities from sparse data for the language model component of a speech recognizer.
In .CVPR’2009 523  Kavukcuoglu, K., Sermanet, P., Boureau, Y.-L., Gregor, K., Mathieu, M., and LeCun, Y.
,NIPS’2010 513 620  748    BIBLIOGRAPHY  Kingma, D., Rezende, D., Mohamed, S., and Welling, M. (2014).
,476 539  Knowles-Barley, S., Jones, T. R., Morgan, J., Lee, D., Kasthuri, N., Lichtman, J. W., and Pfister, H. (2014).
REMAP: Recursive estimation and maximization of a posteriori probabilities – application to transition-based connectionist speech recognition.
In D. Touretzky, M. Mozer, and M. Hasselmo, editors, Advances in Neural Information Processing Systems 8 (NIPS’95).
In Proceedings of the Second Berkeley Symposium on Mathematical Statistics and Probability , pages 481–492, Berkeley, Calif. University of California Press.
95  Kumar, A., Irsoy, O., Su, J., Bradbury, J., English, R., Pierce, B., Ondruska, P., Iyyer, M., Gulrajani, I., and Socher, R. (2015).
In , pages 1096––1103.NIPS’2008 480  Lappalainen, H., Giannakopoulos, X., Honkela, A., and Karhunen, J.
In Proceedings of the Computer Vision and Pattern Recognition Conference (CVPR’06), pages 87–94, Washington, DC, USA.
In J. Lafferty, C. K. I. Williams, J. Shawe-Taylor, R. Zemel, and A. Culotta, editors, Advances in Neural Information Processing Systems 23 (NIPS’10), pages 1279–1287.
In Cognitiva 85: A la Frontière de l’Intelligence Artificielle, des Sciences de la Connaissance et des Neurosciences, pages 599–604, Paris 1985.
In F. Fogelman- Soulié, E. Bienenstock, and G. Weisbuch, editors, Disordered Systems and Biological Organization , pages 233–240.
,330 352  751    BIBLIOGRAPHY  LeCun, Y., Jackel, L. D., Boser, B., Denker, J. S., Graf, H. P., Guyon, I., Henderson, D., Howard, R. E., and Hubbard, W. (1989).
In Circuits and Systems (ISCAS), Proceedings of 2010 IEEE International Symposium on , pages 253–256.
In B. Schölkopf, J. Platt, and T. Hoffman, editors, Advances in Neural Information Processing Systems 19 (NIPS’06), pages 801–808.
Convolutional deep belief networks for scalable unsupervised learning of hierarchical representations.
In L. Bottou and M. Littman, editors, Proceedings of the Twenty-sixth International Conference on Machine Learning (ICML’09).
Addison-Wesley Longman Publishing Co., Inc. 2  Leshno, M., Lin, V. Y., Pinkus, A., and Schocken, S. (1993).
Multilayer feedforward networks with a nonpolynomial activation function can approximate any function.
IEEE Transactions on Neural Networks, (6), 1329–1338.7 407  Lin, Y., Liu, Z., Sun, M., Liu, Y., and Zhu, X.
Third Workshop on Neural Networks: From Biology to High Energy Physics , pages 195––202, Isola d’Elba, Italy.
Computer Science Review, (3), 127–149.3 404  753    BIBLIOGRAPHY  Luo, H., Shen, R., Niu, C., and Ullrich, C. (2011).
Bounds for the computational power and learning complexity of analog neural nets (extended abstract).
Real-time computing without stable states: A new framework for neural computation based on perturbations.
Zeitschrift für Operations Research (Theory), , 517–545.36 276  Marlin, B. and de Freitas, N. (2011).
Asymptotic efficiency of deterministic estimators for discrete energy-based models: Ratio matching and pseudolikelihood.
,UAI’2011 617 619  754    BIBLIOGRAPHY  Marlin, B., Swersky, K., Chen, B., and de Freitas, N. (2010).
In Proceedings of The Thirteenth International Conference on Artificial Intelligence and Statistics (AISTATS’10), volume 9, pages 509–516.
In L. Bottou and M. Littman, editors, Proceedings of the Twenty-seventh International Conference on Machine Learning (ICML-10), pages 735–742.
686  755    BIBLIOGRAPHY  Mesnil, G., Dauphin, Y., Glorot, X., Rifai, S., Bengio, Y., Goodfellow, I., Lavoie, E., Muller, X., Desjardins, G., Warde-Farley, D., Vincent, P., Courville, A., and Bergstra, J.
Unsupervised and Transfer Learning , volume 7. , ,201 532 538  Mesnil, G., Rifai, S., Dauphin, Y., Bengio, Y., and Vincent, P. (2012).
Microsoft Research Cambridge UK Tech Rep MSRTR2005173 , (TR-2005-173).72 625  Minsky, M. L. and Papert, S. A.
In Z. Ghahramani, editor, Proceedings of the Twenty-fourth International Conference on Machine Learning (ICML’07), pages 641–648.
In D. Koller, D. Schuurmans, Y. Bengio, and L. Bottou, editors, Advances in Neural Information Processing Systems 21 (NIPS’08), pages 1081–1088.
In C. Burges, L. Bottou, M. Welling, Z. Ghahramani, and K. Weinberger, editors, Advances in Neural Information Processing Systems 26 , pages 2265–2273.
In Z. Ghahramani, M. Welling, C. Cortes, N. Lawrence, and K. Weinberger, editors, , pages 2204–2212.NIPS’2014 691  Mnih, V., Kavukcuoglo, K., Silver, D., Rusu, A.
A., Veness, J., Bellemare, M. G., Graves, A., Riedmiller, M., Fidgeland, A. K., Ostrovski, G., Petersen, S., Beattie, C., Sadik, A., Antonoglou, I., King, H., Kumaran, D., Wierstra, D., Legg, S., and Hassabis, D. (2015).
In L. Bottou and M. Littman, editors, Proceedings of the 26th International Conference on Machine Learning, pages 737–744, Montreal.
459  757    BIBLIOGRAPHY  Mohamed, A., Sainath, T. N., Dahl, G., Ramabhadran, B., Hinton, G. E., and Picheny, M. A.
In Acoustics, Speech and Signal Processing (ICASSP), 2011 IEEE International Conference on, pages 5060–5063.
In Acoustics, Speech and Signal Processing (ICASSP), 2012 IEEE International Conference on , pages 4273–4276.
In G. Montavon, G. Orr, and K.-R. Müller, editors, Neural Networks: Tricks of the Trade, volume 7700 of Lecture Notes in Computer Science , pages 621–637.
Refinements of universal approximation results for deep belief networks and restricted Boltzmann machines.
, ,NIPS’2014 19 199 200  Mor-Yosef, S., Samueloff, A., Modan, B., Navot, D., and Schenker, J. G. (1990).
In J. M. S. Hanson and R. Lippmann, editors, Advances in Neural Information Processing Systems 4 (NIPS’91), pages 275–282, San Mateo, CA.
In Y. Bengio, D. Schuurmans, J. D. Lafferty, C. K. I. Williams, and A. Culotta, editors, Advances in Neural Information Processing Systems 22 , pages 1339–1347.
Comparison of part-of- speech and automatically derived category-based language models for speech recognition.
A neurobiological model of visual attention and invariant pattern recognition based on dynamic routing of information.
Singer, and S. Roweis, editors, Advances in Neural Information Processing Systems 20 (NIPS’07), pages 1121–1128, Cambridge, MA.
Extracting distributed representations of concepts and relations from positive and negative propositions.
In Y. Bengio, D. Schuurmans, J. D. Lafferty, C. K. I. Williams, and A. Culotta, editors, Advances in Neural Information Processing Systems 22 , pages 1410–1418.
Orthogonal matching pursuit: Recursive function approximation with applications to wavelet decomposition.
In Pro- ceedings of the 27 th Annual Asilomar Conference on Signals, Systems, and Computers, pages 40–44.
In Proceedings of the 7th Conference of the Cognitive Science Society, University of California, Irvine, pages 329–334.
Journal of the Experimental Analysis of Behavior , (3), 317–328.82 328  Pham, D.-T., Garat, P., and Jutten, C. (1992).
In , pages 771–774.EUSIPCO 491  761    BIBLIOGRAPHY  Pham, P.-H., Jelaca, D., Farabet, C., Martini, B., LeCun, Y., and Culurciello, E. (2012).
In Circuits and Systems (MWS- CAS), 2012 IEEE 55th International Midwest Symposium on, pages 1044–1047.
Scaling up biologically-inspired computer vision: A case study in unconstrained face recognition on facebook.
In Computer Vision and Pattern Recognition Workshops (CVPRW), 2011 IEEE Computer Society Conference on, pages 35–42.
USSR Computational Mathematics and Mathematical Physics, (5), 1–17.4 296  Poole, B., Sohl-Dickstein, J., and Ganguli, S. (2014).
In Proceedings of the Twenty-seventh Conference in Uncertainty in Artificial Intelligence (UAI), Barcelona, Spain.
IEEE Transactions on Information Theory, (2), 69–72.4 689  Quiroga, R. Q., Reddy, L., Kreiman, G., Koch, C., and Fried, I.
In L. Bottou and M. Littman, editors, Proceedings of the Twenty-sixth International Conference on Machine Learning (ICML’09), pages 873–880, New York, NY, USA.
In R. B. Braithwaite, editor, The Foundations of Mathematics and other Logical Essays , chapter 7, pages 156–198.
Preprint:ICML’2014 arXiv:1401.4082. , ,652 689 696  Rifai, S., Vincent, P., Muller, X., Glorot, X., and Bengio, Y.
, ,ICML’2011 521 522 523  Rifai, S., Mesnil, G., Vincent, P., Muller, X., Bengio, Y., Dauphin, Y., and Glorot, X.
In T. Dietterich, S. Becker, and Z. Ghahramani, editors, Advances in Neural Information Processing Systems 14 (NIPS’01), Cambridge, MA.
, (4), 1151–1172.The Annals of Statistics 12 717  764    BIBLIOGRAPHY  Rumelhart, D., Hinton, G., and Williams, R. (1986a).
In D. E. Rumelhart and J. L. McClelland, editors, Parallel Distributed Processing, volume 1, chapter 8, pages 318–362.
17  Russakovsky, O., Deng, J., Su, H., Krause, J., Satheesh, S., Ma, S., Huang, Z., Karpathy, A., Khosla, A., Bernstein, M., Berg, A. C., and Fei-Fei, L. (2014a).
21  Russakovsky, O., Deng, J., Su, H., Krause, J., Satheesh, S., Ma, S., Huang, Z., Karpathy, A., Khosla, A., Bernstein, M., (2014b).
In Y. Bengio, D. Schuurmans, C. Williams, J. Lafferty, and A. Culotta, editors, Advances in Neural Information Processing Systems 22 (NIPS’09).
In Proceedings of the International Conference on Artificial Intelligence and Statistics, volume 5, pages 448–455.
In Proceedings of the Eleventh International Conference on Artificial Intelligence and Statistics (AISTATS’07), San Juan, Porto Rico.
Singer, and S. Roweis, editors, Advances in Neural Information Processing Systems 20 (NIPS’07), pages 1249–1256, Cambridge, MA.
In Proceedings of the Thirteenth International Conference on Artificial Intelligence and Statistics (AISTATS 2010), JMLR W&CP , volume 9, pages 693–700.
In W. W. Cohen, A. McCallum, and S. T. Roweis, editors, Proceedings of the Twenty-fifth International Conference on Machine Learning (ICML’08), volume 25, pages 872–879.
In D. Touretzky, M. Mozer, and M. Hasselmo, editors, Advances in Neural Information Processing Systems 8 (NIPS’95).
In M. Jordan, M. Kearns, and S. Solla, editors, Advances in Neural Information Processing Systems 10 (NIPS’97), pages 647–653.
In International Conference on Acoustics, Speech and Signal Processing (ICASSP), pages 765–768, Orlando, Florida.
American Institute of Physics Inc. 686  767    BIBLIOGRAPHY  Series, P., Reichert, D. P., and Storkey, A. J.
In D. E. Rumelhart and J. L. McClelland, editors, Parallel Distributed Processing , volume 1, chapter 6, pages 194–281.
401  Socher, R., Perelygin, A., Wu, J. Y., Chuang, J., Manning, C. D., Ng, A. Y., and Potts, C. (2013a).
Empirical risk minimization of graphical model parameters given approximate inference, decoding, and model structure.
In Proceedings of the 14th International Conference on Artificial Intelligence and Statistics (AISTATS) JMLR Workshop and Conference Proceedings, volume 15 of , pages 725–733, Fort Lauderdale.
of the International Conference on Artificial Intelligence and Statistics (AISTATS), volume 9, pages 789–795.
436  Szegedy, C., Liu, W., Jia, Y., Sermanet, P., Reed, S., Anguelov, D., Erhan, D., Vanhoucke, V., and Rabinovich, A.
Technical report, arXiv:1409.4842. , , , , , ,24 27 201 258 269 326 347  Szegedy, C., Zaremba, W., Sutskever, I., Bruna, J., Erhan, D., Goodfellow, I. J., and Fergus, R. (2014b).
In Proceedings of the 27th International Conference on Machine Learning, June 21-24, 2010, Haifa, Israel .
In L. Bottou and M. Littman, editors, Proceedings of the Twenty-sixth International Conference on Machine Learning (ICML’09), pages 1025–1032, Montreal, Quebec, Canada.
In B. Schölkopf, J. Platt, and T. Hoffman, editors, Advances in Neural Information Processing Systems 19 (NIPS’06), pages 1345–1352.
In W. W. Cohen, A. McCallum, and S. T. Roweis, editors, Pro- ceedings of the Twenty-fifth International Conference on Machine Learning (ICML’08), pages 1064–1071.
In L. Bottou and M. Littman, editors, Proceedings of the Twenty-sixth International Conference on Machine Learning (ICML’09), pages 1033–1040.
Journal of the Royal Statistical Society B , (3), 611–622.61 491  772    BIBLIOGRAPHY  Torralba, A., Fergus, R., and Weiss, Y.
In Proceedings of the 9th International Joint Conference on Artificial Intelligence - Volume 1 , IJCAI’85, pages 238–243, San Francisco, CA, USA.
In .IJCAI’2011 328  Turaga, S. C., Murray, J. F., Jain, V., Roth, F., Helmstaedter, M., Briggman, K., Denk, W., and Seung, H. S. (2010).
Stacked denoising autoencoders: Learning useful representations in a deep network with a local denoising criterion.
In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors, Advances in Neural Information Processing Systems 28 , pages 1108–1116.
Curran Associates, Inc. 466  Vinyals, O., Kaiser, L., Koo, T., Petrov, S., Sutskever, I., and Hinton, G. (2014a).
, ,ICLR’2014 262 266 267  Wawrzynek, J., Asanovic, K., Kingsbury, B., Johnson, D., Beck, J., and Morgan, N. (1996).
In S. Becker, S. Thrun, and K. Obermayer, editors, Advances in Neural Information Processing Systems 15 (NIPS’02), pages 665–672.
In L. Saul, Y. Weiss, and L. Bottou, editors, Advances in Neural Information Processing Systems 17 (NIPS’04), volume 17, Cambridge, MA.
In D. Touretzky, M. Mozer, and M. Hasselmo, editors, Advances in Neural Information Processing Systems 8 (NIPS’95), pages 514–520.
American Journal of Mathematical and Management Sciences, (3), 277––312.4 690  Wiskott, L. and Sejnowski, T. J.
265  Xu, K., Ba, J. L., Kiros, R., Cho, K., Courville, A., Salakhutdinov, R., Zemel, R. S., and Bengio, Y.
Neural networks , , 1–9.35 405  776    BIBLIOGRAPHY  Yosinski, J., Clune, J., Bengio, Y., and Lipson, H. (2014).
In .ECCV’14 6  Zeiler, M. D., Ranzato, M., Monga, R., Mao, M., Yang, K., Le, Q., Nguyen, P., Senior, A., Vanhoucke, V., Dean, J., and Hinton, G. E. (2013).
Deep supervised and convolutional generative stochastic network for protein secondary structure prediction.
                                     Index  0-1 loss, ,102 274  Absolute value rectification, 191 Accuracy, 420 Activation function, 169 Active constraint, 94 AdaGrad, 305 ADALINE, see adaptive linear element Adam, ,307 422 Adaptive linear element, , ,15 23 26 Adversarial example, 265 Adversarial training, , ,266 268 526 Affine, 109 AIS, see annealed importance sampling Almost everywhere, 70 Almost sure convergence, 128 Ancestral sampling, ,576 591 ANN, see Artificial neural network Annealed importance sampling,  , ,621 662  711 Approximate Bayesian computation, 710 Approximate inference, 579 Artificial intelligence, 1 Artificial neural network, see Neural net-  work ASR, see automatic speech recognition Asymptotically unbiased, 123 Audio, , ,101 357 455 Autoencoder, , ,4 353 498 Automatic speech recognition, 455  Back-propagation, 201 Back-propagation through time, 381 Backprop, see back-propagation  Bag of words, 467 Bagging, 252 Batch normalization, ,264 422 Bayes error, 116 Bayes’ rule, 69 Bayesian hyperparameter optimization, 433 Bayesian network, see directed graphical  model Bayesian probability, 54 Bayesian statistics, 134 Belief network, see directed graphical model Bernoulli distribution, 61 BFGS, 314 Bias, ,123 227 Bias parameter, 109 Biased importance sampling, 589 Bigram, 458 Binary relation, 478 Block Gibbs sampling, 595 Boltzmann distribution, 566 Boltzmann machine, ,566 648 BPTT, see back-propagation through time Broadcasting, 33 Burn-in, 593  CAE, see contractive autoencoder Calculus of variations, 178 Categorical distribution, see multinoulli dis-  tribution CD, see contrastive divergence Centering trick (DBM), 667 Central limit theorem, 63 Chain rule (calculus), 203 Chain rule of probability, 58  778    INDEX  Chess, 2 Chord, 575 Chordal graph, 575 Class-based language models, 460 Classical dynamical system, 372 Classification, 99 Clique potential, see factor (graphical model) CNN, see convolutional neural network Collaborative Filtering, 474 Collider, see explaining away Color images, 357 Complex cell, 362 Computational graph, 202 Computer vision, 449 Concept drift, 533 Condition number, 277 Conditional computation, see dynamic struc-  ture Conditional independence, ,xiii 59 Conditional probability, 58 Conditional RBM, 679 Connectionism, ,17 440 Connectionist temporal classification, 457 Consistency, ,128 509 Constrained optimization, ,92 235 Content-based addressing, 416 Content-based recommender systems, 475 Context-specific independence, 569 Contextual bandits, 476 Continuation methods, 324 Contractive autoencoder, 516 Contrast, 451 Contrastive divergence, , ,289 606 666 Convex optimization, 140 Convolution, ,327 677 Convolutional network, 16 Convolutional neural network, ,250 327, ,422  456 Coordinate descent, ,319 665 Correlation, 60 Cost function, see objective function Covariance, ,xiii 60 Covariance matrix, 61 Coverage, 421  Critical temperature, 599 Cross-correlation, 329 Cross-entropy, ,74 131 Cross-validation, 121 CTC, see connectionist temporal classifica-  tion Curriculum learning, 326 Curse of dimensionality, 153 Cyc, 2  D-separation, 568 DAE, see denoising autoencoder Data generating distribution, ,110 130 Data generating process, 110 Data parallelism, 444 Dataset, 103 Dataset augmentation, ,268 454 DBM, see deep Boltzmann machine DCGAN, , ,547 548 695 Decision tree, ,144 544 Decoder, 4 Deep belief network, , , , , ,26 525 626 651 654  678 686, Deep Blue, 2 Deep Boltzmann machine, , , , ,23 26 525 626  647 651 657 666 678, , , , Deep feedforward network, ,166 422 Deep learning, ,2 5 Denoising autoencoder, ,506 683 Denoising score matching, 615 Density estimation, 102 Derivative, ,xiii 82 Design matrix, 105 Detector layer, 336 Determinant, xii Diagonal matrix, 40 Differential entropy, ,73 641 Dirac delta function, 64 Directed graphical model, , , ,76 503 559 685 Directional derivative, 84 Discriminative fine-tuning, see supervised  fine-tuning Discriminative RBM, 680 Distributed representation, , ,17 149 542 Domain adaptation, 532  779    INDEX  Dot product, ,33 139 Double backprop, 268 Doubly block circulant matrix, 330 Dream sleep, ,605 647 DropConnect, 263 Dropout, , , , , ,255 422 427 428 666 683 Dynamic structure, 445  E-step, 629 Early stopping, , , , ,244 246 270 271 422 EBM, see energy-based model Echo state network, , ,23 26 401 Effective capacity, 113 Eigendecomposition, 41 Eigenvalue, 41 Eigenvector, 41 ELBO, see evidence lower bound Element-wise product, see Hadamard prod-  uct, see Hadamard product EM, see expectation maximization Embedding, 512 Empirical distribution, 65 Empirical risk, 274 Empirical risk minimization, 274 Encoder, 4 Energy function, 565 Energy-based model, , , ,565 591 648 657 Ensemble methods, 252 Epoch, 244 Equality constraint, 93 Equivariance, 335 Error function, see objective function ESN, see echo state network Euclidean norm, 38 Euler-Lagrange equation, 641 Evidence lower bound, ,628 655 Example, 98 Expectation, 59 Expectation maximization, 629 Expected value, see expectation Explaining away, , ,570 626 639 Exploitation, 477 Exploration, 477 Exponential distribution, 64  F-score, 420 Factor (graphical model), 563 Factor analysis, 486 Factor graph, 575 Factors of variation, 4 Feature, 98 Feature selection, 234 Feedforward neural network, 166 Fine-tuning, 321 Finite differences, 436 Forget gate, 304 Forward propagation, 201 Fourier transform, ,357 359 Fovea, 363 FPCD, 610 Free energy, ,567 674 Freebase, 479 Frequentist probability, 54 Frequentist statistics, 134 Frobenius norm, 45 Fully-visible Bayes network, 699 Functional derivatives, 640 FVBN, see fully-visible Bayes network  Gabor function, 365 GANs, see generative adversarial networks Gated recurrent unit, 422 Gaussian distribution, see normal distribu-  tion Gaussian kernel, 140 Gaussian mixture, ,66 187 GCN, see global contrast normalization GeneOntology, 479 Generalization, 109 Generalized Lagrange function, see general-  ized Lagrangian Generalized Lagrangian, 93 Generative adversarial networks, ,683 693 Generative moment matching networks, 696 Generator network, 687 Gibbs distribution, 564 Gibbs sampling, ,577 595 Global contrast normalization, 451 GPU, see graphics processing unit Gradient, 83  780    INDEX  Gradient clipping, ,287 411 Gradient descent, ,82 84 Graph, xii Graphical model, see structured probabilis-  tic model Graphics processing unit, 441 Greedy algorithm, 321 Greedy layer-wise unsupervised pretraining,  524 Greedy supervised pretraining, 321 Grid search, 429  Hadamard product, ,xii 33 Hard ,tanh 195 Harmonium, see restricted Boltzmann ma-  chine Harmony theory, 567 Helmholtz free energy, see evidence lower  bound Hessian, 221 Hessian matrix, ,xiii 86 Heteroscedastic, 186 Hidden layer, ,6 166 Hill climbing, 85 Hyperparameter optimization, 429 Hyperparameters, ,119 427 Hypothesis space, ,111 117  i.i.d.
assumptions, , ,110 121 265 Identity matrix, 35 ILSVRC, see ImageNet Large Scale Visual  Recognition Challenge ImageNet Large Scale Visual Recognition  Challenge, 22 Immorality, 573 Importance sampling, , ,588 620 691 Importance weighted autoencoder, 691 Independence, ,xiii 59 Independent and identically distributed, see  i.i.d.
assumptions Independent component analysis, 487 Independent subspace analysis, 489 Inequality constraint, 93 Inference, , , , , , , ,558 579 626 628 630 633 643  646  Information retrieval, 520 Initialization, 298 Integral, xiii Invariance, 339 Isotropic, 64  Jacobian matrix, , ,xiii 71 85 Joint probability, 56  k-means, ,361 542 k-nearest neighbors, ,141 544 Karush-Kuhn-Tucker conditions, ,94 235 Karush–Kuhn–Tucker, 93 Kernel (convolution), ,328 329 Kernel machine, 544 Kernel trick, 139 KKT, see Karush–Kuhn–Tucker KKT conditions, see Karush-Kuhn-Tucker  conditions KL divergence, see Kullback-Leibler diver-  gence Knowledge base, ,2 479 Krylov methods, 222 Kullback-Leibler divergence, ,xiii 73  Label smoothing, 241 Lagrange multipliers, ,93 641 Lagrangian, see generalized Lagrangian LAPGAN, 695 Laplace distribution, ,64 492 Latent variable, 66 Layer (neural network), 166 LCN, see local contrast normalization Leaky ReLU, 191 Leaky units, 404 Learning rate, 84 Line search, , ,84 85 92 Linear combination, 36 Linear dependence, 37 Linear factor models, 485 Linear regression, , ,106 109 138 Link prediction, 480 Lipschitz constant, 91 Lipschitz continuous, 91 Liquid state machine, 401  781    INDEX  Local conditional probability distribution, 560  Local contrast normalization, 452 Logistic regression, , ,3 138 139 Logistic sigmoid, ,7 66 Long short-term memory, , , ,18 24 304 407,  422 Loop, 575 Loopy belief propagation, 581 Loss function, see objective function Lp norm, 38 LSTM, see long short-term memory  M-step, 629 Machine learning, 2 Machine translation, 100 Main diagonal, 32 Manifold, 159 Manifold hypothesis, 160 Manifold learning, 160 Manifold tangent classifier, 268 MAP approximation, ,137 501 Marginal probability, 57 Markov chain, 591 Markov chain Monte Carlo, 591 Markov network, see undirected model Markov random field, see undirected model Matrix, , ,xi xii 31 Matrix inverse, 35 Matrix product, 33 Max norm, 39 Max pooling, 336 Maximum likelihood, 130 Maxout, ,191 422 MCMC, see Markov chain Monte Carlo Mean field, , ,633 634 666 Mean squared error, 107 Measure theory, 70 Measure zero, 70 Memory network, ,413 415 Method of steepest descent, see gradient  descent Minibatch, 277 Missing inputs, 99 Mixing (Markov chain), 597  Mixture density networks, 187 Mixture distribution, 65 Mixture model, ,187 506 Mixture of experts, ,446 544 MLP, see multilayer perception MNIST, , ,20 21 666 Model averaging, 252 Model compression, 444 Model identifiability, 282 Model parallelism, 444 Moment matching, 696 Moore-Penrose pseudoinverse, ,44 237 Moralized graph, 573 MP-DBM, see multi-prediction DBM MRF (Markov Random Field), see undi-  rected model MSE, see mean squared error Multi-modal learning, 535 Multi-prediction DBM, 668 Multi-task learning, ,242 533 Multilayer perception, 5 Multilayer perceptron, 26 Multinomial distribution, 61 Multinoulli distribution, 61  n-gram, 458 NADE, 702 Naive Bayes, 3 Nat, 72 Natural image, 555 Natural language processing, 457 Nearest neighbor regression, 114 Negative definite, 88 Negative phase, , ,466 602 604 Neocognitron, , , ,16 23 26 364 Nesterov momentum, 298 Netflix Grand Prize, ,255 475 Neural language model, ,460 472 Neural network, 13 Neural Turing machine, 415 Neuroscience, 15 Newton’s method, ,88 309 NLM, see neural language model NLP, see natural language processing No free lunch theorem, 115  782    INDEX  Noise-contrastive estimation, 616 Non-parametric model, 113 Norm, ,xiv 38 Normal distribution, , ,62 63 124 Normal equations, , , ,108 108 111 232 Normalized initialization, 301 Numerical differentiation, see finite differ-  ences  Object detection, 449 Object recognition, 449 Objective function, 81 OMP- ,k see orthogonal matching pursuit One-shot learning, 534 Operation, 202 Optimization, ,79 81 Orthodox statistics, see frequentist statistics Orthogonal matching pursuit, ,26 252 Orthogonal matrix, 41 Orthogonality, 40 Output layer, 166  Parallel distributed processing, 17 Parameter initialization, ,298 403 Parameter sharing, , , , ,249 332 370 372 386 Parameter tying, see Parameter sharing Parametric model, 113 Parametric ReLU, 191 Partial derivative, 83 Partition function, , ,564 601 663 PCA, see principal components analysis PCD, see stochastic maximum likelihood Perceptron, ,15 26 Persistent contrastive divergence, see stochas-  tic maximum likelihood Perturbation analysis, see reparametrization  trick Point estimator, 121 Policy, 476 Pooling, ,327 677 Positive definite, 88 Positive phase, , , , ,466 602 604 650 662 Precision, 420 Precision (of a normal distribution), ,62 64 Predictive sparse decomposition, 519  Preprocessing, 450 Pretraining, ,320 524 Primary visual cortex, 362 Principal components analysis, , , ,47 145 146  486 626, Prior probability distribution, 134 Probabilistic max pooling, 677 Probabilistic PCA, , ,486 487 627 Probability density function, 57 Probability distribution, 55 Probability mass function, 55 Probability mass function estimation, 102 Product of experts, 566 Product rule of probability, see chain rule  of probability PSD, see predictive sparse decomposition Pseudolikelihood, 611  Quadrature pair, 366 Quasi-Newton methods, 314  Radial basis function, 195 Random search, 431 Random variable, 55 Ratio matching, 614 RBF, 195 RBM, see restricted Boltzmann machine Recall, 420 Receptive field, 334 Recommender Systems, 474 Rectified linear unit, , , ,170 191 422 503 Recurrent network, 26 Recurrent neural network, 375 Regression, 99 Regularization, , , , ,119 119 176 226 427 Regularizer, 118 REINFORCE, 683 Reinforcement learning, , , ,24 105 476 683 Relational database, 479 Relations, 478 Reparametrization trick, 682 Representation learning, 3 Representational capacity, 113 Restricted Boltzmann machine,  ,  ,353 456  475 583 626 650 651 666 670, , , , , , ,  783    INDEX  672 674 677, , Ridge regression, see weight decay Risk, 273 RNN-RBM, 679  Saddle points, 283 Sample mean, 124 Scalar, , ,xi xii 30 Score matching, ,509 613 Second derivative, 85 Second derivative test, 88 Self-information, 72 Semantic hashing, 521 Semi-supervised learning, 241 Separable convolution, 359 Separation (probabilistic modeling), 568 Set, xii SGD, see stochastic gradient descent Shannon entropy, ,xiii 73 Shortlist, 462 Sigmoid, ,xiv see logistic sigmoid Sigmoid belief network, 26 Simple cell, 362 Singular value, see singular value decompo-  sition Singular value decomposition, , ,43 146 475 Singular vector, see singular value decom-  position Slow feature analysis, 489 SML, see stochastic maximum likelihood Softmax, , ,182 415 446 Softplus, , ,xiv 67 195 Spam detection, 3 Sparse coding, , , , ,319 353 492 626 686 Sparse initialization, ,302 403 Sparse representation, , , , ,145 224 251 501  552 Spearmint, 433 Spectral radius, 401 Speech recognition, see automatic speech  recognition Sphering, see whitening Spike and slab restricted Boltzmann ma-  chine, 674 SPN, see sum-product network  Square matrix, 37 ssRBM, see spike and slab restricted Boltz-  mann machine Standard deviation, 60 Standard error, 126 Standard error of the mean, ,126 276 Statistic, 121 Statistical learning theory, 109 Steepest descent, see gradient descent Stochastic back-propagation, see reparametriza-  tion trick Stochastic gradient descent, , , ,15 149 277  292, 666 Stochastic maximum likelihood, ,608 666 Stochastic pooling, 263 Structure learning, 578 Structured output, ,100 679 Structured probabilistic model, ,76 554 Sum rule of probability, 57 Sum-product network, 549 Supervised fine-tuning, ,525 656 Supervised learning, 104 Support vector machine, 139 Surrogate loss function, 274 SVD, see singular value decomposition Symmetric matrix, ,40 42  Tangent distance, 267 Tangent plane, 511 Tangent prop, 267 TDNN, see time-delay neural network Teacher forcing, ,379 380 Tempering, 599 Template matching, 140 Tensor, , ,xi xii 32 Test set, 109 Tikhonov regularization, see weight decay Tiled convolution, 349 Time-delay neural network, ,364 371 Toeplitz matrix, 330 Topographic ICA, 489 Trace operator, 45 Training error, 109 Transcription, 100 Transfer learning, 532  784    INDEX  Transpose, ,xii 32 Triangle inequality, 38 Triangulated graph, see chordal graph Trigram, 458  Unbiased, 123 Undirected graphical model, ,76 503 Undirected model, 562 Uniform distribution, 56 Unigram, 458 Unit norm, 40 Unit vector, 40 Universal approximation theorem, 196 Universal approximator, 549 Unnormalized probability distribution, 563 Unsupervised learning, ,104 144 Unsupervised pretraining, ,456 524  V-structure, see explaining away V1, 362 VAE, see variational autoencoder Vapnik-Chervonenkis dimension, 113 Variance, , ,xiii 60 227 Variational autoencoder, ,683 690 Variational derivatives, see functional deriva-  tives Variational free energy, see evidence lower  bound VC dimension, see Vapnik-Chervonenkis di-  mension Vector, , ,xi xii 31 Virtual adversarial examples, 266 Visible layer, 6 Volumetric data, 357  Wake-sleep, ,646 655 Weight decay, , , ,117 176 229 428 Weight space symmetry, 282 Weights, ,15 106 Whitening, 452 Wikibase, 479 Wikibase, 479 Word embedding, 460 Word-sense disambiguation, 480 WordNet, 479  Zero-data learning, see zero-shot learning Zero-shot learning, 534  785
                                     Acknowledgments  This book would not have been possible without the contributions of many people.
We would like to thank those who commented on our proposal for the book and helped plan its contents and organization: Guillaume Alain, Kyunghyun Cho, Çağlar Gülçehre, David Krueger, Hugo Larochelle, Razvan Pascanu and Thomas Rohée.
Some offered feedback on many chapters: Martín Abadi, Guillaume Alain, Ion Androutsopoulos, Fred Bertsch, Olexa Bilaniuk, Ufuk Can Biçici, Matko Bošnjak, John Boersma, Greg Brockman, Alexandre de Brébisson, Pierre Luc Carrier, Sarath Chandar, Pawel Chilinski, Mark Daoust, Oleg Dashevskii, Laurent Dinh, Stephan Dreseitl, Jim Fan, Miao Fan, Meire Fortunato, Frédéric Francis,  Nando de Freitas, Çağlar Gülçehre, Jurgen Van Gael, Javier Alonso García, Jonathan Hunt, Gopi Jeyaram, Chingiz Kabytayev, Lukasz Kaiser, Varun Kanade, Asifullah Khan, Akiel Khan, John King, Diederik P. Kingma, Yann LeCun, Rudolf Mathey, Matías Mattamala, Abhinav Maurya, Kevin Murphy, Oleg Mürk, Roman Novak, Augustus Q. Odena, Simon Pavlik, Karl Pichotta, Eddie Pierce, Kari Pulli, Roussel Rahman, Tapani Raiko, Anurag Ranjan, Johannes Roith, Mihaela Rosca, Halis Sak, César Salgado, Grigory Sapunov, Yoshinori Sasaki, Mike Schuster, Julian Serban, Nir Shabat, Ken Shirriff, Andre Simpelo, Scott Stanley, David Sussillo, Ilya Sutskever, Carles Gelada Sáez, Graham Taylor, Valentin Tolmer, Massimiliano Tomassoli, An Tran, Shubhendu Trivedi, Alexey Umnov, Vincent Vanhoucke, Marco Visentini-Scarzanella, Martin Vita, David Warde-Farley, Dustin Webb, Kelvin Xu, Wei Xue, Ke Yang, Li Yao, Zygmunt Zając and Ozan Çağlayan.
We would also like to thank those who provided us with useful feedback on individual chapters:  • Notation: Zhang Yuanhang.
• Chapter , : Yusuf Akgul, Sebastien Bratieres, Samira Ebrahimi,1 Introduction viii    CONTENTS  Charlie Gorichanaz, Brendan Loudermilk, Eric Morris, Cosmin Pârvulescu and Alfredo Solano.
• Chapter , : Amjad Almahairi, Nikola Banić, Kevin Bennett,2 Linear Algebra Philippe Castonguay, Oscar Chang, Eric Fosler-Lussier, Andrey Khalyavin,  Sergey Oreshkov, István Petrás, Dennis Prangle, Thomas Rohée, Gitanjali Gulve Sehgal, Colby Toland, Alessandro Vitale and Bob Welland.
• Chapter , : John Philip Anderson, Kai3 Probability and Information Theory Arulkumaran, Vincent Dumoulin, Rui Fa, Stephan Gouws, Artem Oboturov, Antti Rasmus, Alexey Surkov and Volker Tresp.
• Chapter , : Dzmitry Bahdanau, Justin Domingue,5 Machine Learning Basics Nikhil Garg, Makoto Otsuka, Bob Pepin, Philip Popien, Emmanuel Rayner, Peter Shepard, Kee-Bong Song, Zheng Sun and Andy Wu.
• Chapter ,6 Deep Feedforward Networks: Uriel Berdugo, Fabrizio Bottarel, Elizabeth Burl, Ishan Durugkar, Jeff Hlywa, Jong Wook Kim, David Krueger and Aditya Kumar Praharaj.
• Chapter , : Morten Kolbæk, Kshitij Lauria,7 Regularization for Deep Learning Inkyu Lee, Sunil Mohan, Hai Phong Phan and Joshua Salisbury.
• Chapter ,8 Optimization for Training Deep Models: Marcel Ackermann, Peter Armitage, Rowel Atienza, Andrew Brock, Tegan Maharaj, James Martens, Kashif Rasul, Klaus Strobl and Nicholas Turner.
• Chapter ,9 Convolutional Networks: Martín Arjovsky, Eugene Brevdo, Kon- stantin Divilov, Eric Jensen, Mehdi Mirza, Alex Paino, Marjorie Sayer, Ryan  Stout and Wentao Wu.
• Chapter ,10 Sequence Modeling: Recurrent and Recursive Nets: Gökçen Eraslan, Steven Hickson, Razvan Pascanu, Lorenzo von Ritter, Rui Rodrigues, Dmitriy Serdyuk, Dongyu Shi and Kaiyu Yang.
• Chapter , : Daniel Beckstein.11 Practical Methodology  • Chapter , : George Dahl, Vladimir Nekrasov and Ribana12 Applications Roscher.
ix    CONTENTS  • Chapter , : Kunal Ghosh.15 Representation Learning  • Chapter , : Minh Lê16 Structured Probabilistic Models for Deep Learning and Anton Varfolom.
• Chapter , : Yujia Bao.19 Approximate Inference  • Chapter ,20 Deep Generative Models: Nicolas Chapados, Daniel Galvez, Wenming Ma, Fady Medhat, Shakir Mohamed and Grégoire Montavon.
We also want to thank those who allowed us to reproduce images, figures or data from their publications.
We would like to thank Lu Wang for writing pdf2htmlEX, which we used to make the web version of the book, and for offering support to improve the quality of the resulting HTML.
We would like to thank Ian’s wife Daniela Flori Goodfellow for patiently supporting Ian during the writing of the book as well as for help with proofreading.
We would like to thank the Google Brain team for providing an intellectual environment where Ian could devote a tremendous amount of time to writing this book and receive feedback and guidance from colleagues.
We would especially like  to thank Ian’s former manager, Greg Corrado, and his current manager, Samy Bengio, for their support of this project.
                                     Notation  This section provides a concise reference describing the notation used throughout  this book.
If you are unfamiliar with any of the corresponding mathematical concepts, we describe most of these ideas in chapters 2–4.
Numbers and Arrays  a A scalar (integer or real)  a A vector  A A matrix  A A tensor  In Identity matrix with rows and columnsn n  I Identity matrix with dimensionality implied by context  e( )i Standard basis vector [0, .
, 0] with a 1 at position i  diag( )a A square, diagonal matrix with diagonal entries given by a  a A scalar random variable  a A vector-valued random variable  A A matrix-valued random variable  xi    CONTENTS  Sets and Graphs  A A set  R The set of real numbers  { }0 1, The set containing 0 and 1  { }0 1, , .
, n The set of all integers between and0 n  [ ]a, b The real interval including anda b  ( ]a, b The real interval excluding but includinga b  A B\ Set subtraction, i.e., the set containing the ele- ments of that are not inA B  G A graph  PaG(xi) The parents of xi in G  Indexing  ai Element i of vector a, with indexing starting at 1  a−i All elements of vector except for elementa i  Ai,j Element of matrixi, j A  Ai,: Row of matrixi A  A:,i Column of matrixi A  Ai,j,k Element of a 3-D tensor( )i, j, k A  A: :, ,i 2-D slice of a 3-D tensor  ai Element of the random vectori a  Linear Algebra Operations  A Transpose of matrix A  A+ Moore-Penrose pseudoinverse of A  A B Element-wise (Hadamard) product of andA B  det( )A Determinant of A  xii    CONTENTS  Calculus dy  dx Derivative of with respect toy x  ∂y  ∂x Partial derivative of with respect toy x  ∇xy Gradient of with respect toy x  ∇Xy Matrix derivatives of with respect toy X  ∇Xy Tensor containing derivatives of y with respect to X  ∂f  ∂x Jacobian matrix J ∈ Rm n× of f : Rn → Rm  ∇2xf f f( ) (x or H )( )x The Hessian matrix of at input point x f d( )x x Definite integral over the entire domain of x    S  f d( )x x xDefinite integral with respect to over the set S  Probability and Information Theory  a b The random variables a and b are independent⊥  a b c They are conditionally independent given c⊥ |  P ( )a A probability distribution over a discrete variable  p( )a A probability distribution over a continuous vari- able, or over a variable whose type has not been specified  a Random variable a has distribution∼ P P  Ex∼P [ ( )] ( ) ( ) ( )f x or Ef x Expectation of f x with respect to P x  Var( ( ))f x Variance of under xf x( ) P ( )  Cov( ( ) ( ))f x , g x Covariance of and under xf x( ) g x( ) P ( )  H( )x Shannon entropy of the random variable x  DKL( )P Q Kullback-Leibler divergence of P and Q  N ( ; )x µ,Σ Gaussian distribution over x with mean µ and covariance Σ  xiii    CONTENTS  Functions  f f: A B→ The function with domain and rangeA B  f g f g◦ Composition of the functions and  f( ; )x θ A function of x parametrized by θ.
(Sometimes we write f(x) and omit the argument θ to lighten notation)  logx xNatural logarithm of  σ x( ) Logistic sigmoid, 1  1 + exp( )−x ζ x x( ) log(1 + exp(Softplus, ))  || ||x p Lp norm of x  || ||x L2 norm of x  x+ Positive part of , i.e.,x max(0 ), x  1condition is 1 if the condition is true, 0 otherwise  Sometimes we use a function f whose argument is a scalar but apply it to a vector, matrix, or tensor: f (x), f(X), or f (X).
For example, if C = σ(X), then C i,j,k = σ(Xi,j,k) for all valid values of , and .i j k  Datasets and Distributions  pdata The data generating distribution  p̂data The empirical distribution defined by the training set  X A set of training examples  x( )i The -th example (input) from a dataseti  y( )i or y( )i The target associated with x( )i for supervised learn- ing  X The m n× matrix with input example x( )i in row Xi,:  xiv
                                     Chapter 1  Introduction  Inventors have long dreamed of creating machines that think.
The mythical figures Pygmalion, Daedalus, and Hephaestus may all be interpreted as legendary inventors, and Galatea, Talos, and Pandora may all be regarded as artificial life ( ,Ovid and Martin  2004 Sparkes 1996 Tandy 1997; , ; , ).
When programmable computers were first conceived, people wondered whether such machines might become intelligent, over a hundred years before one was built (Lovelace 1842, ).
Today, artificial intelligence (AI) is a thriving field with many practical applications and active research topics.
We look to intelligent software to automate routine labor, understand speech or images, make diagnoses in medicine and support basic scientific research.
In the early days of artificial intelligence, the field rapidly tackled and solved problems that are intellectually difficult for human beings but relatively straight- forward for computers—problems that can be described by a list of formal, math- ematical rules.
The true challenge to artificial intelligence proved to be solving  the tasks that are easy for people to perform but hard for people to describe formally—problems that we solve intuitively, that feel automatic, like recognizing spoken words or faces in images.
This solution is to allow computers to learn from experience and understand the world in terms of a hierarchy of concepts, with each concept defined in terms of its relation to simpler concepts.
By gathering knowledge from experience, this approach avoids the need for human operators to formally specify all of the knowledge that the computer needs.
The hierarchy of concepts allows the computer to learn complicated concepts by building them out of simpler ones.
For this reason, we call this approach to AI .deep learning  Many of the early successes of AI took place in relatively sterile and formal environments and did not require computers to have much knowledge about the world.
For example, IBM’s Deep Blue chess-playing system defeated world champion Garry Kasparov in 1997 ( , ).
Chess is of course a very simpleHsu 2002 world, containing only sixty-four locations and thirty-two pieces that can move in only rigidly circumscribed ways.
Devising a successful chess strategy is a  tremendous accomplishment, but the challenge is not due to the difficulty of describing the set of chess pieces and allowable moves to the computer.
Chess can be completely described by a very brief list of completely formal rules, easily provided ahead of time by the programmer.
Ironically, abstract and formal tasks that are among the most difficult mental undertakings for a human being are among the easiest for a computer.
Computers have long been able to defeat even the best human chess player, but are only recently matching some of the abilities of average human beings to recognize objects or speech.
Much of this knowledge is subjective and intuitive, and therefore difficult to articulate in a formal way.
One of the key challenges in artificial intelligence is how to get this informal knowledge into a computer.
Several artificial intelligence projects have sought to hard-code knowledge about the world in formal languages.
A computer can reason about statements in these formal languages automatically using logical inference rules.
For example, Cyc failed to understand a story  about a person named Fred shaving in the morning ( , ).
Its inferenceLinde 1992 engine detected an inconsistency in the story: it knew that people do not have electrical parts, but because Fred was holding an electric razor, it believed the entity “FredWhileShaving” contained electrical parts.
The difficulties faced by systems relying on hard-coded knowledge suggest that AI systems need the ability to acquire their own knowledge, by extracting patterns from raw data.
INTRODUCTION  introduction of machine learning allowed computers to tackle problems involving knowledge of the real world and make decisions that appear subjective.
A simple machine learning algorithm called logistic regression can determine whether to recommend cesarean delivery (Mor-Yosef 1990et al., ).
A simple machine learning algorithm called naive Bayes can separate legitimate e-mail from spam e-mail.
The performance of these simple machine learning algorithms depends heavily on the representation of the data they are given.
For example, when logistic regression is used to recommend cesarean delivery, the AI system does not examine  the patient directly.
Instead, the doctor tells the system several pieces of relevant information, such as the presence or absence of a uterine scar.
Logistic regression learns how each of these features of the patient correlates with various outcomes.
If logistic regression was given an MRI scan of the patient, rather than the doctor’s formalized report, it would not be able to make useful predictions.
Individual pixels in an MRI scan have negligible correlation with any complications that might occur during delivery.
This dependence on representations is a general phenomenon that appears throughout computer science and even daily life.
In computer science, opera-  tions such as searching a collection of data can proceed exponentially faster if the collection is structured and indexed intelligently.
People can easily perform arithmetic on Arabic numerals, but find arithmetic on Roman numerals much more time-consuming.
It is not surprising that the choice of representation has an enormous effect on the performance of machine learning algorithms.
For a simple visual example, see figure .1.1  Many artificial intelligence tasks can be solved by designing the right set of features to extract for that task, then providing these features to a simple machine learning algorithm.
For example, a useful feature for speaker identification from sound is an estimate of the size of speaker’s vocal tract.
A wheel has a simple geometric shape but its image may be complicated by shadows falling on the wheel, the sun glaring off the metal parts of the wheel, the fender of the car or an object in the foreground obscuring part of the wheel, and so on.
INTRODUCTION              Figure 1.1: Example of different representations: suppose we want to separate two categories of data by drawing a line between them in a scatterplot.
In the plot on the left, we represent some data using Cartesian coordinates, and the task is impossible.
In the plot on the right, we represent the data with polar coordinates and the task becomes simple to solve with a vertical line.
One solution to this problem is to use machine learning to discover not only the mapping from representation to output but also the representation itself.
Learned representations often result in much better performance than can be obtained with hand-designed representations.
A representation learning algorithm can discover a good set of features for a simple task in minutes, or a complex task in hours to months.
Manually designing features for a complex task requires a great deal of human time and effort; it can take decades for an entire community of researchers.
An autoencoder is the combination of an encoder function that  converts the input data into a different representation, and a decoder function that converts the new representation back into the original format.
Autoencoders are trained to preserve as much information as possible when an input is run through the encoder and then the decoder, but are also trained to make the new representation have various nice properties.
When designing features or algorithms for learning features, our goal is usually to separate the factors of variation that explain the observed data.
In this context, we use the word “factors” simply to refer to separate sources of influence; the factors are usually not combined by multiplication.
Instead, they may exist either as unobserved objects or unobserved forces in the physical world that affect observable quantities.
They may also exist as constructs in the human mind that provide useful simplifying explanations or inferred causes of the observed data.
They can be thought of as concepts or abstractions that help us make sense of the rich variability in the data.
When analyzing a speech recording, the factors of variation include the speaker’s age, their sex, their accent and the words that they are speaking.
When analyzing an image of a car, the factors of variation include the position of the car, its color,  and the angle and brightness of the sun.
A major source of difficulty in many real-world artificial intelligence applications is that many of the factors of variation influence every single piece of data we are able to observe.
Most applications require us to the factors of variation and discard thedisentangle ones that we do not care about.
Many of these factors of variation, such as a speaker’s accent, can be identified only using sophisticated, nearly human-level understanding of the data.
When it is nearly as difficult to obtain a representation as to solve the  original problem, representation learning does not, at first glance, seem to help us.
Deep learning solves this central problem in representation learning by intro- ducing representations that are expressed in terms of other, simpler representations.
Figure shows how a deep learning system can represent the concept of1.2 an image of a person by combining simpler concepts, such as corners and contours, which are in turn defined in terms of edges.
The quintessential example of a deep learning model is the feedforward deep network or multilayer perceptron (MLP).
A multilayer perceptron is just a mathematical function mapping some set of input values to output values.
We can think of each  application of a different mathematical function as providing a new representation of the input.
The idea of learning the right representation for the data provides one perspec- tive on deep learning.
Another perspective on deep learning is that depth allows the computer to learn a multi-step computer program.
Each layer of the representation can be thought of as the state of the computer’s memory after executing another set of instructions in parallel.
INTRODUCTION  Visible layer  (input pixels)  1st hidden layer  (edges)  2nd hidden layer  (corners and  contours)  3rd hidden layer  (object parts)  CAR PERSON ANIMAL Output  (object identity)  Figure 1.2: Illustration of a deep learning model.
It is difficult for a computer to understand the meaning of raw sensory input data, such as this image represented as a collection of pixel values.
Deep learning resolves this difficulty by breaking the desired complicated mapping into a series of nested simple mappings, each described by a different layer of the model.
The input is presented at the visible layer, so named because it contains the variables that we are able to observe.
These layers are called “hidden” because their values are not given in the data; instead the model must determine which concepts are useful for explaining the relationships in the observed data.
Given the pixels, the first layer can easily identify edges, by comparing the brightness of neighboring pixels.
Given the first hidden layer’s description of the edges, the second hidden layer can easily search for corners and extended contours, which are recognizable as collections of edges.
Given the second hidden layer’s description of the image in terms of corners and contours, the third hidden layer can detect entire parts of specific objects, by finding specific collections of contours and corners.
Finally, this description of the image in terms of the object parts it contains can be used to recognize the objects present in the image.
INTRODUCTION  x1x1  σ  w1w1  × x2x2w2w2  × +  Element  Set  +  × σ  xxww  Element  Set  Logistic  Regression  Logistic  Regression  Figure 1.3: Illustration of computational graphs mapping an input to an output where each node performs an operation.
Depth is the length of the longest path from input to output but depends on the definition of what constitutes a possible computational step.
The computation depicted in these graphs is the output of a logistic regression model, σ(wTx), where σ is the logistic sigmoid function.
If we use addition, multiplication and logistic sigmoids as the elements of our computer language, then this model has depth three.
According to this view of deep learning, not all of the information in a layer’s activations necessarily encodes factors of variation that explain the input.
The representation also stores state information that helps to execute a program that can make sense of the input.
It has nothing to do with the content of the input specifically, but it helps the model to organize its processing.
The first view is based on the number of sequential instructions that must be executed to evaluate the architecture.
We can think of this as the length of the longest path through  a flow chart that describes how to compute each of the model’s outputs given its inputs.
Just as two equivalent computer programs will have different lengths depending on which language the program is written in, the same function may be drawn as a flowchart with different depths depending on which functions we allow to be used as individual steps in the flowchart.
Figure illustrates how this1.3 choice of language can give two different measurements for the same architecture.
Another approach, used by deep probabilistic models, regards the depth of a model as being not the depth of the computational graph but the depth of the graph describing how concepts are related to each other.
INTRODUCTION  of the flowchart of the computations needed to compute the representation of each concept may be much deeper than the graph of the concepts themselves.
This is because the system’s understanding of the simpler concepts can be refined given information about the more complex concepts.
For example, an AI system observing an image of a face with one eye in shadow may initially only see one eye.
After detecting that a face is present, it can then infer that a second eye is probably present as well.
In this case, the graph of concepts only includes two layers—a layer for eyes and a layer for faces—but the graph of computations includes 2n layers if we refine our estimate of each concept given the other times.n  Because it is not always clear which of these two views—the depth of the computational graph, or the depth of the probabilistic modeling graph—is most relevant, and because different people choose different sets of smallest elements from which to construct their graphs, there is no single correct value for the depth of an architecture, just as there is no single correct value for the length of a computer program.
Nor is there a consensus about how much depth a model requires to qualify as “deep.” However, deep learning can safely be regarded as the study of models that either involve a greater amount of composition of learned functions or learned concepts than traditional machine learning does.
Specifically, it is a type of machine learning, a technique that allows computer systems to improve with experience and data.
According to the authors of this book, machine learning is the only viable approach to building AI systems that can operate in complicated, real-world environments.
Deep learning is a particular kind of machine learning that achieves great power and flexibility by learning to represent the world as a nested hierarchy of concepts, with each concept defined in relation to simpler concepts, and more abstract representations computed in terms of less abstract ones.
This book can be useful for a variety of readers, but we wrote it with two main target audiences in mind.
One of these target audiences is university students (undergraduate or graduate) learning about machine learning, including those who are beginning a career in deep learning and artificial intelligence research.
The other target audience is software engineers who do not have a machine learning or statistics background, but want to rapidly acquire one and begin using deep learning in their product or platform.
INTRODUCTION  AI  Machine learning  Representation learning  Deep learning  Example:  Knowledge  bases  Example:  Logistic  regression  Example:  Shallow  autoencodersExample:  MLPs  Figure 1.4: A Venn diagram showing how deep learning is a kind of representation learning, which is in turn a kind of machine learning, which is used for many but not all approaches to AI.
INTRODUCTION  Input  Hand-  designed   program  Output  Input  Hand-  designed   features  Mapping from   features  Output  Input  Features  Mapping from   features  Output  Input  Simple   features  Mapping from   features  Output  Additional   layers of more   abstract   features  Rule-based  systems  Classic  machine  learning Representation  learning  Deep  learning  Figure 1.5: Flowcharts showing how the different parts of an AI system relate to each other within different AI disciplines.
INTRODUCTION  many software disciplines including computer vision, speech and audio processing, natural language processing, robotics, bioinformatics and chemistry, video games, search engines, online advertising and finance.
Part describes the most established deep learning algorithms that areII essentially solved technologies.
Part describes more speculative ideas that areIII widely believed to be important for future research in deep learning.
Readers familiar with linear algebra, probability, and fundamental machine learning concepts can skip part , for example, while readers who just wantI to implement a working system need not read beyond part .
To help choose whichII chapters to read, figure provides a flowchart showing the high-level organization1.6 of the book.
We assume familiarity with programming, a basic understanding of computational performance issues, complexity theory, introductory level calculus and some of the terminology of graph theory.
1.2 Historical Trends in Deep Learning  It is easiest to understand deep learning with some historical context.
Rather than providing a detailed history of deep learning, we identify a few key trends:  • Deep learning has had a long and rich history, but has gone by many names reflecting different philosophical viewpoints, and has waxed and waned in popularity.
• Deep learning models have grown in size over time as computer infrastructure (both hardware and software) for deep learning has improved.
An arrow from one chapter to another indicates that the former chapter is prerequisite material for understanding the latter.
INTRODUCTION  1.2.1 The Many Names and Changing Fortunes of Neural Net- works  We expect that many readers of this book have heard of deep learning as an exciting new technology, and are surprised to see a mention of “history” in a book about an emerging field.
Deep  learning only appears to be new, because it was relatively unpopular for several years preceding its current popularity, and because it has gone through many different names, and has only recently become called “deep learning.” The field has been rebranded many times, reflecting the influence of different researchers and different perspectives.
Broadly speaking, there have been three waves of development of deep learning: deep learning known as cybernetics in the 1940s–1960s, deep learning known as connectionism in the 1980s–1990s, and the current resurgence under the name deep learning beginning in 2006.
This is quantitatively illustrated in figure .1.7  Some of the earliest learning algorithms we recognize today were intended to be computational models of biological learning, i.e.
The corresponding perspective on deep learning models is that they are engineered systems inspired by the biological brain (whether the human brain or the brain of another animal).
While the kinds of neural networks used for machine learning have sometimes been used to understand brain function ( , ), they areHinton and Shallice 1991 generally not designed to be realistic models of biological function.
One idea is that the brain provides a proof by example that intelligent behavior is possible, and a conceptually straightforward path to building intelligence is to reverse engineer the  computational principles behind the brain and duplicate its functionality.
Another perspective is that it would be deeply interesting to understand the brain and the principles that underlie human intelligence, so machine learning models that shed light on these basic scientific questions are useful apart from their ability to solve engineering applications.
The modern term “deep learning” goes beyond the neuroscientific perspective on the current breed of machine learning models.
It appeals to a more general principle of learning multiple levels of composition, which can be applied in machine learning frameworks that are not necessarily neurally inspired.
INTRODUCTION  1940 1950 1960 1970 1980 1990 2000  Year  0.000000  0.000050  0.000100  0.000150  0.000200  0.000250  F re  q u  en cy  o f  W o rd  o r  P h  ra se  cybernetics  (connectionism + neural networks)  Figure 1.7: The figure shows two of the three historical waves of artificial neural nets research, as measured by the frequency of the phrases “cybernetics” and “connectionism” or “neural networks” according to Google Books (the third wave is too recent to appear).
The first wave started with cybernetics in the 1940s–1960s, with the development of theories of biological learning ( , ; , ) and implementations ofMcCulloch and Pitts 1943 Hebb 1949 the first models such as the perceptron (Rosenblatt 1958, ) allowing the training of a single neuron.
The second wave started with the connectionist approach of the 1980–1995 period, with back-propagation ( , ) to train a neural network with one or twoRumelhart et al.
The other two waves similarly appeared in book form much later than the corresponding scientific activity occurred.
INTRODUCTION  The earliest predecessors of modern deep learning were simple linear models motivated from a neuroscientific perspective.
This first wave of neural networks research was known as cybernetics, as illustrated in figure .1.7  The McCulloch-Pitts Neuron ( , ) was an early modelMcCulloch and Pitts 1943 of brain function.
This linear model could recognize two different categories of  inputs by testing whether f (x w, ) is positive or negative.
Of course, for the model to correspond to the desired definition of the categories, the weights needed to be set correctly.
In the 1950s, the perceptron (Rosenblatt 1958 1962, , ) became the first model that could learn the weights defining the categories given examples of inputs from each category.
The adaptive linear element (ADALINE), which dates from about the same time, simply returned the value of f(x) itself to predict a real number (Widrow and Hoff 1960, ), and could also learn to predict these numbers from data.
The training algorithm used to adapt the weights of the ADALINE was a special case of an algorithm called stochastic gradient descent.
Slightly  modified versions of the stochastic gradient descent algorithm remain the dominant training algorithms for deep learning models today.
These models remain some of the most widely used machine learning models, though in many cases they are trained in different ways than the original models were trained.
Most famously, they cannot learn the XOR function, where f ([0,1],w) = 1 and f([1, 0],w) = 1 but f([1, 1],w) = 0 and f ([0, 0],w) = 0.
Critics who observed these flaws in linear models caused a backlash against biologically inspired learning in general (Minsky and Papert, 1969).
Today, neuroscience is regarded as an important source of inspiration for deep learning researchers, but it is no longer the predominant guide for the field.
The main reason for the diminished role of neuroscience in deep learning research today is that we simply do not have enough information about the brain to use it as a guide.
To obtain a deep understanding of the actual algorithms used by the brain, we would need to be able to monitor the activity of (at the very least) thousands of interconnected neurons simultaneously.
Because we are not able to do this, we are far from understanding even some of the most simple and  15    CHAPTER 1.
INTRODUCTION  well-studied parts of the brain ( , ).Olshausen and Field 2005  Neuroscience has given us a reason to hope that a single deep learning algorithm can solve many different tasks.
Neuroscientists have found that ferrets can learn to “see” with the auditory processing region of their brain if their brains are rewired to send visual signals to that area (Von Melchner 2000et al., ).
This suggests that much of the mammalian brain might use a single algorithm to solve most of the different tasks that the brain solves.
Before this hypothesis, machine learning research was more fragmented, with different communities of researchers studying  natural language processing, vision, motion planning and speech recognition.
Today, these application communities are still separate, but it is common for deep learning research groups to study many or even all of these application areas simultaneously.
The basic idea of having many computational units that become intelligent only via their interactions with each other is inspired by the brain.
The Neocognitron (Fukushima 1980, ) introduced a powerful model architecture for processing images that was inspired by the structure of the mammalian visual system and later became the basis for the modern convolutional network ( , ), as we will see inLeCun et al.
The original Cognitron (Fukushima 1975, ) introduced  a more complicated version that was highly inspired by our knowledge of brain function.
The simplified modern version was developed incorporating ideas from many viewpoints, with ( ) and ( ) citingNair and Hinton 2010 Glorot et al.
We know that actual neurons compute very different functions than modern rectified linear units, but greater neural realism has not yet led to an improvement in machine learning performance.
Also, while neuroscience has successfully inspired several neural network architectures, we do not yet know enough about biological learning for neuroscience to offer much guidance for the learning algorithms we use to train these architectures.
While it is true that deep learning researchers are more likely to cite the brain as an influence than researchers working in other machine learning fields such as kernel machines or Bayesian statistics, one should not view deep learning as an attempt to simulate the brain.
Modern deep learning draws inspiration from many fields, especially applied math fundamentals like linear algebra, probability, information theory, and numerical optimization.
While some deep learning researchers cite neuroscience as an important source of inspiration, others are not concerned with  16    CHAPTER 1.
It is worth noting that the effort to understand how the brain works on an algorithmic level is alive and well.
This endeavor is primarily known as “computational neuroscience” and is a separate field of study from deep learning.
The field of deep learning is primarily concerned with how to build computer systems that are able to successfully solve tasks requiring intelligence, while the field of computational neuroscience is primarily concerned with building more accurate  models of how the brain actually works.
In the 1980s, the second wave of neural network research emerged in great part via a movement called connectionism or parallel distributed process- ing ( , ; , ).
Cognitive science is an interdisciplinary approach to understanding the mind, combining multiple different levels of analysis.
Despite their popularity, symbolic models were difficult to explain in terms of how the brain could actually implement them using neurons.
The connectionists began to study models of cognition that could actually be grounded in neural implementations (Touretzky and Minton 1985, ), reviving many ideas dating back  to the work of psychologist Donald Hebb in the 1940s ( , ).Hebb 1949  The central idea in connectionism is that a large number of simple computational units can achieve intelligent behavior when networked together.
This insight applies equally to neurons in biological nervous systems and to hidden units in computational models.
Several key concepts arose during the connectionism movement of the 1980s that remain central to today’s deep learning.
This is the idea that each input to a system should be represented by many features, and each feature should be involved in the representation of many possible inputs.
For example, suppose we have a vision system that can recognize  cars, trucks, and birds and these objects can each be red, green, or blue.
One way of representing these inputs would be to have a separate neuron or hidden unit that activates for each of the nine possible combinations: red truck, red car, red bird, green truck, and so on.
This requires nine different neurons, and each neuron must independently learn the concept of color and object identity.
One way to improve on this situation is to use a distributed representation, with three neurons describing the color and three neurons describing the object identity.
This requires only six neurons total instead of nine, and the neuron describing redness is able to  17    CHAPTER 1.
INTRODUCTION  learn about redness from images of cars, trucks and birds, not only from images of one specific category of objects.
The concept of distributed representation is central to this book, and will be described in greater detail in chapter .15  Another major accomplishment of the connectionist movement was the suc- cessful use of back-propagation to train deep neural networks with internal repre- sentations and the popularization of the back-propagation algorithm (Rumelhart et al., ; , ).
This algorithm has waxed and waned in popularity1986a LeCun 1987 but as of this writing is currently the dominant approach to training deep models.
1994 the fundamental mathematical difficulties in modeling long sequences, described in section .10.7 Hochreiter and Schmidhuber 1997( ) introduced the long short-term memory or LSTM network to resolve some of these difficulties.
Today, the LSTM is widely used for many sequence modeling tasks, including many natural language processing tasks at Google.
Ven- tures based on neural networks and other AI technologies began to make unrealisti- cally ambitious claims while seeking investments.
1992 Cortes and Vapnik 1995 Schölkopf 1999 Jor-; , ; et al., ) and graphical models ( dan 1998, ) both achieved good results on many important tasks.
During this time, neural networks continued to obtain impressive performance on some tasks ( , ; , ).
2001 for Advanced Research (CIFAR) helped to keep neural networks research alive via its Neural Computation and Adaptive Perception (NCAP) research initiative.
This program united machine learning research groups led by Geoffrey Hinton at University of Toronto, Yoshua Bengio at University of Montreal, and Yann LeCun at New York University.
The CIFAR NCAP research initiative had a  multi-disciplinary nature that also included neuroscientists and experts in human and computer vision.
We now know that algorithms that have existed since the 1980s work quite well, but this was not apparent circa 2006.
The issue is perhaps simply that these algorithms were too computationally costly to allow much experimentation with the hardware available at the time.
Geoffrey Hinton showed that a kind of neural network called a deep belief network could be efficiently trained using a strategy called greedy layer-wise pre- training ( , ), which will be described in more detail in section .Hinton et al.
2006 15.1 The other CIFAR-affiliated research groups quickly showed that the same strategy could be used to train many other kinds of deep networks ( , ;Bengio et al.
This wave of neural networks research popularized the use of the term “deep learning” to emphasize that researchers were now able to train deeper  neural networks than had been possible before, and to focus attention on the theoretical importance of depth ( , ; ,Bengio and LeCun 2007 Delalleau and Bengio 2011 Pascanu 2014a Montufar 2014; et al., ; et al., ).
At this time, deep neural networks outperformed competing AI systems based on other machine learning technologies as well as hand-designed functionality.
This third wave of popularity of neural networks continues to the time of this writing, though the focus of deep learning research has changed dramatically within the time of this wave.
The third wave began with a focus on new unsupervised learning techniques and the ability of deep models to generalize well from small datasets, but today there is more interest in much older supervised learning algorithms and the ability of deep models to leverage large labeled datasets.
1.2.2 Increasing Dataset Sizes  One may wonder why deep learning has only recently become recognized as a crucial technology though the first experiments with artificial neural networks were conducted in the 1950s.
Deep learning has been successfully used in commercial applications since the 1990s, but was often regarded as being more of an art than a technology and something that only an expert could use, until recently.
The learning algorithms reaching human performance on complex tasks today are nearly identical to the learning algorithms that struggled to solve toy problems in the 1980s, though the models we train with these algorithms have undergone changes that simplify the training of very deep architectures.
The most important new development is that today we can provide these algorithms with the resources they need to succeed.
As our computers are increasingly networked together, it becomes easier to centralize these records and curate them  19    CHAPTER 1.
The age of “Big Data” has made machine learning much easier because the key burden of statistical estimation—generalizing well to new data after observing only a small amount of data—has been considerably lightened.
As of 2016, a rough rule of thumb is that a supervised deep learning algorithm will generally achieve acceptable performance with around 5,000 labeled examples per category, and will match or exceed human performance when trained with a dataset containing at least 10 million labeled examples.
Working successfully with datasets smaller than this is  an important research area, focusing in particular on how we can take advantage of large quantities of unlabeled examples, with unsupervised or semi-supervised learning.
1.2.3 Increasing Model Sizes  Another key reason that neural networks are wildly successful today after enjoying comparatively little success since the 1980s is that we have the computational resources to run much larger models today.
One of the main insights of connection-  ism is that animals become intelligent when many of their neurons work together.
As seen in figure ,1.10 our machine learning models have had a number of connections per neuron that was within an order of magnitude of even mammalian brains for decades.
In terms of the total number of neurons, neural networks have been astonishingly small until quite recently, as shown in figure .
Since the introduction of hidden1.11 units, artificial neural networks have doubled in size roughly every 2.4 years.
This growth is driven by faster computers with larger memory and by the availability of larger datasets.
Unless new technologies  allow faster scaling, artificial neural networks will not have the same number of neurons as the human brain until at least the 2050s.
Biological neurons may represent more complicated functions than current artificial neurons, so biological neural networks may be even larger than this plot portrays.
In retrospect, it is not particularly surprising that neural networks with fewer neurons than a leech were unable to solve sophisticated artificial intelligence prob- lems.
Even today’s networks, which we consider quite large from a computational systems point of view, are smaller than the nervous system of even relatively primitive vertebrate animals like frogs.
INTRODUCTION  1900 1950 1985 2000 2015  Year  100  101  102  103  104  105  106  107  108  109  D a ta  se t  si ze  (n u  m b  er ex  a m  p le  s)  Iris  MNIST  Public SVHN  ImageNet  CIFAR-10  ImageNet10k  ILSVRC 2014  Sports-1M  Rotated T vs. CT vs. G vs. F  Criminals  Canadian Hansard WMT  Figure 1.8: Dataset sizes have increased greatly over time.
In the early 1900s, statisticians studied datasets using hundreds or thousands of manually compiled measurements ( ,Garson 1900 Gosset 1908 Anderson 1935 Fisher 1936; , ; , ; , ).
In the 1950s through 1980s, the pioneers of biologically inspired machine learning often worked with small, synthetic datasets, such as low-resolution bitmaps of letters, that were designed to incur low computational cost and demonstrate that neural networks were able to learn specific kinds of functions (Widrow and Hoff 1960 Rumelhart 1986b, ; et al., ).
In the 1980s and 1990s, machine learning became more statistical in nature and began to leverage larger datasets containing tens of thousands of examples such as the MNIST dataset (shown in figure ) of scans1.9 of handwritten numbers ( , ).
1998b sophisticated datasets of this same size, such as the CIFAR-10 dataset (Krizhevsky and Hinton 2009, ) continued to be produced.
Toward the end of that decade and throughout the first half of the 2010s, significantly larger datasets, containing hundreds of thousands to tens of millions of examples, completely changed what was possible with deep learning.
At the top of the2014 graph, we see that datasets of translated sentences, such as IBM’s dataset constructed from the Canadian Hansard ( , ) and the WMT 2014 English to FrenchBrown et al.
The “NIST” stands for National Institute of Standards and Technology, the agency that originally collected this data.
The “M” stands for “modified,” since the data has been preprocessed for easier use with machine learning algorithms.
The MNIST dataset consists of scans of handwritten digits and associated labels describing which digit 0–9 is contained in each image.
This simple classification problem is one of the simplest and most widely used tests in deep learning research.
Geoffrey Hinton has described it as “the drosophila of machine learning,” meaning that it allows machine learning researchers to study their algorithms in controlled laboratory conditions, much as biologists often study fruit flies.
INTRODUCTION  the advent of general purpose GPUs (described in section ), faster network12.1.2 connectivity and better software infrastructure for distributed computing, is one of the most important trends in the history of deep learning.
1.2.4 Increasing Accuracy, Complexity and Real-World Impact  Since the 1980s, deep learning has consistently improved in its ability to provide accurate recognition or prediction.
Moreover, deep learning has consistently been applied with success to broader and broader sets of applications.
The earliest deep models were used to recognize individual objects in tightly cropped, extremely small images ( , ).
Modern object recognition networks process rich high-resolution photographs and do not have a requirement that the photo be cropped near the object to be recognized ( , ).
2012 two kinds of objects (or in some cases, the absence or presence of a single kind of  object), while these modern networks typically recognize at least 1,000 different categories of objects.
The largest contest in object recognition is the ImageNet Large Scale Visual Recognition Challenge (ILSVRC) held each year.
A dramatic moment in the meteoric rise of deep learning came when a convolutional network won this challenge for the first time and by a wide margin, bringing down the state-of-the-art top-5 error rate from 26.1% to 15.3% ( , ),Krizhevsky et al.
2012 meaning that the convolutional network produces a ranked list of possible categories for each image and the correct category appeared in the first five entries of this list for all but 15.3% of the test examples.
Since then, these competitions are consistently won by deep convolutional nets, and as of this writing, advances in deep learning have brought the latest top-5 error rate in this contest down to 3.6%,  as shown in figure .1.12  Deep learning has also had a dramatic impact on speech recognition.
After improving throughout the 1990s, the error rates for speech recognition stagnated starting in about 2000.
et al., ;2010b Seide , ;2011 Hinton , ) to speech recognition resulted2012a in a sudden drop of error rates, with some error rates cut in half.
We will explore this history in more detail in section .12.3  Deep networks have also had spectacular successes for pedestrian detection and image segmentation ( , ;Sermanet et al.
2013 Farabet 2013 Couprieet al., ; et al., 2013) and yielded superhuman performance in traffic sign classification (Ciresan  23    CHAPTER 1.
INTRODUCTION  1950 1985 2000 2015  Year  101  102  103  104  C o n n ec ti o n s p er n eu ro n  1  2  3  4  5  6 7  8  9  10  Fruit fly  Mouse  Cat  Human  Figure 1.10: Initially, the number of connections between neurons in artificial neural networks was limited by hardware capabilities.
Some artificial neural networks have nearly as many connections per neuron as a cat, and it is quite common for other neural networks to have as many connections per neuron as smaller mammals like mice.
INTRODUCTION  et al., ).2012  At the same time that the scale and accuracy of deep networks has increased, so has the complexity of the tasks that they can solve.
2014d showed that neural networks could learn to output an entire sequence of characters transcribed from an image, rather than just identifying a single object.
Previously, it was widely believed that this kind of learning required labeling of the individual elements of the sequence ( , ).
Recurrent neural networks,Gülçehre and Bengio 2013 such as the LSTM sequence model mentioned above, are now used to model  relationships between sequences sequencesand other rather than just fixed inputs.
This sequence-to-sequence learning seems to be on the cusp of revolutionizing another application: machine translation (Sutskever 2014 Bahdanauet al., ; et al., 2015).
This trend of increasing complexity has been pushed to its logical conclusion with the introduction of neural Turing machines (Graves 2014aet al., ) that learn to read from memory cells and write arbitrary content to memory cells.
For example, they can learn to sort lists of numbers given examples of scrambled and sorted sequences.
This self-programming technology is in its infancy, but in the future could in principle be applied to nearly any task.
Another crowning achievement of deep learning is its extension to the domain of reinforcement learning.
In the context of reinforcement learning, an autonomous agent must learn to perform a task by trial and error, without any guidance from the human operator.
DeepMind demonstrated that a reinforcement learning system based on deep learning is capable of learning to play Atari video games, reaching human-level performance on many tasks ( , ).
2015 also significantly improved the performance of reinforcement learning for robotics ( , ).Finn et al.
Deep learning is now used by many top technology companies including Google, Microsoft, Facebook, IBM, Baidu, Apple, Adobe, Netflix, NVIDIA and NEC.
Modern convolutional networks for object recognition provide a model of visual processing  25    CHAPTER 1.
Deep learning also provides usefulDiCarlo 2013 tools for processing massive amounts of data and making useful predictions in scientific fields.
It has been successfully used to predict how molecules will interact in order to help pharmaceutical companies design new drugs ( , ),Dahl et al.
2014 microscope images used to construct a 3-D map of the human brain (Knowles- Barley 2014et al., ).
In summary, deep learning is an approach to machine learning that has drawn heavily on our knowledge of the human brain, statistics and applied math as it developed over the past several decades.
In recent years, it has seen tremendous growth in its popularity and usefulness, due in large part to more powerful com- puters, larger datasets and techniques to train deeper networks.
The years ahead are full of challenges and opportunities to improve deep learning even further and bring it to new frontiers.
INTRODUCTION  1950 1985 2000 2015 2056  Year  10−2 10−1 100 101 102 103 104 105 106 107 108 109 1010 1011  N u m b er o f n eu ro n s (l o g a ri th m ic sc a le )  1 2  3  4 5  6  7  8  9 10  11  12  13  14  15  16 17  18 19 20  Sponge  Roundworm  Leech  Ant Bee  Frog  Octopus  Human  Figure 1.11: Since the introduction of hidden units, artificial neural networks have doubled in size roughly every 2.4 years.
IL S  V R  C  c  la ss  ifi ca  ti o n  er ro  r ra  te  Figure 1.12: Since deep networks reached the scale necessary to compete in the ImageNet Large Scale Visual Recognition Challenge, they have consistently won the competition every year, and yielded lower and lower error rates each time.
                                     Part I  Applied Math and Machine  Learning Basics  29    This part of the book introduces the basic mathematical concepts needed to understand deep learning.
We begin with general ideas from applied math that allow us to define functions of many variables, find the highest and lowest points on these functions and quantify degrees of belief.
We describe how to accomplish these goals by specifying a model that represents certain beliefs, designing a cost function that measures how well those beliefs correspond with reality and using a training algorithm to minimize that cost function.
This elementary framework is the basis for a broad variety of machine learning algorithms, including approaches to machine learning that are not deep.
                                     Chapter 2  Linear Algebra  Linear algebra is a branch of mathematics that is widely used throughout science and engineering.
However, because linear algebra is a form of continuous rather than discrete mathematics, many computer scientists have little experience with it.
A good understanding of linear algebra is essential for understanding and working  with many machine learning algorithms, especially deep learning algorithms.
We therefore precede our introduction to deep learning with a focused presentation of the key linear algebra prerequisites.
If you have previous experience with these concepts but need a detailed reference sheet to review key formulas, we recommend The Matrix Cookbook (Petersen and Pedersen 2006, ).
If you have no exposure at all to linear algebra, this chapter will teach you enough to read this book, but we highly recommend that you also consult another resource focused exclusively on teaching linear algebra, such as Shilov 1977( ).
This chapter will completely omit many important linear algebra topics that are not essential for understanding deep learning.
2.1 Scalars, Vectors, Matrices and Tensors  The study of linear algebra involves several types of mathematical objects:  • Scalars: A scalar is just a single number, in contrast to most of the other objects studied in linear algebra, which are usually arrays of multiple numbers.
LINEAR ALGEBRA  example, we might say “Let s ∈ R be the slope of the line,” while defining a real-valued scalar, or “Let n ∈ N be the number of units,” while defining a natural number scalar.
If each element is in R, and the vector has n elements, then the vector lies in the set formed by taking the Cartesian product of R n times, denoted as Rn.
When we need to explicitly identify the elements of a vector, we write them as a column enclosed in square brackets:  x =      x1 x2 ... xn     .
(2.1)  We can think of vectors as identifying points in space, with each element giving the coordinate along a different axis.
For example x−1 is the vector containing all elements of x except for x1, and x−S is the vector containing all of the elements of except forx x1, x3 and x6 .
• Matrices: A matrix is a 2-D array of numbers, so each element is identified by two indices instead of just one.
We usually identify the elements of a matrix using its name in italic but not bold font, and the indices are listed with separating commas.
We can identify all of the numbers with vertical coordinate i by writing a “ ” for the horizontal: coordinate.
LINEAR ALGEBRA  A =     A1 1, A1 2, A2 1, A2 2, A3 1, A3 2,     ⇒ A =  A1 1, A2 1, A3 1, A1 2, A2 2, A3 2,    Figure 2.1: The transpose of the matrix can be thought of as a mirror image across the main diagonal.
When we need to explicitly identify the elements ofi column A a matrix, we write them as an array enclosed in square brackets:   A1 1, A1 2, A2 1, A2 2,   .
For example, f (A)i,j gives element (i, j) of the matrix computed by applying the function to .f A  • Tensors: In some cases we will need an array with more than two axes.
In the general case, an array of numbers arranged on a regular grid with a variable number of axes is known as a tensor.
The transpose of a matrix is the mirror image of the matrix across a diagonal line, called the main diagonal, running down and to the right, starting from its upper left corner.
LINEAR ALGEBRA  define a vector by writing out its elements in the text inline as a row matrix, then using the transpose operator to turn it into a standard column vector, e.g., x = [x1, x2, x3 ].
We can add matrices to each other, as long as they have the same shape, just by adding their corresponding elements: whereC A B= + Ci,j = Ai,j +B i,j.
We can also add a scalar to a matrix or multiply a matrix by a scalar, just by performing that operation on each element of a matrix: D = a ·B + c where Di,j = a B· i,j + c.  In the context of deep learning, we also use some less conventional notation.
We allow the addition of matrix and a vector, yielding another matrix: C = A +b, where Ci,j = Ai,j + bj .
This shorthand eliminates the need to define a matrix with b copied into each row before doing the addition.
This implicit copying of b to many locations is called .broadcasting  2.2 Multiplying Matrices and Vectors  One of the most important operations involving matrices is multiplication of two matrices.
(2.5)  Note that the standard product of two matrices is just a matrix containingnot the product of the individual elements.
Such an operation exists and is called the element-wise product Hadamard productor , and is denoted as .A B  The dot product between two vectors x and y of the same dimensionality is the matrix product xy.
We can think of the matrix product C = AB as computing Ci,j as the dot product between row of and column of .i A j B  34    CHAPTER 2.
LINEAR ALGEBRA  Matrix product operations have many useful properties that make mathematical analysis of matrices more convenient.
(2.7)  Matrix multiplication is commutative (the conditionnot AB = BA does not always hold), unlike scalar multiplication.
(2.9)  This allows us to demonstrate equation , by exploiting the fact that the value2.8 of such a product is a scalar and therefore equal to its own transpose:  xy =  xy   = yx.
(2.10)  Since the focus of this textbook is not linear algebra, we do not attempt to develop a comprehensive list of useful properties of the matrix product here, but the reader should be aware that many more exist.
We now know enough linear algebra notation to write down a system of linear equations:  Ax b= (2.11)  where A ∈ Rm n× is a known matrix, b ∈ Rm is a known vector, and x ∈ Rn is a vector of unknown variables we would like to solve for.
(2.14)  Am,:x = bm (2.15)  or, even more explicitly, as:  A1 1, x1 +A1 2, x2 + +· · · A1,nxn = b1 (2.16) 35    CHAPTER 2.
(2.19)  Matrix-vector product notation provides a more compact representation for equations of this form.
2.3 Identity and Inverse Matrices  Linear algebra offers a powerful tool called matrix inversion that allows us to analytically solve equation for many values of .2.11 A  To describe matrix inversion, we first need to define the concept of an identity matrix.
An identity matrix is a matrix that does not change any vector when we multiply that vector by that matrix.
(2.20)  The structure of the identity matrix is simple: all of the entries along the main diagonal are 1, while all of the other entries are zero.
See figure for an example.2.2  Thematrix inverse of A is denoted as A−1, and it is defined as the matrix such that  A−1A I= n. (2.21)  We can now solve equation by the following steps:2.11  Ax b= (2.22)  A−1Ax A= −1b (2.23)  Inx A=  −1b (2.24)  36    CHAPTER 2.
In theory, the same inverse matrix can then be used to solve the equation many  times for different values of b .
However,A−1 is primarily useful as a theoretical tool, and should not actually be used in practice for most software applications.
Because A−1 can be represented with only limited precision on a digital computer, algorithms that make use of the value of b can usually obtain more accurate estimates of .x  2.4 Linear Dependence and Span  In order for A−1 to exist, equation must have exactly one solution for every2.11 value of b.
However, it is also possible for the system of equations to have no solutions or infinitely many solutions for some values of b.
It is not possible to have more than one but less than infinitely many solutions for a particular b; if both and are solutions thenx y  z x y= α + (1 )− α (2.26)  is also a solution for any real .α  To analyze how many solutions the equation has, we can think of the columns of A as specifying different directions we can travel from the origin (the point specified by the vector of all zeros), and determine how many ways there are of reaching b.
In this view, each element of x specifies how far we should travel in  each of these directions, with xi specifying how far to move in the direction of column :i  Ax =   i  xiA:,i.
,v ( )n } is given by multiplying each vector v ( )i by a corresponding scalar coefficient and adding the results:    i  civ ( )i .
(2.28)  The span of a set of vectors is the set of all points obtainable by linear combination of the original vectors.
LINEAR ALGEBRA  Determining whether Ax= b has a solution thus amounts to testing whether b is in the span of the columns of A.
This particular span is known as the column space rangeor the of .A  In order for the system Ax = b to have a solution for all values of b ∈ Rm , we therefore require that the column space of A be all of Rm.
If any point in Rm  is excluded from the column space, that point is a potential value of b that has no solution.
The requirement that the column space of A be all of Rm implies immediately that A must have at least m columns, i.e., n m≥ .
Otherwise, the dimensionality of the column space would be less than m. For example, consider a 3 × 2 matrix.
The target b is 3-D, but x is only 2-D, so modifying the value of x at best allows us to trace out a 2-D plane within R3.
The equation has a solution if and only if lies on that plane.b  Having n m≥ is only a necessary condition for every point to have a solution.
In other words, the column space is still just a line, and fails to encompass all of R2 , even though there are two columns.
A set of  vectors is linearly independent if no vector in the set is a linear combination of the other vectors.
If we add a vector to a set that is a linear combination of the other vectors in the set, the new vector does not add any points to the set’s span.
This means that for the column space of the matrix to encompass all of Rm , the matrix must contain at least one set of m linearly independent columns.
This condition is both necessary and sufficient for equation to have a solution for2.11 every value of b.
Note that the requirement is for a set to have exactlym linear independent columns, not at least m. No set of m-dimensional vectors can have more than m mutually linearly independent columns, but a matrix with more than m columns may have more than one such set.
In order for the matrix to have an inverse, we additionally need to ensure that  equation has one solution for each value of2.11 at most b.
Together, this means that the matrix must be square, that is, we require that m = n and that all of the columns must be linearly independent.
A square matrix with linearly dependent columns is known as .singular  If A is not square or is square but singular, it can still be possible to solve the equation.
Formally, the Lp norm is given by  || ||x p =    i  |xi|p 1 p  (2.30)  for p , p .∈ R ≥ 1 Norms, including the Lp norm, are functions mapping vectors to non-negative  values.
More rigorously, a norm is any function f that satisfies  the following properties:  • ⇒f ( ) = 0 x x = 0  • ≤f ( + ) x y f f( ) +x ( )y (the triangle inequality)  • ∀ ∈ | |α R, f α( x) = α f ( )x  The L2 norm, with p = 2, is known as the Euclidean norm.
The L2 norm is used so frequently in machine learning that it is often denoted simply as || ||x , with the subscript omitted.
It is also common to measure the size of a vector using2 the squared L2 norm, which can be calculated simply as xx.
The squared L2 norm is more convenient to work with mathematically and computationally than the L2 norm itself.
For example, the derivatives of the squared L2 norm with respect to each element of x each depend only on the corresponding element of x, while all of the derivatives of the L2 norm depend on the entire vector.
In many contexts, the squared L2 norm may be undesirable  because it increases very slowly near the origin.
LINEAR ALGEBRA  applications, it is important to discriminate between elements that are exactly zero and elements that are small but nonzero.
In these cases, we turn to a function that grows at the same rate in all locations, but retains mathematical simplicity: the L1 norm.
(2.31)  The L1 norm is commonly used in machine learning when the difference between zero and nonzero elements is very important.
Every time an element of x moves away from 0 by , the L1 norm increases by .  We sometimes measure the size of the vector by counting its number of nonzero elements.
The number of non-zero entries in a vector is not a norm, because scaling the vector by α does not change the number of nonzero entries.
This norm simplifies to the absolute value of the element with the largest magnitude in the vector,  || ||x ∞ = max i  |xi|.
In the context of deep learning, the most common way to do this is with the otherwise obscure Frobenius norm:  || ||A F =   i,j  A2i,j, (2.33)  which is analogous to the L2 norm of a vector.
Specifically,  xy x= || ||2|| ||y 2 cos θ (2.34)  where is the angle between and .θ x y  2.6 Special Kinds of Matrices and Vectors  Some special kinds of matrices and vectors are particularly useful.
We have already seen one example of a diagonal matrix: the identity matrix, where all of the diagonal entries are 1.
We write diag(v) to denote a square diagonal matrix whose diagonal entries are given by the entries of the vector v. Diagonal matrices are of interest in part because multiplying by a diagonal matrix is very computationally efficient.
The inverse exists only if every diagonal entry is nonzero, and in that case, diag(v)−1 = diag([1/v1, .
In many cases, we may derive some very general machine learning algorithm in terms of arbitrary matrices, but obtain a less expensive (and less descriptive) algorithm by restricting some matrices to be diagonal.
Non-square diagonal matrices do not have inverses but it is still possible to multiply by them cheaply.
For a non-square diagonal matrix D, the product Dx will involve scaling each element of x, and either concatenating some zeros to the result if D is taller than it is wide, or discarding some of the last elements of the vector if is wider than it is tall.D  A matrix is any matrix that is equal to its own transpose:symmetric  A A= .
(2.35)  Symmetric matrices often arise when the entries are generated by some function of  two arguments that does not depend on the order of the arguments.
For example, ifA is a matrix of distance measurements, with Ai,j giving the distance from point i to point , thenj Ai,j = Aj,i because distance functions are symmetric.
An orthogonal matrix is a square matrix whose rows are mutually orthonor- mal and whose columns are mutually orthonormal:  AA AA=  = I.
LINEAR ALGEBRA  This implies that A−1 = A, (2.38)  so orthogonal matrices are of interest because their inverse is very cheap to compute.
2.7 Eigendecomposition  Many mathematical objects can be understood better by breaking them into constituent parts, or finding some properties of them that are universal, not caused by the way we choose to represent them.
The way we  represent the number will change depending on whether we write it in base ten12 or in binary, but it will always be true that 12 = 2× 2 ×3.
From this representation we can conclude useful properties, such as that is not divisible by , or that any12 5 integer multiple of will be divisible by .12 3  Much as we can discover something about the true nature of an integer by decomposing it into prime factors, we can also decompose matrices in ways that show us information about their functional properties that is not obvious from the representation of the matrix as an array of elements.
One of the most widely used kinds of matrix decomposition is called eigen- decomposition, in which we decompose a matrix into a set of eigenvectors and eigenvalues.
An eigenvector of a square matrix A is a non-zero vector v such that multi- plication by alters only the scale of :A v  Av v= λ .
(One can also find a left eigenvector such that vA = λv, but we are usually concerned with right eigenvectors).
LINEAR ALGEBRA  � � �       �  �  �                    � � �        �  �  �                             Figure 2.3: An example of the effect of eigenvectors and eigenvalues.
Here, we have a matrix A with two orthonormal eigenvectors, v(1) with eigenvalue λ1 and v (2) with eigenvalue λ2.
By observing the way that A distorts the unit circle, we can see that it scales space in direction v( )i by λi.
(2.40)  We have seen that constructing matrices with specific eigenvalues and eigenvec- tors allows us to stretch space in desired directions.
Doing so can help us to analyze certain properties of the matrix, much as decomposing an integer into its prime factors can help us understand the behavior of that integer.
Fortunately, in this book, we usually need to decompose only a specific class of matrices that have a simple decomposition.
Specifically, every real symmetric matrix can be decomposed into an expression using only real-valued eigenvectors and eigenvalues:  A Q Q= Λ , (2.41)  where Q is an orthogonal matrix composed of eigenvectors of A, and Λ is a diagonal matrix.
See figure for an example.2.3  While any real symmetric matrix A is guaranteed to have an eigendecomposi- tion, the eigendecomposition may not be unique.
If any two or more eigenvectors share the same eigenvalue, then any set of orthogonal vectors lying in their span are also eigenvectors with that eigenvalue, and we could equivalently choose a Q using those eigenvectors instead.
The eigendecomposition of a real symmetric matrix can also be used to optimize quadratic expressions of the form f(x) = xAx subject to || ||x 2 = 1.
The maximum value of f within the constraint region is the maximum eigenvalue and its minimum value within the constraint region is the minimum eigenvalue.
Likewise, if all eigenvalues are negative, the matrix is negative definite, and if all eigenvalues are negative or zero-valued, it is negative semidefinite.
2.8 Singular Value Decomposition  In section , we saw how to decompose a matrix into eigenvectors and eigenvalues.2.7 The singular value decomposition (SVD) provides another way to factorize  a matrix, into singular vectors and singular values.
Every real matrix has a singular value decomposition, but the same is not true of the eigenvalue decomposition.
For example, if a matrix is not square, the eigendecomposition is not defined, and we must use a singular value decomposition instead.
Recall that the eigendecomposition involves analyzing a matrix A to discover a matrix V of eigenvectors and a vector of eigenvalues λ such that we can rewrite A as  A V λ V= diag( ) −1.
(2.42)  The singular value decomposition is similar, except this time we will write A as a product of three matrices:  A UDV=  .
Then U is defined to be anm m× matrix, D Vto be an matrix, andm n× to be an matrix.n n×  Each of these matrices is defined to have a special structure.
Note that is not necessarily square.D  The elements along the diagonal of D are known as the singular values of the matrix A.
We can actually interpret the singular value decomposition of A in terms of the eigendecomposition of functions of A .
Perhaps the most useful feature of the SVD is that we can use it to partially generalize matrix inversion to non-square matrices, as we will see in the next section.
2.9 The Moore-Penrose Pseudoinverse  Matrix inversion is not defined for matrices that are not square.
Suppose we want to make a left-inverse of a matrix , so that we can solve a linear equationB A  Ax y= (2.44)  45    CHAPTER 2.
(2.45)  Depending on the structure of the problem, it may not be possible to design a unique mapping from to .A B  If A is taller than it is wide, then it is possible for this equation to have no solution.
(2.46)  Practical algorithms for computing the pseudoinverse are not based on this defini- tion, but rather the formula  A+ = VD+U , (2.47)  where U , D and V are the singular value decomposition of A, and the pseudoinverse D+ of a diagonal matrix D is obtained by taking the reciprocal of its non-zero elements then taking the transpose of the resulting matrix.
When A has more columns than rows, then solving a linear equation using the pseudoinverse provides one of the many possible solutions.
Specifically, it provides  the solution x = A+y with minimal Euclidean norm || ||x 2 among all possible solutions.
In this case, using the pseudoinverse gives us the x for which Ax is as close as possible to in terms of Euclidean normy || − ||Ax y 2.
2.10 The Trace Operator  The trace operator gives the sum of all of the diagonal entries of a matrix:  Tr( ) =A   i  Ai,i.
Some operations that are difficult to specify without resorting to summation notation can be specified using  46    CHAPTER 2.
For example, the trace operator provides an alternative way of writing the Frobenius norm of a matrix:  || ||A F =   Tr(AA).
(2.49)  Writing an expression in terms of the trace operator opens up opportunities to manipulate the expression using many useful identities.
(2.50)  The trace of a square matrix composed of many factors is also invariant to moving the last factor into the first position, if the shapes of the corresponding matrices allow the resulting product to be defined:  Tr( ) = Tr( ) = Tr( )ABC CAB BCA (2.51)  or more generally,  Tr(  n  i=1  F ( )i ) = Tr(F ( )n n−1  i=1  F( )i ).
(2.52)  This invariance to cyclic permutation holds even if the resulting product has a  different shape.
For example, for A ∈ Rm n× and B ∈ Rn m× , we have  Tr( ) = Tr( )AB BA (2.53)  even though AB ∈ Rm m× and BA ∈ Rn n× .
2.11 The Determinant  The determinant of a square matrix, denoted det(A), is a function mapping matrices to real scalars.
The absolute value of the determinant can be thought of as a measure of how much multiplication by the matrix expands or contracts space.
If the determinant is 0, then space is contracted completely along at least one dimension, causing it to lose all of its volume.
LINEAR ALGEBRA  2.12 Example: Principal Components Analysis  One simple machine learning algorithm, principal components analysis or PCA can be derived using only knowledge of basic linear algebra.
Lossy compression means  storing the points in a way that requires less memory but may lose some precision.
For each point x( )i ∈ Rn we will find a corresponding code vector c( )i ∈ R l. If l is smaller than n, it will take less memory to store the code points than the original data.
We will want to find some encoding function that produces the code for an input, f(x) = c, and a decoding function that produces the reconstructed  input given its code, .x x≈ g f( ( )) PCA is defined by our choice of the decoding function.
Specifically, to make the  decoder very simple, we choose to use matrix multiplication to map the code back into Rn .
(Note that D is still not technically “an orthogonal matrix” unless l n= )  With the problem as described so far, many solutions are possible, because we can increase the scale ofD:,i if we decrease ci proportionally for all points.
In order to turn this basic idea into an algorithm we can implement, the first thing we need to do is figure out how to generate the optimal code point c∗ for each input point x.
One way to do this is to minimize the distance between the  input point x and its reconstruction, g(c∗).
(2.54)  We can switch to the squared L2 norm instead of the L2 norm itself, because both are minimized by the same value of c. Both are minimized by the same value of c because the L2 norm is non-negative and the squaring operation is  48    CHAPTER 2.
(2.55)  The function being minimized simplifies to  ( ( ))x− g c ( ( ))x− g c (2.56)  (by the definition of the L2 norm, equation )2.30  = xx x− g g( )c − ( )c x c+ (g )g( )c (2.57)  (by the distributive property)  = xx x− 2 g g( ) +c ( )c g( )c (2.58)  (because the scalar g( )c x is equal to the transpose of itself).
We can now change the function being minimized again, to omit the first term, since this term does not depend on :c  c∗ = arg min c  −2xg g( ) +c ( )c g .
( )c (2.59)  To make further progress, we must substitute in the definition of :g( )c  c∗ = arg min c  −2xDc c+ DDc (2.60)  = arg min c  −2xDc c+ Ilc (2.61)  (by the orthogonality and unit norm constraints on )D  = arg min c  −2xDc c+ c (2.62)  We can solve this optimization problem using vector calculus (see section if4.3 you do not know how to do this):  ∇c( 2− xDc c+ c) = 0 (2.63)  − 2Dx c+ 2 = 0 (2.64)  c D= x.
LINEAR ALGEBRA  This makes the algorithm efficient: we can optimally encode x just using a matrix-vector operation.
(2.66)  Using a further matrix multiplication, we can also define the PCA reconstruction operation:  r g f( ) = x ( ( )) = x DDx.
(2.67)  Next, we need to choose the encoding matrix D. To do so, we revisit the idea of minimizing the L2 distance between inputs and reconstructions.
Since we will use the same matrix D to decode all of the points, we can no longer consider the points in isolation.
Instead, we must minimize the Frobenius norm of the matrix of errors computed over all dimensions and all points:  D∗ = arg min D    i,j   x ( )i j − r(x( )i )j  2 subject to DD I= l (2.68)  To derive the algorithm for finding D∗, we will start by considering the case where l = 1.
In this case,D is just a single vector, d. Substituting equation 2.67 into equation and simplifying into , the problem reduces to2.68 D d  d∗ = arg min d    i  ||x( )i − ddx( )i ||22 subject to || ||d 2 = 1.
(2.69)  The above formulation is the most direct way of performing the substitution, but is not the most stylistically pleasing way to write the equation.
It places the scalar value dx ( )i on the right of the vector d. It is more conventional to write scalar coefficients on the left of vector they operate on.
We therefore usually write such a formula as  d∗ = arg min d    i  ||x( )i − dx ( )i d||22 subject to || ||d 2 = 1, (2.70)  or, exploiting the fact that a scalar is its own transpose, as  d∗ = arg min d    i  ||x( )i − x( )i dd||22 subject to || ||d 2 = 1.
LINEAR ALGEBRA  At this point, it can be helpful to rewrite the problem in terms of a single design matrix of examples, rather than as a sum over separate example vectors.
Let X ∈ Rm n× be the matrix defined by stacking all of the vectors describing the points, such that Xi,: =x  ( )i  .
(2.72)  Disregarding the constraint for the moment, we can simplify the Frobenius norm portion as follows:  arg min d  || −X Xdd||2F (2.73)  = arg min d  Tr   X Xdd−     X Xdd−    (2.74)  (by equation )2.49  = arg min d  Tr(XX X− Xdd − ddXX dd+ XXdd) (2.75)  = arg min d  Tr(XX) Tr(− XXdd) Tr(− ddXX) + Tr(ddXXdd) (2.76)  = arg min d  − Tr(XXdd) Tr(− ddXX) + Tr(ddXXdd) (2.77)  (because terms not involving do not affect the )d arg min  = arg min d  −2 Tr(XXdd) + Tr(ddXXdd) (2.78)  (because we can cycle the order of the matrices inside a trace, equation )2.52  = arg min d  −2 Tr(XXdd) + Tr(XXdddd) (2.79)  (using the same property again)  At this point, we re-introduce the constraint:  arg min d  −2 Tr(XXdd ) + Tr(XXdddd) subject to dd = 1 (2.80)  = arg min d  −2 Tr(XXdd) + Tr(XXdd) subject to dd = 1 (2.81)  (due to the constraint)  = arg min d  − Tr(XXdd) subject to dd = 1 (2.82)  51    CHAPTER 2.
LINEAR ALGEBRA  = arg max d  Tr(XXdd) subject to dd = 1 (2.83)  = arg max d  Tr(dXXd d) subject to d = 1 (2.84)  This optimization problem may be solved using eigendecomposition.
Specifically, the optimal d is given by the eigenvector of XX corresponding to the largest eigenvalue.
More generally, when we wish to recover a basis of principal components, the matrix D is given by the l eigenvectors corresponding to the largest eigenvalues.
Linear algebra is one of the fundamental mathematical disciplines that is necessary to understand deep learning.
Another key area of mathematics that is ubiquitous in machine learning is probability theory, presented next.
                                     Chapter 3  Probability and Information  Theory  In this chapter, we describe probability theory and information theory.
First, the laws of probability tell us how AI systems should reason, so we design our algorithms to compute or approximate various expressions derived using probability theory.
Second, we can use probability and statistics to theoretically analyze the behavior of proposed AI systems.
We provide this chapter to ensure that readers whose background is primarily in software engineering with limited exposure to probability theory can understand the material in this book.
While probability theory allows us to make uncertain statements and reason in  the presence of uncertainty, information theory allows us to quantify the amount of uncertainty in a probability distribution.
If you are already familiar with probability theory and information theory, you may wish to skip all of this chapter except for section , which describes the3.14 graphs we use to describe structured probabilistic models for machine learning.
If you have absolutely no prior experience with these subjects, this chapter should be sufficient to successfully carry out deep learning research projects, but we do suggest that you consult an additional resource, such as Jaynes 2003( ).
Many branches of computer science deal mostly with entities that are entirely deterministic and certain.
Errors in hardware do occur, but are rare enough that most software applications do not need to be designed to account for them.
Given that many computer scientists and software engineers work in a  relatively clean and certain environment, it can be surprising that machine learning makes heavy use of probability theory.
This is because machine learning must always deal with uncertain quantities, and sometimes may also need to deal with stochastic (non-deterministic) quantities.
Researchers have made compelling arguments for quantifying uncertainty using probability since at least the 1980s.
In fact, beyond mathematical statements that are true by definition, it is difficult to think of any proposition that is absolutely true or any event that is absolutely  guaranteed to occur.
For example, most interpretations of quantum mechanics describe the dynamics of subatomic particles as being probabilistic.
We can also create theoretical scenarios that we postulate to have random dynamics, such as a hypothetical card game where we assume that the cards are truly shuffled into a random order.
Even deterministic systems can appear stochastic  when we cannot observe all of the variables that drive the behavior of the system.
For example, in the Monty Hall problem, a game show contestant is asked to choose between three doors and wins a prize held behind the chosen door.
The outcome given the contestant’s choice is deterministic, but from the contestant’s point of view, the outcome is uncertain.
When we use a model that must discard some of the information we have observed, the discarded information results in uncertainty in the model’s predictions.
For example, suppose we build a robot that can exactly observe the location of every object around it.
PROBABILITY AND INFORMATION THEORY  robot discretizes space when predicting the future location of these objects, then the discretization makes the robot immediately become uncertain about the precise position of objects: each object could be anywhere within the discrete cell that it was observed to occupy.
In many cases, it is more practical to use a simple but uncertain rule rather  than a complex but certain one, even if the true rule is deterministic and our modeling system has the fidelity to accommodate a complex rule.
For example, the simple rule “Most birds fly” is cheap to develop and is broadly useful, while a rule of the form, “Birds fly, except for very young birds that have not yet learned to fly, sick or injured birds that have lost the ability to fly, flightless species of birds including the cassowary, ostrich and kiwi.
” is expensive to develop, maintain and communicate, and after all of this effort is still very brittle and prone to failure.
While it should be clear that we need a means of representing and reasoning about uncertainty, it is not immediately obvious that probability theory can provide all of the tools we want for artificial intelligence applications.
It is easy to see  how probability theory can be used to study events like drawing a certain hand of cards in a game of poker.
When we say that an outcome has a probability p of occurring, it means that if we repeated the experiment (e.g., draw a hand of cards) infinitely many times, then proportion p of the repetitions would result in that outcome.
If a doctor analyzes a patient and says that the patient has a 40% chance of having the flu, this means something very different—we can not make infinitely many replicas of the patient, nor is there any reason to believe that different replicas of the patient would present with the same symptoms yet have varying underlying conditions.
In the case of the doctor diagnosing the patient, we use probability to represent a degree of belief, with 1 indicating absolute certainty that the patient has the flu  and 0 indicating absolute certainty that the patient does not have the flu.
The former kind of probability, related directly to the rates at which events occur, is known as frequentist probability, while the latter, related to qualitative levels of certainty, is known as Bayesian probability.
If we list several properties that we expect common sense reasoning about uncertainty to have, then the only way to satisfy those properties is to treat Bayesian probabilities as behaving exactly the same as frequentist probabilities.
For example, if we want to compute the probability that a player will win a poker game given that she has a certain set of cards, we use exactly the same formulas as when we compute the probability that a patient has a disease given that she  55    CHAPTER 3.
For more details about why a small set of common sense assumptions implies that the same axioms must control both kinds of probability, see ( ).Ramsey 1926  Probability can be seen as the extension of logic to deal with uncertainty.
Logic provides a set of formal rules for determining what propositions are implied to be true or false given the assumption that some other set of propositions is true or false.
Probability theory provides a set of formal rules for determining the likelihood of a proposition being true given the likelihood of other propositions.
We typically denote the random variable itself with a lower case letter in plain typeface, and the values it can take on with lower case script letters.
On its own, a random variable is just a description of the states that are possible; it must be coupled with a probability distribution that specifies how likely each of  these states are.
Note that these states are not necessarily the integers; they can also just be named states that are not considered to have any numerical value.
3.3 Probability Distributions  A probability distribution is a description of how likely a random variable or set of random variables is to take on each of its possible states.
The way we  describe probability distributions depends on whether the variables are discrete or continuous.
3.3.1 Discrete Variables and Probability Mass Functions  A probability distribution over discrete variables may be described using a proba- bility mass function (PMF).
PROBABILITY AND INFORMATION THEORY  mass function and the reader must infer which probability mass function to use based on the identity of the random variable, rather than the name of the function; P P( )x is usually not the same as ( )y .
The probability mass function maps from a state of a random variable to the probability of that random variable taking on that state.
The probability that x = x is denoted as P (x), with a probability of 1 indicating that x = x is certain and a probability of 0 indicating that x = x is impossible.
Sometimes to disambiguate which PMF to use, we write the name of the random variable  explicitly: P (x = x).
Sometimes we define a variable first, then use ∼ notation to specify which distribution it follows later: x x .∼ P ( )  Probability mass functions can act on many variables at the same time.
We may also write for brevity.P x, y( )  To be a probability mass function on a random variable x, a function P must satisfy the following properties:  • The domain of must be the set of all possible states of x.P  • ∀ ∈x x,0 ≤ P (x) ≤ 1.
Likewise, an event that is guaranteed to happen has probability , and no state can have a greater chance of occurring.1  •  x∈x P (x) = 1.
Without  this property, we could obtain probabilities greater than one by computing the probability of one of many events occurring.
We can place a uniform distribution on x—that is, make each of its states equally likely—by setting its probability mass function to  P x( = x i) = 1  k (3.1)  for all i.
We also see thatk    i  P x( = x i) =   i  1  k = k  k = 1, (3.2)  so the distribution is properly normalized.
PROBABILITY AND INFORMATION THEORY  3.3.2 Continuous Variables and Probability Density Functions  When working with continuous random variables, we describe probability distri-  butions using a probability density function (PDF) rather than a probability mass function.
To be a probability density function, a function p must satisfy the following properties:  • The domain of must be the set of all possible states of x.p  • ∀ ∈ ≥ ≤x x, p x( ) 0 ( ) .
A probability density function p(x) does not give the probability of a specific state directly, instead the probability of landing inside an infinitesimal region with volume is given by .δx p x δx( )  We can integrate the density function to find the actual probability mass of a set of points.
Specifically, the probability that x lies in some set S is given by the integral of p(x) over that set.
In the univariate example, the probability that x lies in the interval is given by[ ]a, b   [ ]a,b p x dx( ) .
For an example of a probability density function corresponding to a specific probability density over a continuous random variable, consider a uniform distribu- tion on an interval of the real numbers.
We can do this with a function u(x;a, b), where a and b are the endpoints of the interval, with b > a.
The “;” notation means  “parametrized by”; we consider x to be the argument of the function, while a and b are parameters that define the function.
To ensure that there is no probability mass outside the interval, we say u(x; a, b) = 0 for all x ∈ [a, b] [.
We often denote that x follows the uniform distribution on [a, b] by writing x .∼ U a, b( )  3.4 Marginal Probability  Sometimes we know the probability distribution over a set of variables and we want to know the probability distribution over just a subset of them.
The probability distribution over the subset is known as the distribution.marginal probability  For example, suppose we have discrete random variables x and y, and we know P ,(x y .
PROBABILITY AND INFORMATION THEORY  The name “marginal probability” comes from the process of computing marginal probabilities on paper.
When the values of P (x y, ) are written in a grid with different values of x in rows and different values of y in columns, it is natural to sum across a row of the grid, then write P(x) in the margin of the paper just to the right of the row.
( ) (3.4)  3.5 Conditional Probability  In many cases, we are interested in the probability of some event, given that some other event has happened.
This conditional probability can be computed with the formula  P y x( = y | x = ) = P y, x( = y x = ) P x( = x )  .
(3.5)  The conditional probability is only defined when P(x= x) > 0.We cannot compute the conditional probability conditioned on an event that never happens.
It is important not to confuse conditional probability with computing what  would happen if some action were undertaken.
The conditional probability that a person is from Germany given that they speak German is quite high, but if a randomly selected person is taught to speak German, their country of origin does not change.
3.6 The Chain Rule of Conditional Probabilities  Any joint probability distribution over many random variables may be decomposed into conditional distributions over only one variable:  P (x(1), .
It follows immediately from the definition of conditional probability in equation .3.5  59    CHAPTER 3.
PROBABILITY AND INFORMATION THEORY  For example, applying the definition twice, we get  P , , P , P ,(a b c) = (a b| c) (b c) P , P P(b c) = ( )b c| ( )c  P , , P , P P .
(a b c) = (a b| c) ( )b c| ( )c  3.7 Independence and Conditional Independence  Two random variables x and y are independent if their probability distribution can be expressed as a product of two factors, one involving only x and one involving only y:  ∀ ∈ ∈x x, y y x y x y (3.7), p( = x, = ) = (y p = ) (x p = )y .
Two random variables x and yareconditionally independent given a random variable z if the conditional probability distribution over x and y factorizes in this way for every value of z:  ∀ ∈ ∈ ∈ | | |x x, y y, z z x y, p( = x, = y z x= ) = (z p = x z y= ) (z p = y z = )z .
(3.8)  We can denote independence and conditional independence with compact notation: x y⊥ means that x and y are independent, while x y z⊥ | means that x and y are conditionally independent given z.
3.8 Expectation, Variance and Covariance  The expectation or expected value of some function f(x) with respect to a probability distribution P (x) is the average or mean value that f takes on when x is drawn from .
For discrete variables this can be computed with a summation:P  Ex∼P [ ( )] =f x   x  P x f x ,( ) ( ) (3.9)  while for continuous variables, it is computed with an integral:  Ex∼p[ ( )] =f x   p x f x dx.
PROBABILITY AND INFORMATION THEORY  When the identity of the distribution is clear from the context, we may simply write the name of the random variable that the expectation is over, as in Ex[f (x)].
If it is clear which random variable the expectation is over, we may omit the subscript entirely, as in E[f (x)].
By default, we can assume that E[·] averages over the values of all the random variables inside the brackets.
Expectations are linear, for example,  Ex[ ( ) + ( )] = αf x βg x αEx[ ( )] +f x βEx[ ( )]g x , (3.11)  when and are not dependent on .α β x  The variance gives a measure of how much the values of a function of a random variable x vary as we sample different values of x from its probability distribution:  Var( ( )) = f x E   ( ( ) [ ( )])f x − E f x 2  .
The square root of the variance is known as the .standard deviation  The covariance gives some sense of how much two values are linearly related to each other, as well as the scale of these variables:  Cov( ( ) ( )) = [( ( ) [ ( )]) ( ( ) [ ( )])]f x , g y E f x − E f x g y − E g y .
(3.13)  High absolute values of the covariance mean that the values change very much and are both far from their respective means at the same time.
If the sign of the covariance is positive, then both variables tend to take on relatively high values simultaneously.
If the sign of the covariance is negative, then one variable tends to take on a relatively high value at the times that the other takes on a relatively low value and vice versa.
Other measures such as correlation normalize the  contribution of each variable in order to measure only how much the variables are related, rather than also being affected by the scale of the separate variables.
They are related because two variables that are independent have zero covariance, and two variables that have non-zero covariance are dependent.
Independence is a stronger requirement than zero covariance, because independence also excludes nonlinear relationships.
For example, suppose we first sample a real number x from a uniform distribution over the interval [−1, 1].
The covariance matrix of a random vector x ∈ Rn is an n n× matrix, such that  Cov( )x i,j = Cov(xi,x j).
(3.15)  3.9 Common Probability Distributions  Several simple probability distributions are useful in many contexts in machine learning.
3.9.1 Bernoulli Distribution  The Bernoulli distribution is a distribution over a single binary random variable.
It is controlled by a single parameter φ ∈ [0,1], which gives the probability of the random variable being equal to 1.
It has the following properties:  P φ( = 1) = x (3.16)  P φ( = 0) = 1x − (3.17) P x φ( = x ) = x(1 )− φ 1−x (3.18)  Ex[ ] = x φ (3.19)  Varx( ) = (1 )x φ − φ (3.20)  3.9.2 Multinoulli Distribution  The multinoulli or categorical distribution is a distribution over a single discrete variable with k different states, where k is finite.1 The multinoulli distribution is  1 “Multinoulli” is a term that was recently coined by Gustavo Lacerdo and popularized by  Murphy 2012( ).
, n}k representing how many times each of the k categories is visited when n samples are drawn from a multinoulli distribution.
Many texts use the term “multinomial” to refer to multinoulli distributions without clarifying  that they refer only to the case.n = 1  62    CHAPTER 3.
PROBABILITY AND INFORMATION THEORY  parametrized by a vector p ∈ [0,1]k−1, where pi gives the probability of the i-th state.
Multinoulli distributions are often used to refer to distributions over categories of objects, so we do not usually assume that state 1 has numerical value 1, etc.
For this reason, we do not usually need to compute the expectation or variance of multinoulli-distributed random variables.
The Bernoulli and multinoulli distributions are sufficient to describe any distri- bution over their domain.
They are able to describe any distribution over their  domain not so much because they are particularly powerful but rather because their domain is simple; they model discrete variables for which it is feasible to enumerate all of the states.
When dealing with continuous variables, there are uncountably many states, so any distribution described by a small number of parameters must impose strict limits on the distribution.
3.9.3 Gaussian Distribution  The most commonly used distribution over real numbers is the normal distribu-  tion, also known as the :Gaussian distribution  N ( ;x µ, σ2) =   1  2πσ2 exp   − 1  2σ 2 ( )x µ− 2   .
(3.21)  See figure for a plot of the density function.3.1  The two parameters µ ∈ R and σ ∈ (0,∞) control the normal distribution.
When we need to frequently evaluate the PDF with different parameter values, a more efficient way of parametrizing the distribution is to use a parameter β ∈ (0,∞) to control the precision or inverse variance of the distribution:  N ( ;x µ, β−1) =  β  2π exp   −1  2 β x µ( − )2   .
In the absence of prior knowledge about what form a distribution over the real numbers should take, the normal distribution is a good default choice for two major reasons.
0 40.  p (x  )  Maximum at = x µ  Inflection points at x µ σ= ±  Figure 3.1: The normal distribution: The normal distribution N (x;µ, σ2) exhibits a classic “bell curve” shape, with the x coordinate of its central peak given by µ, and the width of its peak controlled by σ.
In this example, we depict the standard normal distribution, with and .µ = 0 σ = 1  First, many distributions we wish to model are truly close to being normal distributions.
The central limit theorem shows that the sum of many indepen- dent random variables is approximately normally distributed.
This means that in practice, many complicated systems can be modeled successfully as normally distributed noise, even if the system can be decomposed into parts with more structured behavior.
Second, out of all possible probability distributions with the same variance, the normal distribution encodes the maximum amount of uncertainty over the real numbers.
We can thus think of the normal distribution as being the one  that inserts the least amount of prior knowledge into a model.
Fully developing and justifying this idea requires more mathematical tools, and is postponed to section .19.4.2  The normal distribution generalizes to Rn, in which case it is known as the multivariate normal distribution.
It may be parametrized with a positive definite symmetric matrix :Σ  N ( ; ) =x µ,Σ   1  (2 )π ndet( )Σ exp   −1  2 ( )x µ− Σ−1( )x µ−   .
PROBABILITY AND INFORMATION THEORY  The parameter µ still gives the mean of the distribution, though now it is vector-valued.
As in the univariate case, when we wish to evaluate the PDF several times for many different values of the parameters, the covariance is not a computationally efficient way to parametrize the distribution, since we need to invert Σ to evaluate the PDF.
We can instead use a :precision matrix β  N ( ;x µ β, −1) =   det( )β  (2 )π n exp   − 1  2 ( )x µ− β x µ( − )   .
An even simpler version is the isotropic Gaussian distribution, whose covariance matrix is a scalar times the identity matrix.
3.9.4 Exponential and Laplace Distributions  In the context of deep learning, we often want to have a probability distribution with a sharp point at x = 0.
(3.25)  The exponential distribution uses the indicator function 1x≥0 to assign probability zero to all negative values of .x  A closely related probability distribution that allows us to place a sharp peak of probability mass at an arbitrary point is theµ Laplace distribution  Laplace( ; ) =x µ, γ 1  2γ exp   −| − |x µ  γ   .
(3.26)  3.9.5 The Dirac Distribution and Empirical Distribution  In some cases, we wish to specify that all of the mass in a probability distribution  clusters around a single point.
( ) = ( − ) (3.27)  The Dirac delta function is defined such that it is zero-valued everywhere except 0, yet integrates to 1.
The Dirac delta function is not an ordinary function that associates each value x with a real-valued output, instead it is a different kind of  65    CHAPTER 3.
PROBABILITY AND INFORMATION THEORY  mathematical object called a generalized function that is defined in terms of its properties when integrated.
We can think of the Dirac delta function as being the limit point of a series of functions that put less and less mass on all points other than zero.
By defining p(x) to be δ shifted by −µ we obtain an infinitely narrow and infinitely high peak of probability mass where .x µ=   A common use of the Dirac delta distribution is as a component of an empirical distribution,  p̂( ) =x 1  m  m  i=1  δ(x x− ( )i ) (3.28)  which puts probability mass 1m on each of the m points x (1) , .
The Dirac delta distribution is only necessary to define the empirical distribution over continuous variables.
For discrete variables, the situation is simpler: an empirical distribution can be conceptualized as a multinoulli distribution, with a probability associated to each possible input value that is simply equal to the empirical frequency of that value in the training set.
We can view the empirical distribution formed from a dataset of training examples as specifying the distribution that we sample from when we train a model on this dataset.
Another important perspective on the empirical distribution is that it is the probability density that maximizes the likelihood of the training data (see section ).5.5  3.9.6 Mixtures of Distributions  It is also common to define probability distributions by combining other simpler probability distributions.
On each trial, the choice of which component distribution generates the sample is determined by sampling a component identity from a multinoulli distribution:  P ( ) =x   i  P i P i( = c ) ( = x c| ) (3.29)  where c is the multinoulli distribution over component identities.P ( )  We have already seen one example of a mixture distribution: the empirical distribution over real-valued variables is a mixture distribution with one Dirac component for each training example.
PROBABILITY AND INFORMATION THEORY  The mixture model is one simple strategy for combining probability distributions to create a richer distribution.
In chapter , we explore the art of building complex16 probability distributions from simple ones in more detail.
The mixture model allows us to briefly glimpse a concept that will be of paramount importance later—the latent variable.
Latent variables may be related to x through the joint distribution, in this case, P (x c, ) = P (x c| )P (c).
The distribution P (c) over the latent variable and the distribution P(x c| ) relating the latent variables to the visible variables determines the shape of the distribution P (x) even though it is possible to describe P (x) without reference to the latent variable.
Latent variables are discussed further in section .16.5  A very powerful and common type of mixture model is the Gaussian mixture model, in which the components p(x | c = i) are Gaussians.
As with a single Gaussian distribution, the mixture of Gaussians might constrain the covariance matrix for each component to be diagonal or isotropic.
In addition to the means and covariances, the parameters of a Gaussian mixture specify the prior probability αi = P(c = i) given to each component i.
A Gaussian mixture model is a universal approximator of densities, in the sense that any smooth density can be approximated with any specific, non-zero amount of error by a Gaussian mixture model with enough components.
Figure shows samples from a Gaussian mixture model.3.2  3.10 Useful Properties of Common Functions  Certain functions arise often while working with probability distributions, especially the probability distributions used in deep learning models.
(3.30)  The logistic sigmoid is commonly used to produce the φ parameter of a Bernoulli  67    CHAPTER 3.
From left to right, the first component has an isotropic covariance matrix, meaning it has the same amount of variance in each direction.
The second has a diagonal covariance matrix, meaning it can control the variance separately along each axis-aligned direction.
The third component has a full-rank covariance matrix, allowing it to control the variance separately along an arbitrary basis of directions.
distribution because its range is (0,1), which lies within the valid range of values for the φ parameter.
The3.3 sigmoid function saturates when its argument is very positive or very negative, meaning that the function becomes very flat and insensitive to small changes in its input.
( ) = log (1 + exp( )) (3.31)  The softplus function can be useful for producing the β or σ parameter of a normal distribution because its range is (0,∞).
The name of the softplus function comes from the  fact that it is a smoothed or “softened” version of  x+ = max(0 ), x .
(3.32)  See figure for a graph of the softplus function.3.4  The following properties are all useful enough that you may wish to memorize them:  68    CHAPTER 3.
PROBABILITY AND INFORMATION THEORY  σ x( ) = exp( )x  exp( ) + exp(0)x (3.33)  d  dx σ x σ x σ x( ) = ( )(1 − ( )) (3.34)  1 ( ) = ( )− σ x σ −x (3.35) log ( ) = ( )σ x −ζ −x (3.36) d  dx ζ x σ x( ) = ( ) (3.37)  ∀ ∈x (0 1), , σ−1 ( ) = logx   x  1 − x   (3.38)  ∀x > , ζ0 −1( ) = log (exp( ) 1)x x − (3.39)  ζ x( ) =   x  −∞ σ y dy( ) (3.40)  ζ x ζ x x( ) − (− ) = (3.41)  The function σ−1(x) is called the logit in statistics, but this term is more rarely used in machine learning.
Equation provides extra justification for the name “softplus.” The softplus3.41 function is intended as a smoothed version of the positive part function, x+ =  max{0, x}.
Just as x can be recovered from its positive part and negative part via the identity x+ − x− = x, it is also possible to recover x using the same relationship between and , as shown in equation .ζ x( ) ζ x(− ) 3.41  3.11 Bayes’ Rule  We often find ourselves in a situation where we know P(y x| ) and need to know P (x y| ).
Fortunately, if we also know P (x), we can compute the desired quantity using Bayes’ rule:  P ( ) =x y| P P( )x ( )y x| P ( )y  .
(3.42)  Note that while P (y) appears in the formula, it is usually feasible to compute P ( ) =y   x P x P x P(y | ) ( ), so we do not need to begin with knowledge of ( )y .
PROBABILITY AND INFORMATION THEORY  Bayes’ rule is straightforward to derive from the definition of conditional probability, but it is useful to know the name of this formula since many texts refer to it by name.
3.12 Technical Details of Continuous Variables  A proper formal understanding of continuous random variables and probability density functions requires developing probability theory in terms of a branch of mathematics known as measure theory.
Measure theory is beyond the scope of this textbook, but we can briefly sketch some of the issues that measure theory is employed to resolve.
In section , we saw that the probability of a continuous vector-valued3.3.2 x lying in some set S is given by the integral of p(x) over the set S. Some choices of set S can produce paradoxes.
For example, it is possible to construct two sets S1 and S2 such that p(x ∈ S1) + p(x ∈ S2) > 1 but S1 ∩ S2 = ∅ .
These sets are generally constructed making very heavy use of the infinite precision of real  numbers, for example by making fractal-shaped sets or sets that are defined by transforming the set of rational numbers.2 One of the key contributions of measure theory is to provide a characterization of the set of sets that we can compute the probability of without encountering paradoxes.
In this book, we only integrate over sets with relatively simple descriptions, so this aspect of measure theory never becomes a relevant concern.
For our purposes, measure theory is more useful for describing theorems that apply to most points in Rn but do not apply to some corner cases.
For our purposes, it is sufficient to understand the intuition that a set of measure zero occupies no volume in the space we are measuring.
Any union of countably many sets that each have measure zero also has measure zero (so the set of all the rational numbers has measure zero, for instance).
A property that holds almost everywhere holds throughout all of space except for on a set of  2 The Banach-Tarski theorem provides a fun example of such sets.
Because the exceptions occupy a negligible amount of space, they can be safely ignored for many applications.
Some important results in probability theory hold for all discrete values but only hold “almost everywhere” for continuous values.
Another technical detail of continuous variables relates to handling continuous random variables that are deterministic functions of one another.
Suppose we have two random variables, x and y, such that y = g(x), where g is an invertible, con- tinuous, differentiable transformation.
If we use the rule py (y) = px (2y) then py will be 0 everywhere except the interval [0, 12 ] 1, and it will be on this interval.
This means   py( ) =y dy  1  2 , (3.43)  which violates the definition of a probability distribution.
The problem with this approach is that it fails to account for the distortion of space introduced by the function g .
Recall that the probability of x lying in an infinitesimally small region with volume δx is given by p(x)δx .
Since g can expand or contract space, the infinitesimal volume surrounding x in x space may have different volume in space.y  To see how to correct the problem, we return to the scalar case.
We need to preserve the property  |py( ( )) = g x dy| |px( )x dx .| (3.44)  Solving from this, we obtain  py( ) = y px(g −1( ))y   ∂x  ∂y   (3.45)  or equivalently  px( ) = x py( ( ))g x   ∂g x( )  ∂x   .
(3.46)  In higher dimensions, the derivative generalizes to the determinant of the Jacobian matrix—the matrix with Ji,j =  ∂xi ∂yj .
PROBABILITY AND INFORMATION THEORY  3.13 Information Theory  Information theory is a branch of applied mathematics that revolves around quantifying how much information is present in a signal.
It was originally invented to study sending messages from discrete alphabets over a noisy channel, such as communication via radio transmission.
In this context, information theory tells how to design optimal codes and calculate the expected length of messages sampled from  specific probability distributions using various encoding schemes.
In the context of machine learning, we can also apply information theory to continuous variables where some of these message length interpretations do not apply.
In this textbook, we mostly use a few key ideas from information theory to characterize probability distributions or quantify similarity between probability distributions.
For more detail on information theory, see Cover and Thomas 2006 MacKay( ) or ( ).2003  The basic intuition behind information theory is that learning that an unlikely event has occurred is more informative than learning that a likely event has occurred.
A message saying “the sun rose this morning” is so uninformative as  to be unnecessary to send, but a message saying “there was a solar eclipse this morning” is very informative.
Specifically,  • Likely events should have low information content, and in the extreme case, events that are guaranteed to happen should have no information content whatsoever.
For example, finding out that a tossed coin has come up as heads twice should convey twice as much information as finding out that a tossed coin has come up as heads once.
In order to satisfy all three of these properties, we define the self-information  of an event x to be= x I x P x .
( ) = log− ( ) (3.48)  In this book, we always use log to mean the natural logarithm, with base e. Our definition of I (x) is therefore written in units of nats.
Other texts use base-2 logarithms and units called bits or shannons; information measured in bits is just a rescaling of information measured in nats.
When x is continuous, we use the same definition of information by analogy, but some of the properties from the discrete case are lost.
For example, an event with unit density still has zero information, despite not being an event that is guaranteed to occur.
We can quantify the amount  of uncertainty in an entire probability distribution using the Shannon entropy:  H( ) = x Ex∼P [ ( )] = I x −Ex∼P [log ( )]P x .
In other words, the Shannon entropy of a distribution is the expected amount of information in an event drawn from that distribution.
It gives a lower bound on the number of bits (if the logarithm is base 2, otherwise the units are different) needed on average to encode symbols drawn from a distribution P. Distributions that are nearly deterministic (where the outcome is nearly certain) have low entropy; distributions that are closer to uniform have high entropy.
If we have two separate probability distributions P (x) andQ (x) over the same  random variable x, we can measure how different these two distributions are using the Kullback-Leibler (KL) divergence:  DKL( ) = P Q Ex∼P  log P x( )  Q x( )   = Ex∼P [log ( ) log ( )]P x − Q x .
(3.50)  In the case of discrete variables, it is the extra amount of information (measured in bits if we use the base logarithm, but in machine learning we usually use nats2 and the natural logarithm) needed to send a message containing symbols drawn from probability distribution P, when we use a code that was designed to minimize the length of messages drawn from probability distribution .Q  The KL divergence has many useful properties, most notably that it is non- negative.
The KL divergence is 0 if and only if P and Q are the same distribution in the case of discrete variables, or equal “almost everywhere” in the case of continuous variables.
Because the KL divergence is non-negative and measures the difference between two distributions, it is often conceptualized as measuring some sort of distance between these distributions.
However, it is not a true distance measure because it is not symmetric: DKL(P Q ) = DKL(Q P ) for some P and Q.
S h a n n o n en tr o p y in n a ts  Figure 3.5: This plot shows how distributions that are closer to deterministic have low Shannon entropy while distributions that are close to uniform have high Shannon entropy.
When p is near 0, the distribution is nearly deterministic, because the random variable is nearly always 0.
When p is near 1, the distribution is nearly deterministic, because the random variable is nearly always 1.
asymmetry means that there are important consequences to the choice of whether to use DKL( )P Q or DKL( )Q P .
See figure for more detail.3.6  A quantity that is closely related to the KL divergence is the cross-entropy H(P,Q) =H (P ) +DKL(P Q ), which is similar to the KL divergence but lacking the term on the left:  H P,Q( ) = −Ex∼P log ( )Q x .
(3.51) Minimizing the cross-entropy with respect to Q is equivalent to minimizing the KL divergence, because does not participate in the omitted term.Q  When computing many of these quantities, it is common to encounter expres- sions of the form 0 log 0.
By convention, in the context of information theory, we treat these expressions as limx→0 x xlog = 0.
3.14 Structured Probabilistic Models  Machine learning algorithms often involve probability distributions over a very large number of random variables.
PROBABILITY AND INFORMATION THEORY  x  P ro  b a b  il it  y  D  en si  ty  q∗ = argminqDKL( )p q  p x( )  q∗( )x  x P  ro b  a b  il it  y  D  en si  ty  q∗ = argminqDKL( )q p  p( )x  q∗ ( )x  Figure 3.6: The KL divergence is asymmetric.
We illustrate the effect of this choice using a mixture of two Gaussians for p , and a single Gaussian for q.
Some applications require an approximation that usually places high probability anywhere that the true distribution places high probability, while other applications require an approximation that rarely places high probability anywhere that the true distribution places low probability.
The choice of the direction of the KL divergence reflects which of these considerations takes priority for each application.
When p has multiple modes, q chooses to blur the modes together, in order to put high probability mass on all of them.
When p has multiple modes that are sufficiently widely separated, as in this figure, the KL divergence is minimized by choosing a single mode, in order to avoid putting probability mass in the low-probability areas between modes of p. Here, we illustrate the outcome when q is chosen to emphasize the left mode.
If the modes are not separated by a sufficiently strong low probability region, then this direction of the KL divergence can still choose to blur the modes.
PROBABILITY AND INFORMATION THEORY  describe the entire joint probability distribution can be very inefficient (both computationally and statistically).
Instead of using a single function to represent a probability distribution, we can split a probability distribution into many factors that we multiply together.
For example, suppose we have three random variables: a, b and c. Suppose that a influences the value of b and b influences the value of c, but that a and c are independent given b.
We can represent the probability distribution over all three variables as a product of probability distributions over two variables:  p , , p p p .
(a b c) = ( )a ( )b a| ( )c b| (3.52)  These factorizations can greatly reduce the number of parameters needed to describe the distribution.
Each factor uses a number of parameters that is exponential in the number of variables in the factor.
This means that we can greatly reduce the cost of representing a distribution if we are able to find a factorization into distributions over fewer variables.
Here we use the word “graph” in the sense of graph theory: a set of vertices that may be connected to each other with edges.
When we represent the factorization of a probability distribution with a graph, we call it a structured probabilistic model or graphical model.
Both kinds of graphical models use a graph G in which each node in the graph corresponds to a random variable, and an edge connecting two random variables means that the probability distribution is able to represent direct interactions between those two random variables.
Directed models use graphs with directed edges, and they represent fac- torizations into conditional probability distributions, as in the example above.
Specifically, a directed model contains one factor for every random variable xi in the distribution, and that factor consists of the conditional distribution over xi given the parents of xi, denoted PaG(xi):  p( ) =x   i  p (xi | PaG (xi)) .
(3.53)  See figure for an example of a directed graph and the factorization of probability3.7 distributions it represents.
Undirected models use graphs with undirected edges, and they represent factorizations into a set of functions; unlike in the directed case, these functions  77    CHAPTER 3.
PROBABILITY AND INFORMATION THEORY  aa  cc  bb  ee  dd  Figure 3.7: A directed graphical model over random variables a, b, c, d and e. This graph corresponds to probability distributions that can be factored as  p , , , , p p p , p p .
(a b c d e) = ( )a ( )b a| (c a| b) ( )d b| ( )e c| (3.54)  This graph allows us to quickly see some properties of the distribution.
For example, a and c interact directly, but a and e interact only indirectly via c.  are usually not probability distributions of any kind.
The output of each factor must be non-negative, but there is no constraint that the factor must sum or integrate to 1 like a probability distribution.
The probability of a configuration of random variables is proportional to the product of all of these factors—assignments that result in larger factor values are more likely.
We therefore divide by a normalizing constant Z, defined to be the sum or integral  over all states of the product of the φ functions, in order to obtain a normalized probability distribution:  p( ) =x 1  Z    i  φ( )i   C( )i  .
(3.55)  See figure for an example of an undirected graph and the factorization of3.8 probability distributions it represents.
Keep in mind that these graphical representations of factorizations are a language for describing probability distributions.
Being directed or undirected is not a property of a probability distribution; it is a property of a particular description of a  78    CHAPTER 3.
PROBABILITY AND INFORMATION THEORY  aa  cc  bb  ee  dd  Figure 3.8: An undirected graphical model over random variables a, b, c, d and e. This graph corresponds to probability distributions that can be factored as  p , , , ,(a b c d e) = 1  Z φ(1)( )a b c, , φ(2)( )b d, φ(3)( )c e, .
For example, a and c interact directly, but a and e interact only indirectly via c.  probability distribution, but any probability distribution may be described in both ways.
Throughout parts and of this book, we will use structured probabilisticI II models merely as a language to describe which direct probabilistic relationships  different machine learning algorithms choose to represent.
No further understanding of structured probabilistic models is needed until the discussion of research topics, in part , where we will explore structured probabilistic models in much greaterIII detail.
This chapter has reviewed the basic concepts of probability theory that are most relevant to deep learning.
                                     Chapter 4  Numerical Computation  Machine learning algorithms usually require a high amount of numerical compu- tation.
This typically refers to algorithms that solve mathematical problems by methods that update estimates of the solution via an iterative process, rather than analytically deriving a formula providing a symbolic expression for the correct so-  lution.
Common operations include optimization (finding the value of an argument that minimizes or maximizes a function) and solving systems of linear equations.
Even just evaluating a mathematical function on a digital computer can be difficult when the function involves real numbers, which cannot be represented precisely using a finite amount of memory.
4.1 Overflow and Underflow  The fundamental difficulty in performing continuous math on a digital computer is that we need to represent infinitely many real numbers with a finite number  of bit patterns.
This means that for almost all real numbers, we incur some approximation error when we represent the number in the computer.
Rounding error is problematic, especially when it compounds across many operations, and can cause algorithms that work in theory to fail in practice if they are not designed to minimize the accumulation of rounding error.
Many functions behave qualitatively differently when their argument is zero rather than a small positive number.
NUMERICAL COMPUTATION  software environments will raise exceptions when this occurs, others will return a result with a placeholder not-a-number value) or taking the logarithm of zero (this is usually treated as −∞, which then becomes not-a-number if it is used for many further arithmetic operations).
One example of a function that must be stabilized against underflow and  overflow is the softmax function.
The softmax function is often used to predict the probabilities associated with a multinoulli distribution.
(4.1)  Consider what happens when all of the xi are equal to some constant c. Analytically, we can see that all of the outputs should be equal to 1n .
When c is very large and positive, exp(c) will overflow, again resulting in the expression as a whole being undefined.
Simple algebra shows that the value of the softmax function is not changed analytically by adding or subtracting a scalar from the input vector.
Subtracting maxi xi results in the largest argument to exp being 0, which rules out the possibility of overflow.
Likewise, at least one term in the denominator has a value of 1, which rules out  the possibility of underflow in the denominator leading to a division by zero.
This means that if we implement log softmax(x) by first running the softmax subroutine then passing the result to the log function, we could erroneously obtain −∞.
Instead, we must implement a separate function that calculates log softmax in a numerically stable way.
The log softmax function can be stabilized using the same trick as we used to stabilize the function.softmax  For the most part, we do not explicitly detail all of the numerical considerations involved in implementing the various algorithms described in this book.
Developers of low-level libraries should keep numerical issues in mind when implementing  deep learning algorithms.
Most readers of this book can simply rely on low- level libraries that provide stable implementations.
In some cases, it is possible to implement a new algorithm and have the new implementation automatically  81    CHAPTER 4.
2012 of a software package that automatically detects and stabilizes many common numerically unstable expressions that arise in the context of deep learning.
4.2 Poor Conditioning  Conditioning refers to how rapidly a function changes with respect to small changes  in its inputs.
Functions that change rapidly when their inputs are perturbed slightly can be problematic for scientific computation because rounding errors in the inputs can result in large changes in the output.
This sensitivity is an intrinsic property of the matrix itself, not the result of rounding error during matrix inversion.
In practice, the error will be compounded further by numerical errors in the inversion process itself.
In this book, we use these terms interchangeably, though some machine learning publications assign special meaning to some of these terms.
f x( ) = 12x 2  f( ) = x x  Figure 4.1: An illustration of how the gradient descent algorithm uses the derivatives of a function can be used to follow the function downhill to a minimum.
We assume the reader is already familiar with calculus, but provide a brief  review of how calculus concepts relate to optimization here.
In other words, it specifies how to scale a small change in the input in order to obtain the corresponding change in the output: f x  f x f( + ) ≈ ( ) + ( )x .
The derivative is therefore useful for minimizing a function because it tells us how to change x in order to make a small improvement in y.
A local minimum is a point where f (x) is lower than at all neighboring points, so it is no longer possible to decrease f(x) by making infinitesimal steps.
NUMERICAL COMPUTATION  Minimum Maximum Saddle point  Figure 4.2: Examples of each of the three types of critical points in 1-D. A critical point is a point with zero slope.
Such a point can either be a local minimum, which is lower than the neighboring points, a local maximum, which is higher than the neighboring points, or a saddle point, which has neighbors that are both higher and lower than the point itself.
See figure for examples of each type of critical point.4.2  A point that obtains the absolute lowest value of f (x) is a global minimum.
In the context of deep learning, we optimize functions that may have many local minima that are not optimal, and many saddle points surrounded by very flat regions.
All of this makes optimization very difficult, especially when the input to the function is multidimensional.
We therefore usually settle for finding a value of f that is very low, but not necessarily minimal in any formal sense.
See figure for an example.4.3  We often minimize functions that have multiple inputs: f : Rn → R. For the concept of “minimization” to make sense, there must still be only one (scalar)  output.
The partial derivative ∂∂xi f(x) measures how f changes as only the variable xi increases at point x.
The gradient generalizes the notion of derivative to the case where the derivative is with respect to a vector: the gradient of f is the vector containing all of the partial derivatives, denoted ∇xf (x).
NUMERICAL COMPUTATION  x  f x(  )  Ideally, we would like to arrive at the global minimum, but this might not be possible.
Figure 4.3: Optimization algorithms may fail to find a global minimum when there are multiple local minima or plateaus present.
In the context of deep learning, we generally accept such solutions even though they are not truly minimal, so long as they correspond to significantly low values of the cost function.
The directional derivative in direction (a unit vector) is the slope of theu  function f in direction u.
In other words, the directional derivative is the derivative of the function f (x+ αu) with respect to α, evaluated at α= 0.
We can do this using the directional derivative:  min u u, u=1  u∇xf( )x (4.3)  = min u u, u=1  || ||u 2||∇xf( )x ||2 cos θ (4.4)  where θ is the angle between u and the gradient.
Substituting in || ||u 2 = 1 and ignoring factors that do not depend on u, this simplifies to minu cos θ.
In other words, the gradient points directly uphill, and the negative gradient points directly downhill.
This is known as the or .method of steepest descent gradient descent  Steepest descent proposes a new point  x = x− ∇ xf( )x (4.5)  85    CHAPTER 4.
NUMERICAL COMPUTATION  where  is the learning rate, a positive scalar determining the size of the step.
Another approach is to evaluate f (x− ∇xf( ))x for several values of  and choose the one that results in the smallest objective function value.
Steepest descent converges when every element of the gradient is zero (or, in practice, very close to zero).
In some cases, we may be able to avoid running this  iterative algorithm, and just jump directly to the critical point by solving the equation ∇xf( ) = 0x for .x  Although gradient descent is limited to optimization in continuous spaces, the general concept of repeatedly making a small move (that is approximately the best small move) towards better configurations can be generalized to discrete spaces.
Ascending an objective function of discrete parameters is called hill climbing ( , ).Russel and Norvig 2003  4.3.1 Beyond the Gradient: Jacobian and Hessian Matrices  Sometimes we need to find all of the partial derivatives of a function whose input and output are both vectors.
Specifically, if we have a function f : Rm → Rn , then the Jacobian matrix J ∈ Rn m× of is defined such thatf J i,j = ∂∂xjf( )x i.
For example, for a function f : Rn → R, the derivative with respect to xi of the derivative of f with respect to xj is denoted as  ∂2  ∂xi∂xj f.  In a single dimension, we can denote d 2  dx2 f by f (x).
This is important  because it tells us whether a gradient step will cause as much of an improvement as we would expect based on the gradient alone.
Suppose we have a quadratic function (many functions that arise in practice are not quadratic but can be approximated well as quadratic, at least locally).
If the gradient is , then we can make a step of size1  along the negative gradient, and the cost function will decrease by .
If the second derivative is negative, the function curves downward, so the cost function will actually decrease by more than .
Finally, if the second derivative is positive, the function curves upward, so the cost function can decrease by less than .
NUMERICAL COMPUTATION  x  f x(  )  Negative curvature  x f x(  )  No curvature  x  f x(  )  Positive curvature  Figure 4.4: The second derivative determines the curvature of a function.
The dashed line indicates the value of the cost function we would expect based on the gradient information alone as we make a gradient step downhill.
In the case of negative curvature, the cost function actually decreases faster than the gradient predicts.
In the case of positive curvature, the function decreases slower than expected and eventually begins to increase, so steps that are too large can actually increase the function inadvertently.
figure to see how different forms of curvature affect the relationship between4.4 the value of the cost function predicted by the gradient and the true value.
Anywhere that the second partial derivatives are continuous, the differential operators are commutative, i.e.
Most of the functions we encounter in the context of deep learning have a symmetric Hessian almost everywhere.
Because the Hessian matrix is real and symmetric, we can decompose it into a set of real eigenvalues and an orthogonal basis of  87    CHAPTER 4.
When d is an eigenvector of H , the second derivative in that direction is given by the corresponding eigenvalue.
For other directions of d, the directional second derivative is a weighted average of all of the eigenvalues, with weights between 0 and 1, and eigenvectors that have smaller angle with d receiving more weight.
The maximum eigenvalue determines the maximum second derivative and the minimum eigenvalue determines the minimum second derivative.
The (directional) second derivative tells us how well we can expect a gradient  descent step to perform.
We can make a second-order Taylor series approximation to the function around the current pointf( )x x(0):  f f( ) x ≈ (x(0)) + (x x− (0))g + 1 2  (x x− (0))H x x( − (0)).
(4.9)  There are three terms here: the original value of the function, the expected improvement due to the slope of the function, and the correction we must apply to account for the curvature of the function.
When gHg is zero or negative, the Taylor series approximation predicts that increasing  forever will decrease f forever.
In practice, the Taylor series is unlikely to remain accurate for large , so one must resort to more heuristic choices of  in this case.
When gHg is positive, solving for the optimal step size that decreases the Taylor series approximation of the function the most yields  ∗ = gg  gHg .
(4.10)  In the worst case, when g aligns with the eigenvector of H corresponding to the maximal eigenvalue λmax, then this optimal step size is given by  1 λmax  .
To the extent that the function we minimize can be approximated well by a quadratic function, the eigenvalues of the Hessian thus determine the scale of the learning rate.
The second derivative can be used to determine whether a critical point is a local maximum, a local minimum, or saddle point.
When the second derivative f (x) > 0, the first derivative f (x) increases as we move to the right and decreases as we move to the left.
In other words, as we move right, the slope begins to point uphill to the right, and as we move left, the slope begins to point uphill to the left.
Using the eigendecomposition of the Hessian matrix, we can generalize the second derivative test to multiple dimensions.
At a critical point, where ∇xf (x) = 0, we can examine the eigenvalues of the Hessian to determine whether the critical point is a local maximum, local minimum, or saddle point.
When the Hessian is positive definite (all its eigenvalues are positive), the point is a local minimum.
This can be seen by observing that the directional second derivative in any direction must be positive, and making reference to the univariate second derivative test.
Likewise, when the Hessian is negative definite (all its eigenvalues are negative), the point is a local maximum.
In multiple dimensions, it is actually possible to find positive evidence of saddle points in some cases.
When at least one eigenvalue is positive and at least one eigenvalue is negative, we know that  x is a local maximum on one cross section of f but a local minimum on another cross section.
Finally, the multidimensional second4.5 derivative test can be inconclusive, just like the univariate version.
The test is inconclusive whenever all of the non-zero eigenvalues have the same sign, but at least one eigenvalue is zero.
This is because the univariate second derivative test is inconclusive in the cross section corresponding to the zero eigenvalue.
The condition number of the Hessian at this point measures how much the second derivatives differ from each other.
This is because in one direction, the derivative increases rapidly, while in another direction, it increases slowly.
Gradient descent is unaware of this change in the derivative so it does not  know that it needs to explore preferentially in the direction where the derivative remains negative for longer.
The step size must be small enough to avoid overshooting the minimum and going uphill in directions with strong positive curvature.
This usually means that the step size is too small to make significant progress in other directions with less curvature.
See figure for an example.4.6  This issue can be resolved by using information from the Hessian matrix to guide  89    CHAPTER 4.
NUMERICAL COMPUTATION   �      �            �      Figure 4.5: A saddle point containing both positive and negative curvature.
In more than one dimension, it is not necessary to have an eigenvalue of 0 in order to get a saddle point: it is only necessary to have both positive and negative eigenvalues.
We can think of a saddle point with both signs of eigenvalues as being a local maximum within one cross section and a local minimum within another cross section.
NUMERICAL COMPUTATION  − − −30 20 10 0 10 20 x1  −30  −20  −10  0  10  20  x 2  Figure 4.6: Gradient descent fails to exploit the curvature information contained in the Hessian matrix.
Here we use gradient descent to minimize a quadratic function f(x) whose Hessian matrix has condition number 5.
This means that the direction of most curvature has five times more curvature than the direction of least curvature.
In this case, the most curvature is in the direction [1, 1] and the least curvature is in the direction [1,−1].
Gradient descent wastes time repeatedly descending canyon walls, because they are the steepest feature.
Because the step size is somewhat too large, it has a tendency to overshoot the bottom of the function and thus needs to descend the opposite canyon wall on the next iteration.
The large positive eigenvalue of the Hessian corresponding to the eigenvector pointed in this direction indicates that this directional derivative is rapidly increasing, so an optimization algorithm based on the Hessian could predict that the steepest direction is not actually a promising search direction in this context.
Newton’s method is based on using a second-order Taylor series expansion to approximate near some pointf( )x x(0) :  f f( ) x ≈ (x(0) )+(x x− (0))∇xf(x(0))+ 1  2 (x x− (0))H x( )(f (0) )(x x− (0)).
(4.11)  If we then solve for the critical point of this function, we obtain:  x∗ = x(0) −H x( )(f (0))−1∇xf(x(0)).
(4.12)  When f is a positive definite quadratic function, Newton’s method consists of applying equation once to jump to the minimum of the function directly.4.12 When f is not truly quadratic but can be locally approximated as a positive definite quadratic, Newton’s method consists of applying equation multiple4.12 times.
Iteratively updating the approximation and jumping to the minimum of the approximation can reach the critical point much faster than gradient descent would.
This is a useful property near a local minimum, but it can be a harmful  property near a saddle point.
As discussed in section , Newton’s method is8.2.3 only appropriate when the nearby critical point is a minimum (all the eigenvalues of the Hessian are positive), whereas gradient descent is not attracted to saddle points unless the gradient points toward them.
Optimization algorithms that use only the gradient, such as gradient descent, are called first-order optimization algorithms.
Optimization algorithms that also use the Hessian matrix, such as Newton’s method, are called second-order optimization algorithms (Nocedal and Wright 2006, ).
The optimization algorithms employed in most contexts in this book are applicable to a wide variety of functions, but come with almost no guarantees.
Deep learning algorithms tend to lack guarantees because the family of functions  used in deep learning is quite complicated.
In many other fields, the dominant approach to optimization is to design optimization algorithms for a limited family of functions.
In the context of deep learning, we sometimes gain some guarantees by restrict- ing ourselves to functions that are either Lipschitz continuous or have Lipschitz continuous derivatives.
A Lipschitz continuous function is a function f whose rate  of change is bounded by a Lipschitz constant L:  ∀ ∀ | − | ≤ L|| − ||x, y, f( )x f( )y x y 2.
(4.13)  This property is useful because it allows us to quantify our assumption that a small change in the input made by an algorithm such as gradient descent will have  92    CHAPTER 4.
Lipschitz continuity is also a fairly weak constraint, and many optimization problems in deep learning can be made Lipschitz continuous with relatively minor modifications.
Convex optimization algorithms are able to provide many more guarantees by making stronger restrictions.
Convex optimization algorithms are applicable only to convex functions—functions for which the Hessian is positive semidefinite everywhere.
Such functions are well-behaved because they lack saddle  points and all of their local minima are necessarily global minima.
Ideas from the analysis of convex optimization algorithms can be useful for proving the convergence of deep learning algorithms.
However, in general, the importance of convex optimization is greatly diminished in the context of deep learning.
For more information about convex optimization, see Boyd and Vandenberghe 2004( ) or Rockafellar 1997( ).
4.4 Constrained Optimization  Sometimes we wish not only to maximize or minimize a function f(x) over all possible values of x.
Instead we may wish to find the maximal or minimal value of f (x) for values of x in some set S. This is known as constrained optimization.
Points x that lie within the set S are called feasible points in constrained optimization terminology.
A common  approach in such situations is to impose a norm constraint, such as .|| || ≤x 1 One simple approach to constrained optimization is simply to modify gradient  descent taking the constraint into account.
If we use a small constant step size , we can make gradient descent steps, then project the result back into S. If we use  a line search, we can search only over step sizes  that yield new x points that are feasible, or we can project each point on the line back into the constraint region.
When possible, this method can be made more efficient by projecting the gradient into the tangent space of the feasible region before taking the step or beginning the line search ( , ).Rosen 1960  A more sophisticated approach is to design a different, unconstrained opti- mization problem whose solution can be converted into a solution to the original, constrained optimization problem.
NUMERICAL COMPUTATION  x ∈ R2 with x constrained to have exactly unit L2 norm, we can instead minimize g(θ) = f ([cos sinθ, θ] ) with respect to θ , then return [cos sinθ, θ] as the solution to the original problem.
This approach requires creativity; the transformation between optimization problems must be designed specifically for each case we encounter.
The Karush–Kuhn–Tucker (KKT) approach1 provides a very general so- lution to constrained optimization.
With the KKT approach, we introduce a new function called the generalized Lagrangian or generalized Lagrange  function.
We want a description of S in terms of m functions g( )i and n functions h( )j so that S = { | ∀x i, g( )i (x) = 0 and ∀j, h( )j (x) ≤ 0}.
The equations involving g( )i are called the equality constraints and the inequalities involving h( )j are called .inequality constraints  We introduce new variables λi andα j for each constraint, these are called the KKT multipliers.
The generalized Lagrangian is then defined as  L , , f(x λ α) = ( ) +x   i  λi g ( )i ( ) +x    j  αjh ( )j ( )x .
(4.14)  We can now solve a constrained minimization problem using unconstrained  optimization of the generalized Lagrangian.
Observe that, so long as at least one feasible point exists and is not permitted to have value , thenf( )x ∞  min x  max λ  max α α, ≥0  L , , .
(x λ α) (4.15)  has the same optimal objective function value and set of optimal points asx  min x∈S  f .
( )x (4.16)  This follows because any time the constraints are satisfied,  max λ  max α α, ≥0  L , , f ,(x λ α) = ( )x (4.17)  while any time a constraint is violated,  max λ  max α α, ≥0  L , , .
(x λ α) = ∞ (4.18)  1 The KKT approach generalizes the method of Lagrange multipliers which allows equality  constraints but not inequality constraints.
NUMERICAL COMPUTATION  These properties guarantee that no infeasible point can be optimal, and that the optimum within the feasible points is unchanged.
To perform constrained maximization, we can construct the generalized La-  grange function of , which leads to this optimization problem:−f( )x  min x  max λ  max α α, ≥0  −f( ) +x   i  λ ig ( )i ( ) +x    j  αjh ( )j ( )x .
(4.19)  We may also convert this to a problem with maximization in the outer loop:  max x  min λ  min α α, ≥0  f( ) +x   i  λig ( )i ( )x −    j  αjh ( )j ( )x .
(4.20)  The sign of the term for the equality constraints does not matter; we may define it with addition or subtraction as we wish, because the optimization is free to choose any sign for each λi.
If a constraint is not active, then the solution to the problem found using that constraint would remain at least a local solution if that constraint were removed.
For example, a convex problem with an entire region of globally optimal points (a wide, flat, region of equal cost) could have a subset of this region eliminated by constraints, or a non-convex problem could have better local stationary points excluded by a constraint that is inactive at convergence.
However, the point found at convergence remains a stationary point whether or not the inactive constraints are included.
Because an inactive h( )i has negative value, then the solution to minx maxλmaxα α, ≥0L(x λ α, , ) will have αi = 0.
In other words, for all i, we know that at least one of the constraints αi ≥ 0 and h( )i (x) ≤ 0 must be active at the solution.
To gain some intuition for this idea, we can say that either the solution is on the boundary imposed by the inequality and we must use its KKT multiplier to influence the solution to x, or the inequality has no influence on the solution and we represent this by zeroing out its KKT multiplier.
These properties are called the Karush-Kuhn-Tucker (KKT) conditions ( , ;Karush 1939 Kuhn and Tucker 1951, ).
4.5 Example: Linear Least Squares  Suppose we want to find the value of that minimizesx  f( ) =x 1  2 || − ||Ax b 22.
However, we can also explore how to solve it using gradient-based optimization as a simple example of how these techniques work.
Algorithm 4.1 An algorithm to minimize f(x) = 12 || − ||Ax b 22 with respect to x using gradient descent, starting from an arbitrary value of .x  Set the step size ( ) and tolerance ( ) to small, positive numbers. δ  while ||AAx A− b||2 > δ do x x← −    AAx A− b    end while  One can also solve this problem using Newton’s method.
In this case, because the true function is quadratic, the quadratic approximation employed by Newton’s method is exact, and the algorithm converges to the global minimum in a single step.
NUMERICAL COMPUTATION  The smallest-norm solution to the unconstrained least squares problem may be found using the Moore-Penrose pseudoinverse: x =A+b.
(4.27)  When the norm of x exceeds 1, this derivative is positive, so to follow the derivative uphill and increase the Lagrangian with respect to λ, we increase λ.
Because the coefficient on the xx penalty has increased, solving the linear equation for x will now yield a solution with smaller norm.
The process of solving the linear equation and adjusting λ continues until x has the correct norm and the derivative on λ is  0.
                                     Chapter 5  Machine Learning Basics  Deep learning is a specific kind of machine learning.
In order to understand deep learning well, one must have a solid understanding of the basic principles of machine learning.
This chapter provides a brief course in the most important general principles that will be applied throughout the rest of the book.
Novice readers or  those who want a wider perspective are encouraged to consider machine learning textbooks with a more comprehensive coverage of the fundamentals, such as Murphy ( ) or ( ).
If you are already familiar with machine learning basics,2012 Bishop 2006 feel free to skip ahead to section .
That section covers some perspectives5.11 on traditional machine learning techniques that have strongly influenced the development of deep learning algorithms.
We begin with a definition of what a learning algorithm is, and present an example: the linear regression algorithm.
We then proceed to describe how the challenge of fitting the training data differs from the challenge of finding patterns that generalize to new data.
Most machine learning algorithms have settings called hyperparameters that must be determined external to the learning algorithm  itself; we discuss how to set these using additional data.
Machine learning is essentially a form of applied statistics with increased emphasis on the use of computers to statistically estimate complicated functions and a decreased emphasis on proving confidence intervals around these functions; we therefore present the two central approaches to statistics: frequentist estimators and Bayesian inference.
Most machine learning algorithms can be divided into the categories of supervised learning and unsupervised learning; we describe these categories and give some examples of simple learning algorithms from each category.
Most deep learning algorithms are based on an optimization algorithm called stochastic gradient descent.
MACHINE LEARNING BASICS  an optimization algorithm, a cost function, a model, and a dataset to build a machine learning algorithm.
Finally, in section , we describe some of the5.11 factors that have limited the ability of traditional machine learning to generalize.
These challenges have motivated the development of deep learning algorithms that overcome these obstacles.
5.1 Learning Algorithms  A machine learning algorithm is an algorithm that is able to learn from data.
Mitchell 1997( ) provides the definition “A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P , if its performance at tasks in T , as measured by P , improves with experience E.” One can imagine a very wide variety of experiences E, tasks T , and performance measures P , and we do not make any attempt in this book to provide a formal definition of what may be used for each of these entities.
Instead, the following sections provide intuitive descriptions and examples of the different kinds of tasks, performance measures and experiences that can be used to construct machine learning algorithms.
5.1.1 The Task, T  Machine learning allows us to tackle tasks that are too difficult to solve with fixed programs written and designed by human beings.
From a scientific and philosophical point of view, machine learning is interesting because developing our understanding of machine learning entails developing our understanding of the principles that underlie intelligence.
In this relatively formal definition of the word “task,” the process of learning  itself is not the task.
We could program the robot to learn to walk, or we could attempt to directly write a program that specifies how to walk manually.
Machine learning tasks are usually described in terms of how the machine learning system should process an example.
An example is a collection of features that have been quantitatively measured from some object or event that we want the machine learning system to process.
We typically represent an example as a vector x ∈ Rn where each entry xi of the vector is another feature.
Some of the most common machine learning tasks include the following:  • Classification: In this type of task, the computer program is asked to specify which of k categories some input belongs to.
When y = f (x), the model assigns an input described by vector x to a category identified by numeric code y.
There are other variants of the classification task, for example, where f outputs a probability distribution over classes.
An example of a classification task is object recognition, where the input is an image (usually described as a set of pixel brightness values), and the output is a numeric code identifying the object in the image.
For example, the Willow Garage PR2 robot is able to act as a waiter that can recognize different kinds of drinks and deliver them to people on command (Good- fellow 2010et al., ).
2012 Ioffe and Szegedy 2015  recognition is the same basic technology that allows computers to recognize faces (Taigman 2014et al., ), which can be used to automatically tag people in photo collections and allow computers to interact more naturally with their users.
• Classification with missing inputs: Classification becomes more chal- lenging if the computer program is not guaranteed that every measurement in its input vector will always be provided.
In order to solve the classification task, the learning algorithm only has to define a function mappingsingle from a vector input to a categorical output.
When some of the inputs may be missing, rather than providing a single classification function, the learning algorithm must learn a of functions.
This kind of situation  arises frequently in medical diagnosis, because many kinds of medical tests are expensive or invasive.
One way to efficiently define such a large set of functions is to learn a probability distribution over all of the relevant variables, then solve the classification task by marginalizing out the missing variables.
With n input variables, we can now obtain all 2n different classifi- cation functions needed for each possible set of missing inputs, but we only need to learn a single function describing the joint probability distribution.
Many of the other tasks described in this section can also be generalized to work with missing inputs; classification with missing inputs is just one example of what machine learning can do.
MACHINE LEARNING BASICS  • Regression: In this type of task, the computer program is asked to predict a numerical value given some input.
To solve this task, the learning algorithm is asked to output a function f : Rn → R. This type of task is similar to classification, except that the format of output is different.
An example of a regression task is the prediction of the expected claim amount that an insured person will make (used to set insurance premiums), or the prediction of future prices of securities.
• Transcription: In this type of task, the machine learning system is asked to observe a relatively unstructured representation of some kind of data and transcribe it into discrete, textual form.
For example, in optical character recognition, the computer program is shown a photograph containing an image of text and is asked to return this text in the form of a sequence of characters (e.g., in ASCII or Unicode format).
Another example is speech recognition, where the computer program is provided an audio waveform and emits a sequence of characters or word ID codes describing the words that were spoken in the audio recording.
Deep learning is a crucial component of modern speech recognition systems used at major companies including Microsoft, IBM and Google ( ,Hinton et al.
• Machine translation: In a machine translation task, the input already consists of a sequence of symbols in some language, and the computer program must convert this into a sequence of symbols in another language.
Deep learning has recently begun to have an important impact on this kind of task (Sutskever 2014 Bahdanau 2015et al., ; et al., ).
• Structured output: Structured output tasks involve any task where the output is a vector (or other data structure containing multiple values) with important relationships between the different elements.
This is a broad category, and subsumes the transcription and translation tasks described above, but also many other tasks.
One example is parsing—mapping a natural language sentence into a tree that describes its grammatical structure  and tagging nodes of the trees as being verbs, nouns, or adverbs, and so on.
Another example is pixel-wise segmentation of images, where the computer program assigns every pixel in an image to a specific category.
MACHINE LEARNING BASICS  example, deep learning can be used to annotate the locations of roads in aerial photographs (Mnih and Hinton 2010, ).
The output need not have its form mirror the structure of the input as closely as in these annotation-style tasks.
For example, in image captioning, the computer program observes an image and outputs a natural language sentence describing the image (Kiros et al.
et al., , ;2014a b Mao , ;2015 Vinyals 2015b Donahue 2014et al., ; et al., ; Karpathy and Li 2015 Fang 2015 Xu 2015, ; et al., ; et al., ).
These tasks are called structured output tasks because the program must output several  values that are all tightly inter-related.
• Anomaly detection: In this type of task, the computer program sifts through a set of events or objects, and flags some of them as being unusual or atypical.
If a thief steals your credit card or credit card information, the thief’s purchases will often come from a different probability distribution over purchase types than your own.
The credit card company can prevent fraud by placing a hold on an account as soon as that card has  been used for an uncharacteristic purchase.
• Synthesis and sampling: In this type of task, the machine learning al- gorithm is asked to generate new examples that are similar to those in the training data.
Synthesis and sampling via machine learning can be useful for media applications where it can be expensive or boring for an artist to generate large volumes of content by hand.
For example, video games can automatically generate textures for large objects or landscapes, rather than requiring an artist to manually label each pixel ( , ).
2013 cases, we want the sampling or synthesis procedure to generate some specific  kind of output given the input.
For example, in a speech synthesis task, we provide a written sentence and ask the program to emit an audio waveform containing a spoken version of that sentence.
This is a kind of structured output task, but with the added qualification that there is no single correct output for each input, and we explicitly desire a large amount of variation in the output, in order for the output to seem more natural and realistic.
• Imputation of missing values: In this type of task, the machine learning algorithm is given a new example x ∈ Rn, but with some entries xi of x missing.
MACHINE LEARNING BASICS  • Denoising: In this type of task, the machine learning algorithm is given in input a corrupted example x̃ ∈ Rn obtained by an unknown corruption process from a clean example x ∈ Rn.
The learner must predict the clean example x from its corrupted version x̃, or more generally predict the conditional  probability distribution p(x | x̃).
• Density estimation or probability mass function estimation: In the density estimation problem, the machine learning algorithm is asked to learn a function pmodel : R  n → R, where pmodel(x) can be interpreted as a probability density function (if x is continuous) or a probability mass  function (if x is discrete) on the space that the examples were drawn from.
To do such a task well (we will specify exactly what that means when we discuss performance measures P ), the algorithm needs to learn the structure of the data it has seen.
Most of the tasks described above require the learning algorithm to at least implicitly capture the structure of the probability distribution.
In principle, we can then perform computations on that distribution in order to solve the other tasks as well.
For example, if we have performed density estimation to obtain a probability distribution p(x), we can use that distribution to solve the missing value imputation task.
If  a value xi is missing and all of the other values, denoted x−i, are given, then we know the distribution over it is given by p(xi | x−i).
In practice, density estimation does not always allow us to solve all of these related tasks, because in many cases the required operations on p(x) are computationally intractable.
The types of tasks we list here are intended only to provide examples of what machine learning can do, not to define a rigid taxonomy of tasks.
5.1.2 The Performance Measure, P  In order to evaluate the abilities of a machine learning algorithm, we must design a quantitative measure of its performance.
Usually this performance measure P is specific to the task being carried out by the system.T  For tasks such as classification, classification with missing inputs, and tran- scription, we often measure the accuracy of the model.
MACHINE LEARNING BASICS  also obtain equivalent information by measuring the error rate, the proportion of examples for which the model produces an incorrect output.
For tasks such as density estimation, it does not make sense to measure accuracy, error rate, or any other kind of 0-1 loss.
Instead, we must use a different performance metric that gives the model a continuous-valued score for each example.
The most common approach is to report the average log-probability the model assigns to some examples.
Usually we are interested in how well the machine learning algorithm performs on data that it has not seen before, since this determines how well it will work when deployed in the real world.
We therefore evaluate these performance measures using a test set of data that is separate from the data used for training the machine learning system.
The choice of performance measure may seem straightforward and objective, but it is often difficult to choose a performance measure that corresponds well to the desired behavior of the system.
For example, when performing a transcription task, should we measure the accuracy of the system at transcribing entire sequences, or should we use a more fine-grained  performance measure that gives partial credit for getting some elements of the sequence correct?
When performing a regression task, should we penalize the system more if it frequently makes medium-sized mistakes or if it rarely makes very large mistakes?
In other cases, we know what quantity we would ideally like to measure, but measuring it is impractical.
Computing the actual probability value assigned to a specific point in space in many such models is intractable.
In these cases, one must design an alternative criterion that still corresponds to the design objectives, or design a good approximation to the desired criterion.
5.1.3 The Experience, E  Machine learning algorithms can be broadly categorized as unsupervised or supervised by what kind of experience they are allowed to have during the learning process.
Most of the learning algorithms in this book can be understood as being allowed to experience an entire dataset.
Sometimes we will also call examples .5.1.1 data points  One of the oldest datasets studied by statisticians and machine learning re- searchers is the Iris dataset ( , ).
The features within each example are the measurements of each of the parts of the plant: the sepal length, sepal width, petal length and petal width.
Unsupervised learning algorithms experience a dataset containing many features, then learn useful properties of the structure of this dataset.
In the context of deep learning, we usually want to learn the entire probability distribution that generated a dataset, whether explicitly as in density estimation or implicitly for tasks like synthesis or denoising.
Some other unsupervised learning algorithms perform other roles, like clustering, which consists of dividing the dataset into clusters of similar examples.
Supervised learning algorithms experience a dataset containing features, but each example is also associated with a label or target.
A supervised learning algorithm can study the Iris dataset and learn to classify iris plants into three  different species based on their measurements.
Roughly speaking, unsupervised learning involves observing several examples of a random vector x, and attempting to implicitly or explicitly learn the proba- bility distribution p(x), or some interesting properties of that distribution, while supervised learning involves observing several examples of a random vector x and an associated value or vector y, and learning to predict y from x, usually by estimating p(y x| ).
The term supervised learning originates from the view of the target y being provided by an instructor or teacher who shows the machine learning system what to do.
In unsupervised learning, there is no instructor or teacher, and the algorithm must learn to make sense of the data without this guide.
For example, the chain rule of probability states that for a vector x ∈ Rn, the joint distribution can be decomposed as  p( ) =x  n  i=1  p(xi | x1, .
(5.1)  This decomposition means that we can solve the ostensibly unsupervised problem of modeling p(x) by splitting it into n supervised learning problems.
MACHINE LEARNING BASICS  can solve the supervised learning problem of learning p(y | x) by using traditional unsupervised learning technologies to learn the joint distribution p(x, y) and inferring  p y( | x) = p , y(x ) y p , y(x  ) .
(5.2)  Though unsupervised learning and supervised learning are not completely formal or distinct concepts, they do help to roughly categorize some of the things we do with machine learning algorithms.
Traditionally, people refer to regression, classification and structured output problems as supervised learning.
For example, in semi- supervised learning, some examples include a supervision target but others do not.
In multi-instance learning, an entire collection of examples is labeled as containing or not containing an example of a class, but the individual members of the collection are not labeled.
For example, reinforcement learning algorithms interact with an environment, so there is a feedback loop between the learning system and its experiences.
Please see ( )Sutton and Barto 1998 or Bertsekas and Tsitsiklis 1996( ) for information about reinforcement learning, and ( ) for the deep learning approach to reinforcement learning.Mnih et al.
This means we can represent the dataset with a design matrix X ∈ R150 4× , where Xi,1 is the sepal length of plant i,Xi,2 is the sepal width of plant i, etc.
We will describe most of the learning algorithms in this book in terms of how they operate on design matrix datasets.
Of course, to describe a dataset as a design matrix, it must be possible to describe each example as a vector, and each of these vectors must be the same size.
For example, if you have a collection of photographs with different widths and heights, then different photographs will contain different numbers of pixels, so not all of the photographs may be described with the same length of vector.
In cases like these, rather than describing the dataset as a matrix withm rows, we will describe it as a set containingm elements: {x(1),x(2), .
In the case of supervised learning, the example contains a label or target as well as a collection of features.
For example, if we want to use a learning algorithm to perform object recognition from photographs, we need to specify which object appears in each of the photos.
We might do this with a numeric code, with 0  signifying a person, 1 signifying a car, 2 signifying a cat, etc.
Often when working with a dataset containing a design matrix of feature observations X, we also provide a vector of labels , withy yi providing the label for example .i  Of course, sometimes the label may be more than just a single number.
For example, if we want to train a speech recognition system to transcribe entire sentences, then the label for each example sentence is a sequence of words.
Just as there is no formal definition of supervised and unsupervised learning, there is no rigid taxonomy of datasets or experiences.
The structures described here cover most cases, but it is always possible to design new ones for new applications.
5.1.4 Example: Linear Regression  Our definition of a machine learning algorithm as an algorithm that is capable of improving a computer program’s performance at some task via experience is somewhat abstract.
To make this more concrete, we present an example of a simple machine learning algorithm: linear regression.
We will return to this  example repeatedly as we introduce more machine learning concepts that help to understand its behavior.
In other words, the goal is to build a system that can take a vector x ∈ Rn as input and predict the value of a scalar y ∈ R as its output.
We define the output to bey  ŷ = wx (5.3)  where w ∈ Rn is a vector of .parameters Parameters are values that control the behavior of the system.
In this case, wi is  the coefficient that we multiply by feature xi before summing up the contributions from all the features.
MACHINE LEARNING BASICS  then increasing the value of that feature increases the value of our prediction ŷ.
If a feature receives a negative weight, then increasing the value of that feature decreases the value of our prediction.
Next we need a definition of our performance measure, .P  Suppose that we have a design matrix of m example inputs that we will not  use for training, only for evaluating how well the model performs.
We also have a vector of regression targets providing the correct value of y for each of these examples.
We refer to the design matrix of inputs as X( )test and the vector of regression targets as y( )test .
One way of measuring the performance of the model is to compute the mean squared error of the model on the test set.
If ŷ( )test gives the predictions of the model on the test set, then the mean squared error is given by  MSEtest = 1  m    i  (ŷ( )test − y( )test )2i .
We can also see that  MSEtest = 1  m ||ŷ( )test − y( )test ||22 , (5.5)  so the error increases whenever the Euclidean distance between the predictions  and the targets increases.
To make a machine learning algorithm, we need to design an algorithm that will improve the weights w in a way that reduces MSEtest when the algorithm is allowed to gain experience by observing a training set (X( )train ,y( )train ).
One intuitive way of doing this (which we will justify later, in section ) is just to5.5.1 minimize the mean squared error on the training set, MSEtrain.
To minimize MSE train, we can simply solve for where its gradient is :0  ∇wMSEtrain = 0 (5.6)  ⇒ ∇w 1  m ||ŷ( )train − y( )train ||22 = 0 (5.7)  ⇒ 1 m  ∇w||X( )train w y− ( )train ||22 = 0 (5.8) 108    CHAPTER 5.
M S E (t ra in )  Optimization of w  Figure 5.1: A linear regression problem, with a training set consisting of ten data points, each containing one feature.
Because there is only one feature, the weight vector w contains only a single parameter to learn, w1.
(Left)Observe that linear regression learns to set w1 such that the line y =w1x comes as close as possible to passing through all the training points.
The plotted point indicates the value of(Right) w1 found by the normal equations, which we can see minimizes the mean squared error on the training set.
⇒ ∇w  X ( )train w y− ( )train   X( )train w y− ( )train   = 0 (5.9)  ⇒ ∇w  wX ( )train X ( )train w w− 2 X( )train y ( )train + y( )train y( )train   = 0  (5.10) ⇒ 2X( )train X( )train w X− 2 ( )train y( )train = 0 (5.11)  ⇒ w =  X( )train X( )train  −1 X( )train y( )train (5.12)  The system of equations whose solution is given by equation is known as5.12 the normal equations.
For an example of the linear regression learning algorithm in action,  see figure .5.1  It is worth noting that the term linear regression is often used to refer to a slightly more sophisticated model with one additional parameter—an intercept term .
In this modelb  ŷ = wx+ b (5.13)  so the mapping from parameters to predictions is still a linear function but the mapping from features to predictions is now an affine function.
This extension to affine functions means that the plot of the model’s predictions still looks like a line, but it need not pass through the origin.
MACHINE LEARNING BASICS  b, one can continue to use the model with only weights but augment x with an extra entry that is always set to .
This terminology derives from the point of view that the output of the transformation is biased toward being b in the absence of any input.
This term is different from the idea of a statistical bias, in which a statistical estimation  algorithm’s expected estimate of a quantity is not equal to the true quantity.
Linear regression is of course an extremely simple and limited learning algorithm, but it provides an example of how a learning algorithm can work.
In the subsequent sections we will describe some of the basic principles underlying learning algorithm design and demonstrate how these principles can be used to build more complicated learning algorithms.
5.2 Capacity, Overfitting and Underfitting  The central challenge in machine learning is that we must perform well on new,  previously unseen inputs—not just those on which our model was trained.
Typically, when training a machine learning model, we have access to a training set, we can compute some error measure on the training set called the training error, and we reduce this training error.
What separates machine learning from optimization is that we want the generalization error, also called the test error, to be low as well.
Here the expectation is taken across different possible inputs, drawn from the distribution of inputs we expect the system to encounter in practice.
We typically estimate the generalization error of a machine learning model by  measuring its performance on a test set of examples that were collected separately from the training set.
In our linear regression example, we trained the model by minimizing the training error,  1  m( )train ||X ( )train w y− ( )train ||22 , (5.14)  but we actually care about the test error, 1 m( )test  ||X( )test w y− ( )test ||22.
If we are allowed to make some assumptions about how the training and test set are collected, then we can make some progress.
The train and test data are generated by a probability distribution over datasets called the data generating process.
These assumptions are that the examples in each dataset are independent from each other, and that the train  set and test set are identically distributed, drawn from the same probability distribution as each other.
This assumption allows us to describe the data gen- erating process with a probability distribution over a single example.
One immediate connection we can observe between the training and test error is that the expected training error of a randomly selected model is equal to the expected test error of that model.
Suppose we have a probability distribution  p(x, y) and we sample from it repeatedly to generate the train set and the test  set.
For some fixed value w , the expected training set error is exactly the same as the expected test set error, because both expectations are formed using the same dataset sampling process.
Of course, when we use a machine learning algorithm, we do not fix the parameters ahead of time, then sample both datasets.
We sample the training set, then use it to choose the parameters to reduce training set error, then sample the test set.
Under this process, the expected test error is greater than or equal to the expected value of training error.
These two factors correspond to the two central challenges in machine learning: underfitting and overfitting .
Underfitting occurs when the model is not able to obtain a sufficiently low error value on the training set.
Models with high capacity can overfit by memorizing properties of the training set that do not serve them well on the test set.
One way to control the capacity of a learning algorithm is by choosing its hypothesis space, the set of functions that the learning algorithm is allowed to select as being the solution.
For example, the linear regression algorithm has the set of all linear functions of its input as its hypothesis space.
We can generalize linear regression to include polynomials, rather than just linear functions, in its  hypothesis space.
A polynomial of degree one gives us the linear regression model with which we are already familiar, with prediction  ŷ b wx.= + (5.15)  By introducing x2 as another feature provided to the linear regression model, we can learn a model that is quadratic as a function of :x  ŷ b w= + 1x w+ 2x 2 .
(5.16)  Though this model implements a quadratic function of its , the output isinput still a linear function of the parameters, so we can still use the normal equations to train the model in closed form.
We can continue to add more powers of x as additional features, for example to obtain a polynomial of degree 9:  ŷ b= +  9  i=1  wix i .
(5.17)  Machine learning algorithms will generally perform best when their capacity  is appropriate for the true complexity of the task they need to perform and the amount of training data they are provided with.
Models with high capacity can solve complex tasks, but when their capacity is higher than needed to solve the present task they may overfit.
We compare a linear, quadratic5.2 and degree-9 predictor attempting to fit a problem where the true underlying function is quadratic.
The linear function is unable to capture the curvature in the true underlying problem, so it underfits.
The degree-9 predictor is capable of representing the correct function, but it is also capable of representing infinitely many other functions that pass exactly through the training points, because we  112    CHAPTER 5.
We have little chance of choosing a solution that generalizes well when so many wildly different solutions exist.
In this example, the quadratic model is perfectly matched to the true structure of the task so it generalizes well to new data.
                     Figure 5.2: We fit three models to this example training set.
The training data was generated synthetically, by randomly sampling x values and choosing y deterministically by evaluating a quadratic function.
(Left)A linear function fit to the data suffers from underfitting—it cannot capture the curvature that is present in the data.
The solution passes through all of the training points exactly, but we have not been lucky enough for it to extract the correct structure.
It now has a deep valley in between two training points that does not appear in the true underlying function.
It also increases sharply on the left side of the data, while the true function decreases in this area.
So far we have described only one way of changing a model’s capacity: by changing the number of input features it has, and simultaneously adding new  parameters associated with those features.
The model specifies which family of functions the learning algorithm can choose from when varying the parameters in order to reduce a training objective.
In many cases, finding the best function within this family is a very difficult optimization problem.
In practice, the learning algorithm does not actually find the best function, but merely one that significantly reduces the training error.
MACHINE LEARNING BASICS  the imperfection of the optimization algorithm, mean that the learning algorithm’s effective capacity may be less than the representational capacity of the model family.
Our modern ideas about improving the generalization of machine learning models are refinements of thought dating back to philosophers at least as early as Ptolemy.
Many early scholars invoke a principle of parsimony that is now most widely known as Occam’s razor (c. 1287-1347).
This principle states that among competing hypotheses that explain known observations equally well, one  should choose the “simplest” one.
This idea was formalized and made more precise in the 20th century by the founders of statistical learning theory (Vapnik and Chervonenkis 1971 Vapnik 1982 Blumer 1989 Vapnik 1995, ; , ; et al., ; , ).
The VC dimension is defined as being the largest possible value of m for which there exists a training set of m different x points that the classifier can label arbitrarily.
Quantifying the capacity of the model allows statistical learning theory to make quantitative predictions.
The most important results in statistical learning theory show that the discrepancy between training error and generalization error  is bounded from above by a quantity that grows as the model capacity grows but shrinks as the number of training examples increases (Vapnik and Chervonenkis, 1971 Vapnik 1982 Blumer 1989 Vapnik 1995; , ; et al., ; , ).
These bounds provide intellectual justification that machine learning algorithms can work, but they are rarely used in practice when working with deep learning algorithms.
This is in part because the bounds are often quite loose and in part because it can be quite difficult to determine the capacity of deep learning algorithms.
The problem of determining the capacity of a deep learning model is especially difficult because the effective capacity is limited by the capabilities of the optimization algorithm, and we have little theoretical understanding of the very general non-convex optimization problems involved in deep learning.
We must remember that while simpler functions are more likely to generalize (to have a small gap between training and test error) we must still choose a sufficiently complex hypothesis to achieve low training error.
Typically, training error decreases until it asymptotes to the minimum possible error value as model capacity increases (assuming the error measure has a minimum value).
This is illustrated in figure .5.3  To reach the most extreme case of arbitrarily high capacity, we introduce  114    CHAPTER 5.
MACHINE LEARNING BASICS  0 Optimal Capacity  Capacity  E rr o r  Underfitting zone Overfitting zone  Generalization gap  Training error  Generalization error  Figure 5.3: Typical relationship between capacity and error.
As we increase capacity, training error decreases, but the gap between training and generalization error increases.
Eventually, the size of this gap outweighs the decrease in training error, and we enter the overfitting regime, where capacity is too large, above the optimal capacity.
Parametric models learn a function described by a parameter vector whose size is finite and fixed before any data is observed.
Sometimes, non-parametric models are just theoretical abstractions (such as an algorithm that searches over all possible probability distributions) that cannot be implemented in practice.
However, we can also design practical non-parametric models by making their complexity a function of the training set size.
Unlike linear regression, which has a fixed-length vector of weights, the nearest neighbor regression model simply stores the X and y from the training set.
When asked to classify a test point x , the model looks up the nearest entry in the training set and returns the associated regression target.
The algorithm can also be generalized to distance metrics other than the L2 norm, such as learned distance metrics ( , ).
2005 allowed to break ties by averaging the yi values for allXi,: that are tied for nearest, then this algorithm is able to achieve the minimum possible training error (which might be greater than zero, if two identical inputs are associated with different outputs) on any regression dataset.
MACHINE LEARNING BASICS  parametric learning algorithm inside another algorithm that increases the number of parameters as needed.
For example, we could imagine an outer loop of learning that changes the degree of the polynomial learned by linear regression on top of a polynomial expansion of the input.
The ideal model is an oracle that simply knows the true probability distribution that generates the data.
Even such a model will still incur some error on many problems, because there may still be some noise in the distribution.
In the case of supervised learning, the mapping from x to y may be inherently stochastic,  or y may be a deterministic function that involves other variables besides those included in x.
The error incurred by an oracle making predictions from the true distribution is called thep , y(x ) Bayes error.
For non-parametric models, more data yields better generalization until the best possible error is achieved.
Any fixed parametric model with less than optimal capacity will asymptote to an error value that exceeds the Bayes error.
Note that it is possible for the model to have optimal5.4 capacity and yet still have a large gap between training and generalization error.
5.2.1 The No Free Lunch Theorem  Learning theory claims that a machine learning algorithm can generalize well from a finite training set of examples.
Inductive reasoning, or inferring general rules from a limited set of examples, is not logically valid.
To logically infer a rule describing every member of a set, one must have information about every member of that set.
In part, machine learning avoids this problem by offering only probabilistic rules, rather than the entirely certain rules used in purely logical reasoning.
Machine learning promises to find rules that are probably mostcorrect about members of the set they concern.
The no free lunch theorem for machine learning (Wolpert 1996, ) states that, averaged over all possible data generating distributions, every classification algorithm has the same error rate when classifying previously unobserved points.
In other words, in some sense, no machine learning algorithm is universally any better than any other.
MACHINE LEARNING BASICS                                                                                  Figure 5.4: The effect of the training dataset size on the train and test error, as well as on the optimal model capacity.
We constructed a synthetic regression problem based on adding a moderate amount of noise to a degree-5 polynomial, generated a single test set, and then generated several different sizes of training set.
For each size, we generated 40 different training sets in order to plot error bars showing 95 percent confidence intervals.
(Top)The MSE on the training and test set for two different models: a quadratic model, and a model with degree chosen to minimize the test error.
Simultaneously, the test error decreases, because fewer incorrect hypotheses are consistent with the training data.
The quadratic model does not have enough capacity to solve the task, so its test error asymptotes to a high value.
The training error can fall below the Bayes error, due to the ability of the training algorithm to memorize specific instances of the training set.
As the training size increases to infinity, the training error of any fixed-capacity model (here, the quadratic model) must rise to at least the Bayes error.
As the training set size increases, the optimal capacity(Bottom) (shown here as the degree of the optimal polynomial regressor) increases.
MACHINE LEARNING BASICS  performance (over all possible tasks) as merely predicting that every point belongs to the same class.
If we make assumptions about the kinds of probability distributions we encounter in real-world applications, then we can design learning algorithms that perform well on these distributions.
This means that the goal of machine learning research is not to seek a universal learning algorithm or the absolute best learning algorithm.
Instead, our goal is to  understand what kinds of distributions are relevant to the “real world” that an AI agent experiences, and what kinds of machine learning algorithms perform well on data drawn from the kinds of data generating distributions we care about.
5.2.2 Regularization  The no free lunch theorem implies that we must design our machine learning algorithms to perform well on a specific task.
When these preferences are aligned with the learning problems we ask the algorithm to solve, it performs better.
So far, the only method of modifying a learning algorithm that we have discussed concretely is to increase or decrease the model’s representational capacity by adding or removing functions from the hypothesis space of solutions the learning algorithm is able to choose.
We gave the specific example of increasing or decreasing the degree of a polynomial for a regression problem.
The behavior of our algorithm is strongly affected not just by how large we make the set of functions allowed in its hypothesis space, but by the specific identity of those functions.
The learning algorithm we have studied so far, linear regression,  has a hypothesis space consisting of the set of linear functions of its input.
These linear functions can be very useful for problems where the relationship between inputs and outputs truly is close to linear.
For example, linear regression would not perform very well if we tried to use it to predict sin(x) from x.
We can thus control the performance of our algorithms by choosing what kind of functions we allow them to draw solutions from, as well as by controlling the amount of these functions.
We can also give a learning algorithm a preference for one solution in its hypothesis space to another.
To perform linear regression with weight decay, we minimize a sum comprising both the mean squared error on the training and a criterion J (w) that expresses a preference for the weights to have smaller squared L2 norm.
Specifically,  J( ) = w MSEtrain + λw w, (5.18)  where λ is a value chosen ahead of time that controls the strength of our preference for smaller weights.
Minimizing J(w) results in a choice of weights that make a tradeoff between fitting the training data and being small.
As an example of how we can control a model’s tendency to overfit or underfit via weight  decay, we can train a high-degree polynomial regression model with different values of .
See figure for the results.λ 5.5                        Figure 5.5: We fit a high-degree polynomial regression model to our example training set from figure .
The true function is quadratic, but here we use only models with degree 9.5.2 We vary the amount of weight decay to prevent these high-degree models from overfitting.
With a(Center) medium value of , the learning algorithm recovers a curve with the right general shape.λ Even though the model is capable of representing functions with much more complicated shape, weight decay has encouraged it to use a simpler function described by smaller coefficients.
With weight decay approaching zero (i.e., using the Moore-Penrose(Right) pseudoinverse to solve the underdetermined problem with minimal regularization), the degree-9 polynomial overfits significantly, as we saw in figure .5.2  119    CHAPTER 5.
MACHINE LEARNING BASICS  More generally, we can regularize a model that learns a function f(x; θ) by adding a penalty called a regularizer to the cost function.
Expressing preferences for one function over another is a more general way of controlling a model’s capacity than including or excluding members from the hypothesis space.
We can think of excluding a function from a hypothesis space as expressing an infinitely strong preference against that function.
In our weight decay example, we expressed our preference for linear functions defined with smaller weights explicitly, via an extra term in the criterion we minimize.
There are many other ways of expressing preferences for different solutions, both implicitly and explicitly.
Regularization is any modification we make to a learning algorithm that is intended to reduce its generalization error but not its training error.
Regularization is one of the central concerns of the field of machine learning, rivaled in its importance only by optimization.
The no free lunch theorem has made it clear that there is no best machine learning algorithm, and, in particular, no best form of regularization.
Instead we must choose a form of regularization that is well-suited to the particular task  we want to solve.
The philosophy of deep learning in general and this book in particular is that a very wide range of tasks (such as all of the intellectual tasks that people can do) may all be solved effectively using very general-purpose forms of regularization.
5.3 Hyperparameters and Validation Sets  Most machine learning algorithms have several settings that we can use to control the behavior of the learning algorithm.
The values of hyperparameters are not adapted by the learning algorithm  itself (though we can design a nested learning procedure where one learning algorithm learns the best hyperparameters for another learning algorithm).
In the polynomial regression example we saw in figure , there is a single5.2 hyperparameter: the degree of the polynomial, which acts as a capacity hyper- parameter.
Sometimes a setting is chosen to be a hyperparameter that the learning al- gorithm does not learn because it is difficult to optimize.
MACHINE LEARNING BASICS  setting must be a hyperparameter because it is not appropriate to learn that hyperparameter on the training set.
If learned on the training set, such hyperparameters would always choose the maximum possible model capacity, resulting in overfitting (refer to figure ).
For example, we can always fit the training set better with a higher5.3 degree polynomial and a weight decay setting of λ = 0 than we could with a lower degree polynomial and a positive weight decay setting.
To solve this problem, we need a validation set of examples that the training  algorithm does not observe.
Earlier we discussed how a held-out test set, composed of examples coming from the same distribution as the training set, can be used to estimate the generalization error of a learner, after the learning process has completed.
It is important that the test examples are not used in any way to make choices about the model, including its hyperparameters.
The other subset is our validation set, used to estimate the generalization error during or after training, allowing for the hyperparameters to be updated accordingly.
The subset of data used to  learn the parameters is still typically called the training set, even though this may be confused with the larger pool of data used for the entire training process.
Since the validation set is used to “train” the hyperparameters, the validation set error will underestimate the generalization error, though typically by a smaller amount than the training error.
After all hyperparameter optimization is complete, the generalization error may be estimated using the test set.
In practice, when the same test set has been used repeatedly to evaluate performance of different algorithms over many years, and especially if we consider all the attempts from the scientific community at beating the reported state-of-  the-art performance on that test set, we end up having optimistic evaluations with the test set as well.
Benchmarks can thus become stale and then do not reflect the true field performance of a trained system.
Thankfully, the community tends to move on to new (and usually more ambitious and larger) benchmark datasets.
MACHINE LEARNING BASICS  5.3.1 Cross-Validation  Dividing the dataset into a fixed training set and a fixed test set can be problematic  if it results in the test set being small.
A small test set implies statistical uncertainty around the estimated average test error, making it difficult to claim that algorithm A works better than algorithm on the given task.B  When the dataset has hundreds of thousands of examples or more, this is not a serious issue.
When the dataset is too small, are alternative procedures enable one to use all of the examples in the estimation of the mean test error, at the price of increased computational cost.
These procedures are based on the idea of repeating the training and testing computation on different randomly chosen subsets or splits of the original dataset.
The most common of these is the k-fold cross-validation procedure, shown in algorithm , in which a partition of the dataset is formed by5.1 splitting it into k non-overlapping subsets.
On trial i, the i -th subset of the data is used as the test set and the rest of the data is used as the training set.
One problem is that there exist no unbiased estimators of the variance of such average error estimators (Bengio and Grandvalet 2004, ), but approximations are typically used.
5.4 Estimators, Bias and Variance  The field of statistics gives us many tools that can be used to achieve the machine learning goal of solving a task not only on the training set but also to generalize.
Foundational concepts such as parameter estimation, bias and variance are useful  to formally characterize notions of generalization, underfitting and overfitting.
5.4.1 Point Estimation  Point estimation is the attempt to provide the single “best” prediction of some quantity of interest.
In general the quantity of interest can be a single parameter or a vector of parameters in some parametric model, such as the weights in our linear regression example in section , but it can also be a whole function.5.1.4  In order to distinguish estimates of parameters from their true value, our convention will be to denote a point estimate of a parameter byθ θ̂.
It can be used to estimate generalization error of a learning algorithm A when the given dataset D is too small for a simple train/test or train/valid split to yield accurate estimation of generalization error, because the mean of a loss L on a small test set may have too  high variance.
The dataset D contains as elements the abstract examples z( )i (for the i-th example), which could stand for an (input,target) pair z( )i = (x( )i , y( )i ) in the case of supervised learning, or for just an input z( )i = x( )i in the case of unsupervised learning.
The algorithm returns the vector of errors e for each example in D, whose mean is the estimated generalization error.
The errors on individual examples can be used to compute a confidence interval around the mean (equation ).
While these confidence intervals are not well-justified after the5.47 use of cross-validation, it is still common practice to use them to declare that algorithm A is better than algorithm B only if the confidence interval of the error of algorithm A lies below and does not intersect the confidence interval of algorithm B.
Define KFoldXV( ):D, A, L, k Require: D, the given dataset, with elements z( )i  Require: A, the learning algorithm, seen as a function that takes a dataset as input and outputs a learned function Require: L, the loss function, seen as a function from a learned function f and an example z( )i ∈ ∈D to a scalar R Require: k, the number of folds Split into mutually exclusive subsetsD k Di, whose union is .D for doi kfrom to1  fi = (A D D\ i) for z( )j in Di do ej = (L fi , z  ( )j ) end for end for Return e  123    CHAPTER 5.
(5.19)  The definition does not require that g return a value that is close to the true θ or even that the range of g is the same as the set of allowable values of θ.
This definition of a point estimator is very general and allows the designer of an estimator great flexibility.
While almost any function thus qualifies as an estimator, a good estimator is a function whose output is close to the true underlying θ that generated the training data.
That is, we assume that the true parameter value θ is fixed but unknown, while the point estimate θ̂ is a function of the data.
Point estimation can also refer to the estimation of the relationship between input and target variables.
Function Estimation As we mentioned above, sometimes we are interested in performing function estimation (or function approximation).
We assume that there is a function  f (x) that describes the approximate relationship between y and x.
For example, we may assume that y = f(x) + , where  stands for the part of y that is not predictable from x.
Function estimation is really just the same as estimating a parameter θ; the function estimator f̂ is simply a point estimator in function space.
The linear regression example (discussed above in section ) and5.1.4 the polynomial regression example (discussed in section ) are both examples of5.2 scenarios that may be interpreted either as estimating a parameter w or estimating a function f̂ ymapping from tox .
We now review the most commonly studied properties of point estimators and discuss what they tell us about these estimators.
5.4.2 Bias  The bias of an estimator is defined as:  bias(θ̂m) = (E θ̂m) − θ (5.20)  124    CHAPTER 5.
MACHINE LEARNING BASICS  where the expectation is over the data (seen as samples from a random variable) and θ is the true underlying value of θ used to define the data generating distri- bution.
An estimator θ̂m is said to be asymptotically unbiased if limm→∞ bias(θ̂m) = 0, which implies that limm→∞ E(θ̂m) = θ.
, x( )m } that are independently and identically distributed according to a Bernoulli distri- bution with mean :θ  P x( ( )i ; ) = θ θx ( )i  (1 )− θ (1−x( )i ) .
(5.21) A common estimator for the θ parameter of this distribution is the mean of the training samples:  θ̂m = 1  m  m  i=1  x( )i .
(5.22)  To determine whether this estimator is biased, we can substitute equation 5.22 into equation :5.20  bias(θ̂m) = [E θ̂m] − θ (5.23)  = E   1  m  m  i=1  x ( )i   − θ (5.24)  = 1  m  m  i=1  E   x( )i   − θ (5.25)  = 1  m  m  i=1  1  x( )i =0   x( )i θx  ( )i  (1 )− θ (1−x( )i )   − θ (5.26)  = 1  m  m  i=1  ( )θ − θ (5.27)  = = 0θ θ− (5.28)  Since bias( θ̂) = 0, we say that our estimator θ̂ is unbiased.
, x( )m } that are independently and identically distributed according to a Gaussian distribution p(x( )i ) = N (x( )i ; µ, σ2 ), where i ∈ {1, .
MACHINE LEARNING BASICS  Recall that the Gaussian probability density function is given by  p x( ( )i ;µ, σ2) = 1√  2πσ2 exp   −1  2  (x( )i − µ)2 σ2    .
(5.29)  A common estimator of the Gaussian mean parameter is known as the sample mean:  µ̂m = 1  m  m  i=1  x( )i (5.30)  To determine the bias of the sample mean, we are again interested in calculating its expectation:  bias(µ̂m) = [ˆE µm] − µ (5.31)  = E   1  m  m  i=1  x( )i   − µ (5.32)  =   1  m  m  i=1  E   x( )i   − µ (5.33)  =   1  m  m  i=1  µ   − µ (5.34)  = = 0µ µ− (5.35)  Thus we find that the sample mean is an unbiased estimator of Gaussian mean parameter.
Example: Estimators of the Variance of a Gaussian Distribution As an example, we compare two different estimators of the variance parameter σ2 of a Gaussian distribution.
The first estimator of σ2 we consider is known as the sample variance:  σ̂2m = 1  m  m  i=1   x( )i − µ̂m  2 , (5.36)  where µ̂m is the sample mean, defined above.
More formally, we are interested in computing  bias(σ̂ 2m) = [ˆE σ 2 m ] − σ2 (5.37)  126    CHAPTER 5.
MACHINE LEARNING BASICS  We begin by evaluating the term E[σ̂ 2m ]:  E[σ̂2m ] =E   1  m  m  i=1   x( )i − µ̂m  2   (5.38)  = m− 1 m  σ2 (5.39)  Returning to equation , we conclude that the bias of5.37 σ̂2m is −σ2/m.
The unbiased sample variance estimator  σ̃2m = 1  m− 1  m  i=1   x( )i − µ̂m  2 (5.40)  provides an alternative approach.
That is, we find that E[σ̃2m] = σ  2:  E[σ̃2m] = E   1  m− 1  m  i=1   x( )i − µ̂m  2   (5.41)  = m  m− 1E[σ̂ 2 m ] (5.42)  = m  m− 1   m− 1 m  σ2   (5.43)  = σ2.
5.4.3 Variance and Standard Error  Another property of the estimator that we might want to consider is how much we expect it to vary as a function of the data sample.
Just as we computed the expectation of the estimator to determine its bias, we can compute its variance.
The variance of an estimator is simply the variance  Var(θ̂) (5.45)  where the random variable is the training set.
MACHINE LEARNING BASICS  The variance or the standard error of an estimator provides a measure of how we would expect the estimate we compute from data to vary as we independently resample the dataset from the underlying data generating process.
Just as we might like an estimator to exhibit low bias we would also like it to have relatively low variance.
When we compute any statistic using a finite number of samples, our estimate of the true underlying parameter is uncertain, in the sense that we could have obtained other samples from the same distribution and their statistics would have  been different.
The standard error of the mean is given by  SE(µ̂m) =  Var   1  m  m  i=1  x( )i    = σ√ m , (5.46)  where σ2 is the true variance of the samples xi.
Unfortunately, neither the square root of the sample variance nor the square root of the unbiased estimator of the variance provide an unbiased estimate of the standard deviation.
For large , the approximation is quite reasonable.m  The standard error of the mean is very useful in machine learning experiments.
We often estimate the generalization error by computing the sample mean of the error on the test set.
Taking advantage of the central limit theorem, which tells us that the mean will be approximately distributed with a normal distribution, we can use the standard error to compute the probability that the true expectation falls in any chosen interval.
For example, the 95% confidence interval centered on the mean µ̂m is  (µ̂m− 1 96SE(ˆ. µm) ˆ, µm + 1 96SE(ˆ. µm)), (5.47)  under the normal distribution with mean µ̂m and variance SE(µ̂m) 2 .
In machine  learning experiments, it is common to say that algorithmA is better than algorithm B if the upper bound of the 95% confidence interval for the error of algorithmA is less than the lower bound of the 95% confidence interval for the error of algorithm B.
MACHINE LEARNING BASICS  Example: Bernoulli Distribution We once again consider a set of samples {x(1), .
, x( )m } drawn independently and identically from a Bernoulli distribution (recall P(x( )i ;θ) = θx  ( )i (1 − θ)(1−x( )i )).
Var  θ̂m   = Var   1  m  m  i=1  x( )i   (5.48)  = 1  m2  m  i=1  Var  x( )i   (5.49)  = 1  m2  m  i=1  θ θ(1 − ) (5.50)  = 1  m2 mθ θ(1 − ) (5.51)  = 1  m θ θ(1 − ) (5.52)  The variance of the estimator decreases as a function of m, the number of examples in the dataset.
This is a common property of popular estimators that we will return to when we discuss consistency (see section ).5.4.5  5.4.4 Trading off Bias and Variance to Minimize Mean Squared Error  Bias and variance measure two different sources of error in an estimator.
Variance on the other hand, provides a measure of the deviation from the expected estimator value that any particular sampling of the data is likely to cause.
What happens when we are given a choice between two estimators, one with more bias and one with more variance?
For example, imagine that we are interested in approximating the function shown in figure and we are only offered the choice between a model with large bias and5.2 one that suffers from large variance.
Alter- natively, we can also compare the mean squared error (MSE) of the estimates:  MSE = [(E θ̂m− θ)2 ] (5.53) = Bias(θ̂m)  2 + Var(θ̂m) (5.54)  129    CHAPTER 5.
MACHINE LEARNING BASICS  The MSE measures the overall expected deviation—in a squared error sense— between the estimator and the true value of the parameter θ.
As is clear from equation , evaluating the MSE incorporates both the bias and the variance.5.54 Desirable estimators are those with small MSE and these are estimators that manage to keep both their bias and variance somewhat in check.
Capacity  Bias Generalization  error Variance  Optimal  capacity  Overfitting zoneUnderfitting zone  Figure 5.6: As capacity increases (x-axis), bias (dotted) tends to decrease and variance (dashed) tends to increase, yielding another U-shaped curve for generalization error (bold curve).
If we vary capacity along one axis, there is an optimal capacity, with underfitting when the capacity is below this optimum and overfitting when it is above.
This relationship is similar to the relationship between capacity, underfitting, and overfitting, discussed in section and figure .5.2 5.3  The relationship between bias and variance is tightly linked to the machine  learning concepts of capacity, underfitting and overfitting.
In the case where gen- eralization error is measured by the MSE (where bias and variance are meaningful components of generalization error), increasing capacity tends to increase variance and decrease bias.
This is illustrated in figure , where we see again the U-shaped5.6 curve of generalization error as a function of capacity.
5.4.5 Consistency  So far we have discussed the properties of various estimators for a training set of  fixed size.
Usually, we are also concerned with the behavior of an estimator as the amount of training data grows.
In particular, we usually wish that, as the number of data pointsm in our dataset increases, our point estimates converge to the true  130    CHAPTER 5.
(5.55)  The symbol plim indicates convergence in probability, meaning that for any  > 0, P (|θ̂m − |θ > ) → 0 as m → ∞.
It is sometimes referred to as weak consistency, with strong consistency referring to the almost sure convergence of θ̂ to θ.
Consistency ensures that the bias induced by the estimator diminishes as the number of data examples grows.
For example, consider estimating the  mean parameter µ of a normal distribution N (x; µ, σ2), with a dataset consisting of m samples: {x(1), .
5.5 Maximum Likelihood Estimation  Previously, we have seen some definitions of common estimators and analyzed their properties.
Rather than guessing that some function might make a good estimator and then analyzing its bias and  variance, we would like to have some principle from which we can derive specific functions that are good estimators for different models.
Let pmodel(x;θ) be a parametric family of probability distributions over the same space indexed by θ.
In other words, pmodel(x;θ ) maps any configuration x to a real number estimating the true probability pdata( )x .
The maximum likelihood estimator for is then defined asθ  θML = arg max θ  pmodel( ; )X θ (5.56)  = arg max θ  m  i=1  pmodel(x ( )i ; )θ (5.57)  131    CHAPTER 5.
MACHINE LEARNING BASICS  This product over many probabilities can be inconvenient for a variety of reasons.
To obtain a more convenient but equivalent optimization problem, we observe that taking the logarithm of the likelihood does not change its arg max but does conveniently transform a product into a sum:  θML = arg max θ  m  i=1  log pmodel(x ( )i ; )θ .
(5.58)  Because the arg max does not change when we rescale the cost function, we can divide by m to obtain a version of the criterion that is expressed as an expectation with respect to the empirical distribution p̂data defined by the training data:  θML = arg max θ  Ex∼p̂data log pmodel( ; )x θ .
(5.59)  One way to interpret maximum likelihood estimation is to view it as minimizing the dissimilarity between the empirical distribution p̂data defined by the training set and the model distribution, with the degree of dissimilarity between the two measured by the KL divergence.
This means when we train the model to minimize the KL divergence, we need only minimize  − Ex∼p̂data [log pmodel( )]x (5.61) which is of course the same as the maximization in equation .5.59  Minimizing this KL divergence corresponds exactly to minimizing the cross- entropy between the distributions.
Many authors use the term “cross-entropy” to  identify specifically the negative log-likelihood of a Bernoulli or softmax distribution, but that is a misnomer.
Any loss consisting of a negative log-likelihood is a cross- entropy between the empirical distribution defined by the training set and the probability distribution defined by model.
For example, mean squared error is the cross-entropy between the empirical distribution and a Gaussian model.
We can thus see maximum likelihood as an attempt to make the model dis- tribution match the empirical distribution p̂data .
Ideally, we would like to match the true data generating distribution pdata , but we have no direct access to this distribution.
While the optimal θ is the same regardless of whether we are maximizing the likelihood or minimizing the KL divergence, the values of the objective functions  132    CHAPTER 5.
Maximum likelihood thus becomes minimization of the negative log-likelihood (NLL), or equivalently, minimization of the cross entropy.
The perspective of maximum likelihood as minimum KL divergence becomes helpful in this case because the KL divergence has a known minimum value of zero.
The negative log-likelihood can actually become negative when is real-valued.x  5.5.1 Conditional Log-Likelihood and Mean Squared Error  The maximum likelihood estimator can readily be generalized to the case where our goal is to estimate a conditional probability P(y x| ;θ) in order to predict y given x .
If X represents all our inputs and Y all our observed targets, then the conditional maximum likelihood estimator is  θML = arg max θ  P .
( ; )Y X| θ (5.62)  If the examples are assumed to be i.i.d., then this can be decomposed into  θML = arg max θ  m  i=1  log (P y( )i | x( )i ; )θ .
(5.63)  Example: Linear Regression as Maximum Likelihood Linear regression, introduced earlier in section , may be justified as a maximum likelihood5.1.4 procedure.
Previously, we motivated linear regression as an algorithm that learns to take an input x and produce an output value ŷ.
The mapping from x to ŷ is chosen to minimize mean squared error, a criterion that we introduced more or less arbitrarily.
Instead of producing a single prediction ŷ, we now think of the model as producing a conditional distribution p(y | x).
We can imagine that with an infinitely large training set, we might see several training examples with the same input value x but different values of y.
The goal of the learning algorithm is now to fit the distribution p(y | x) to all of those different y values that are all compatible with x.
To derive the same linear regression algorithm we obtained before, we define p(y | x) = N (y; ŷ(x;w), σ2).
We will see that this choice of the functional form of p(y | x) causes the maximum likelihood estimation procedure to yield the same learning algorithm as we developed before.
MACHINE LEARNING BASICS  examples are assumed to be i.i.d., the conditional log-likelihood (equation ) is5.63 given by  m  i=1  log (p y( )i | x( )i ; )θ (5.64)  = log−m σ − m 2  log(2 )π − m  i=1  ŷ ( )i − y( )i 2  2σ2 , (5.65)  where ŷ ( )i is the output of the linear regression on the i-th input x( )i and m is the number of the training examples.
Comparing the log-likelihood with the mean squared error,  MSEtrain = 1  m  m  i=1  ||ŷ ( )i − y( )i ||2 , (5.66)  we immediately see that maximizing the log-likelihood with respect to w yields the same estimate of the parametersw as does minimizing the mean squared error.
5.5.2 Properties of Maximum Likelihood  The main appeal of the maximum likelihood estimator is that it can be shown to be the best estimator asymptotically, as the number of examples m→ ∞, in terms of its rate of convergence as increases.m  Under appropriate conditions, the maximum likelihood estimator has the property of consistency (see section above), meaning that as the number5.4.5 of training examples approaches infinity, the maximum likelihood estimate of a parameter converges to the true value of the parameter.
• The true distribution pdata must correspond to exactly one value of θ. Other- wise, maximum likelihood can recover the correct pdata , but will not be able to determine which value of was used by the data generating processing.θ  There are other inductive principles besides the maximum likelihood estima- tor, many of which share the property of being consistent estimators.
MACHINE LEARNING BASICS  consistent estimators can differ in their statistic efficiency, meaning that one consistent estimator may obtain lower generalization error for a fixed number of samples m, or equivalently, may require fewer examples to obtain a fixed level of generalization error.
Statistical efficiency is typically studied in the parametric case (like in linear regression) where our goal is to estimate the value of a parameter (and assuming it is possible to identify the true parameter), not the value of a function.
A way to measure how close we are to the true parameter is by the expected mean squared  error, computing the squared difference between the estimated and true parameter values, where the expectation is over m training samples from the data generating distribution.
That parametric mean squared error decreases as m increases, and for m large, the Cramér-Rao lower bound ( , ; , ) shows that noRao 1945 Cramér 1946 consistent estimator has a lower mean squared error than the maximum likelihood estimator.
For these reasons (consistency and efficiency), maximum likelihood is often considered the preferred estimator to use for machine learning.
When the number of examples is small enough to yield overfitting behavior, regularization strategies such as weight decay may be used to obtain a biased version of maximum likelihood that has less variance when training data is limited.
5.6 Bayesian Statistics  So far we have discussed frequentist statistics and approaches based on estimat- ing a single value of θ, then making all predictions thereafter based on that one estimate.
As discussed in section  , the frequentist perspective is that the true5.4.1 parameter value θ is fixed but unknown, while the point estimate θ̂ is a random variable on account of it being a function of the dataset (which is seen as random).
On the other hand, the true parameter θ is unknown or uncertain and thus is represented as a random variable.
Before observing the data, we represent our knowledge of θ using the prior probability distribution, p(θ) (sometimes referred to as simply “the prior”).
For example, one might assume thata priori θ lies in some finite range or volume, with a uniform distribution.
Many priors instead reflect a preference for “simpler” solutions (such as smaller magnitude coefficients, or a function that is closer to being constant).
, x( )m )  (5.67)  In the scenarios where Bayesian estimation is typically used, the prior begins as a relatively uniform or Gaussian distribution with high entropy, and the observation of the data usually causes the posterior to lose entropy and concentrate around a few highly likely values of the parameters.
First, unlike the maximum likelihood approach that makes predictions using a point estimate of θ, the Bayesian approach is to make predictions using a full distribution over θ.
For example, after observing m examples, the predicted distribution over the next data sample, x( +1)m , is given by  p x( ( +1)m | x(1) , .
, x( )m ) d .θ (5.68)  Here each value of θ with positive probability density contributes to the prediction of the next example, with the contribution weighted by the posterior density itself.
, x( )m }, if we are still quite uncertain about the value of θ, then this uncertainty is incorporated directly into any predictions we might make.
In section , we discussed how the frequentist approach addresses the uncer-5.4  tainty in a given point estimate of θ by evaluating its variance.
The variance of the estimator is an assessment of how the estimate might change with alternative samplings of the observed data.
The Bayesian answer to the question of how to deal with the uncertainty in the estimator is to simply integrate over it, which tends to protect well against overfitting.
This integral is of course just an application of the laws of probability, making the Bayesian approach simple to justify, while the frequentist machinery for constructing an estimator is based on the rather ad hoc decision to summarize all knowledge contained in the dataset with a single point estimate.
The second important difference between the Bayesian approach to estimation and the maximum likelihood approach is due to the contribution of the Bayesian  136    CHAPTER 5.
The prior has an influence by shifting probability mass density towards regions of the parameter space that are preferred .
In practice,a priori the prior often expresses a preference for models that are simpler or more smooth.
Critics of the Bayesian approach identify the prior as a source of subjective human judgment impacting the predictions.
Bayesian methods typically generalize much better when limited training data is available, but typically suffer from high computational cost when the number of training examples is large.
Example: Bayesian Linear Regression Here we consider the Bayesian esti- mation approach to learning the linear regression parameters.
In linear regression, we learn a linear mapping from an input vector x ∈ Rn to predict the value of a scalar .
(5.69)  Given a set of m training samples (X( )train ,y( )train ), we can express the prediction of over the entire training set as:y  ŷ( )train = X ( )train w. (5.70)  Expressed as a Gaussian conditional distribution on y( )train , we have  p(y( )train |X ( )train ,w y) = (N ( )train ;X( )train w I, ) (5.71)  ∝ exp   −1 2 (y( )train −X( )train w)(y( )train −X( )train w)   ,  (5.72)  where we follow the standard MSE formulation in assuming that the Gaussian variance on y is one.
In what follows, to reduce the notational burden, we refer to (X( )train ,y ( )train ) ( )as simply X y, .
To determine the posterior distribution over the model parameter vector w , we first need to specify a prior distribution.
While it is sometimes difficult or unnatural  to express our prior beliefs in terms of the parameters of the model, in practice we typically assume a fairly broad distribution expressing a high degree of uncertainty about θ.
For real-valued parameters it is common to use a Gaussian as a prior distribution:  p( ) = ( ;w N w µ0 ,Λ0) exp∝   − 1 2  (w µ− 0)Λ−10 (w µ− 0)  , (5.73)  137    CHAPTER 5.
MACHINE LEARNING BASICS  where µ0 and Λ0 are the prior distribution mean vector and covariance matrix respectively.1  With the prior thus specified, we can now proceed in determining the posterior distribution over the model parameters.
p , p , p(w X| y) ∝ (y X| w) ( )w (5.74)  ∝ exp   −1 2  ( )y Xw−  ( )y Xw−   exp   −1  2 (w µ− 0)Λ−10 (w µ− 0)    (5.75)  ∝ exp   −1 2   −2yXw w+ XXw w+ Λ−10 w µ− 2 0Λ−10 w   .
Using  these new variables, we find that the posterior may be rewritten as a Gaussian distribution:  p ,(w X| y) exp∝   − 1 2  (w µ− m)Λ−1m (w µ− m) + 1  2 µmΛ  −1 m µm   (5.77)  ∝ exp   − 1 2  (w µ− m)Λ−1m (w µ− m)  .
(5.78)  All terms that do not include the parameter vector w have been omitted; they are implied by the fact that the distribution must be normalized to integrate to .1 Equation shows how to normalize a multivariate Gaussian distribution.3.23  Examining this posterior distribution allows us to gain some intuition for the effect of Bayesian inference.
If we set Λ0 =  1 αI,  then µm gives the same estimate of w as does frequentist linear regression with a weight decay penalty of αww.
One difference is that the Bayesian estimate is undefined if α is set to zero—-we are not allowed to begin the Bayesian learning process with an infinitely wide prior on w. The more important difference is that the Bayesian estimate provides a covariance matrix, showing how likely all the different values of are, rather than providing only the estimatew µm.
5.6.1 Maximum (MAP) EstimationA Posteriori  While the most principled approach is to make predictions using the full Bayesian posterior distribution over the parameter θ , it is still often desirable to have a  1 Unless there is a reason to assume a particular covariance structure, we typically assume a  diagonal covariance matrix Λ0 = diag(λ0).
One common reason for desiring a point estimate is that most operations involving the Bayesian posterior for most interesting models are intractable, and a point estimate offers a tractable approximation.
Rather than simply returning to the maximum likelihood estimate, we can still gain some of the benefit of the Bayesian approach by allowing the prior to influence the choice of the point estimate.
The MAP estimate chooses the point of maximal posterior probability (or maximal probability density in the more common  case of continuous ):θ  θMAP = arg max θ  p( ) = arg maxθ x| θ  log ( ) + log ( )p x θ| p θ .
the standard log- likelihood term, and , corresponding to the prior distribution.log ( )p θ  As an example, consider a linear regression model with a Gaussian prior on the weights w. If this prior is given by N(w ;0, 1λI2), then the log-prior term in equation is proportional to the familiar5.79 λww weight decay penalty, plus a term that does not depend on w and does not affect the learning process.
As with full Bayesian inference, MAP Bayesian inference has the advantage of  leveraging information that is brought by the prior and cannot be found in the training data.
This additional information helps to reduce the variance in the MAP point estimate (in comparison to the ML estimate).
Many regularized estimation strategies, such as maximum likelihood learning regularized with weight decay, can be interpreted as making the MAP approxima- tion to Bayesian inference.
This view applies when the regularization consists of adding an extra term to the objective function that corresponds to log p(θ ).
Other regularization terms depend on the data, which of course a prior probability distribution is not allowed to do.
MAP Bayesian inference provides a straightforward way to design complicated yet interpretable regularization terms.
For example, a more complicated penalty term can be derived by using a mixture of Gaussians, rather than a single Gaussian distribution, as the prior (Nowlan and Hinton 1992, ).
MACHINE LEARNING BASICS  5.7 Supervised Learning Algorithms  Recall from section that supervised learning algorithms are, roughly speaking,5.1.3 learning algorithms that learn to associate some input with some output, given a training set of examples of inputs x and outputs y.
In many cases the outputs y may be difficult to collect automatically and must be provided by a human “supervisor,” but the term still applies even when the training set targets were  collected automatically.
5.7.1 Probabilistic Supervised Learning  Most supervised learning algorithms in this book are based on estimating a probability distribution p(y | x).
We can do this simply by using maximum likelihood estimation to find the best parameter vector θ for a parametric family of distributions .p y( | x θ; )  We have already seen that linear regression corresponds to the family  p y y( | Nx θ; ) = ( ;θx I, ).
(5.80)  We can generalize linear regression to the classification scenario by defining a  different family of probability distributions.
If we have two classes, class 0 and class 1, then we need only specify the probability of one of these classes.
The probability of class 1 determines the probability of class 0, because these two values must add up to 1.
The normal distribution over real-valued numbers that we used for linear regression is parametrized in terms of a mean.
A distribution over a binary variable is slightly more complicated, because its mean must always be between 0 and 1.
One way to solve this problem is to use the logistic sigmoid function to squash the output of the linear function into the interval (0, 1) and interpret that value as a probability:  p y σ( = 1 ; ) = | x θ (θx).
(5.81)  This approach is known as logistic regression (a somewhat strange name since we use the model for classification rather than regression).
In the case of linear regression, we were able to find the optimal weights by solving the normal equations.
MACHINE LEARNING BASICS  This same strategy can be applied to essentially any supervised learning problem, by writing down a parametric family of conditional probability distributions over the right kind of input and output variables.
5.7.2 Support Vector Machines  One of the most influential approaches to supervised learning is the support vector machine ( , ;Boser et al.
Unlike logistic regression, the support vector machine does not provide probabilities, but only outputs a class identity.
The kernel trick consists of observing that many machine learning algorithms can be written exclusively in terms of dot products between examples.
For example, it can be shown that the linear function used by the support vector machine can  be re-written as  wx+ = +b b m  i=1  αix x( )i (5.82)  where x( )i is a training example and α is a vector of coefficients.
Rewriting the  learning algorithm this way allows us to replace x by the output of a given feature function φ(x) and the dot product with a function k(x x, ( )i ) = φ(x)·φ(x( )i ) called a kernel.
In some infinite dimensional spaces, we need to use other kinds of inner products, for example, inner products based on integration rather than summation.
After replacing dot products with kernel evaluations, we can make predictions using the function  f b( ) = x +   i  αik ,(x x ( )i ).
(5.83)  This function is nonlinear with respect to x, but the relationship between φ(x) and f (x) is linear.
The kernel-based function is exactly equivalent to preprocessing the data by applying φ( )x to all inputs, then learning a linear model in the new transformed space.
First, it allows us to learn models that are nonlinear as a function of x using convex optimization techniques that are  141    CHAPTER 5.
This is possible because we consider φ fixed and optimize only α, i.e., the optimization algorithm can view the decision function as being linear in a different space.
Second, the kernel function k often admits an implementation that is significantly more computational efficient than naively constructing two vectors and explicitly taking their dot product.φ( )x  In some cases, φ(x) can even be infinite dimensional, which would result in an infinite computational cost for the naive, explicit approach.
As an example of an infinite-dimensional feature space with a tractable kernel, we construct a feature mapping φ(x) over the non-negative integers x.
We can write a kernel function k(x, x ( )i ) = min(x, x( )i ) that is exactly equivalent to the corresponding infinite-dimensional dot product.
The most commonly used kernel is the Gaussian kernel  k , , σ(u v u v) = (N − ; 0 2I) (5.84)  where N(x;µ,Σ) is the standard normal density.
This kernel is also known as the radial basis function (RBF) kernel, because its value decreases along lines in v space radiating outward from u.
The Gaussian kernel corresponds to a dot product in an infinite-dimensional space, but the derivation of this space is less straightforward than in our example of the kernel over the integers.min  We can think of the Gaussian kernel as performing a kind of template match- ing.
When a test point x is near x according to Euclidean distance, the Gaussian kernel has a large response, indicating that x is very similar to the x template.
Overall, the prediction will combine many such training labels weighted by the  similarity of the corresponding training examples.
The category of algorithms that employ the kernel trick is known as kernel machines or kernel methods ( , ;Williams and Rasmussen 1996 Schölkopf 1999et al., ).
A major drawback to kernel machines is that the cost of evaluating the decision function is linear in the number of training examples, because the i-th example contributes a term αik(x x,  ( )i ) to the decision function.
Support vector machines are able to mitigate this by learning an α vector that contains mostly zeros.
Classifying a new example then requires evaluating the kernel function only for the training examples that have non-zero αi.
The5.11 modern incarnation of deep learning was designed to overcome these limitations of kernel machines.
( ) demonstrated that a neural network could outperform the RBF kernel SVM2006 on the MNIST benchmark.
5.7.3 Other Simple Supervised Learning Algorithms  We have already briefly encountered another non-probabilistic supervised learning algorithm, nearest neighbor regression.
More generally, k-nearest neighbors is a family of techniques that can be used for classification or regression.
As a non-parametric learning algorithm, k-nearest neighbors is not restricted to a fixed number of parameters.
We usually think of the k-nearest neighbors algorithm as not having any parameters, but rather implementing a simple function of the  training data.
Instead, at test time, when we want to produce an output y for a new test input x, we find the k-nearest neighbors to x in the training data X .
This works for essentially any kind of supervised learning where we can define an average over y values.
In the case of classification, we can average over one-hot code vectors c with cy = 1 and ci = 0 for all other values of i.
We can then interpret the average over these one-hot codes as giving a probability distribution over classes.
In this setting, -nearest neighbor converges to double the Bayes error as the1  number of training examples approaches infinity.
The error in excess of the Bayes error results from choosing a single neighbor by breaking ties between equally distant neighbors randomly.
When there is infinite training data, all test points x will have infinitely many training set neighbors at distance zero.
If we allow the algorithm to use all of these neighbors to vote, rather than randomly choosing one of them, the procedure converges to the Bayes error rate.
The high capacity of k-nearest neighbors allows it to obtain high accuracy given a large training set.
However, it does so at high computational cost, and it may generalize very badly given a small, finite training set.
One weakness of k-nearest neighbors is that it cannot learn that one feature is more discriminative than another.
For example, imagine we have a regression task with x ∈ R100 drawn from an isotropic Gaussian  143    CHAPTER 5.
The nearest neighbor of most points x will be determined by the large number of features x2 through x100, not by the lone feature x1 .
MACHINE LEARNING BASICS  0  1  01  111  0 1  011  11111110  110  10  010  00  1110 1111  110  10 0100  010 011  11  111  11  Figure 5.7: Diagrams describing how a decision tree works.
(Top)Each node of the tree chooses to send the input example to the child node on the left (0) or or the child node on the right (1).
Each node is displayed with a binary string identifier corresponding to its position in the tree, obtained by appending a bit to its parent identifier (0=choose left or top, 1=choose right or bottom).
The nodes of the tree are plotted in this plane, with each internal node drawn along the dividing line it uses to categorize examples, and leaf nodes drawn in the center of the region of examples they receive.
Each leaf requires at least one training example to define, so it is not possible for the decision tree to learn a function that has more local maxima than the number of training examples.
MACHINE LEARNING BASICS  Another type of learning algorithm that also breaks the input space into regions and has separate parameters for each region is the decision tree ( ,Breiman et al.
As shown in figure , each node of the decision5.7 tree is associated with a region in the input space, and internal nodes break that region into one sub-region for each child of the node (typically using an axis-aligned cut).
Space is thus sub-divided into non-overlapping regions, with a one-to-one correspondence between leaf nodes and input regions.
Decision trees are usually  trained with specialized algorithms that are beyond the scope of this book.
The learning algorithm can be considered non-parametric if it is allowed to learn a tree of arbitrary size, though decision trees are usually regularized with size constraints that turn them into parametric models in practice.
Decision trees as they are typically used, with axis-aligned splits and constant outputs within each node, struggle to solve some problems that are easy even for logistic regression.
For example, if we have a two-class problem and the positive class occurs wherever x2 > x1, the decision boundary is not axis-aligned.
The decision tree will thus need to approximate the decision boundary with many nodes, implementing a step function that constantly walks back and forth across the true decision function with axis-aligned steps.
We can also build intuition for more sophisticated learning algorithms by thinking about the similarities and differences between sophisticated algorithms and -NN or decision tree baselines.k  See ( ),  ( ),  ( ) or other machineMurphy 2012 Bishop 2006 Hastie et al.
5.8 Unsupervised Learning Algorithms  Recall from section that unsupervised algorithms are those that experience5.1.3  only “features” but not a supervision signal.
The distinction between supervised and unsupervised algorithms is not formally and rigidly defined because there is no objective test for distinguishing whether a value is a feature or a target provided by a supervisor.
Informally, unsupervised learning refers to most attempts to extract information from a distribution that do not require human labor to annotate examples.
The term is usually associated with density estimation, learning to draw samples from a distribution, learning to denoise data from some distribution, finding a manifold that the data lies near, or clustering the data into groups of  146    CHAPTER 5.
By ‘best’ we can mean different things, but generally speaking we are looking for a representation that preserves as much information about x as possible while obeying some penalty or constraint aimed at keeping the representation orsimpler more accessible than itself.x  There are multiple ways of defining a representation.
Three of thesimpler  most common include lower dimensional representations, sparse representations  and independent representations.
Low-dimensional representations attempt to compress as much information about x as possible in a smaller representation.
Sparse representations ( , ; , ;Barlow 1989 Olshausen and Field 1996 Hinton and Ghahramani 1997, ) embed the dataset into a representation whose entries are mostly zeroes for most inputs.
The use of sparse representations typically requires increasing the dimensionality of the representation, so that the representation becoming mostly zeroes does not discard too much information.
This results in an overall structure of the representation that tends to distribute data along the axes of the representation space.
Independent representations attempt to disentangle the sources of variation underlying the data distribution such that the dimensions of the representation are statistically independent.
Low- dimensional representations often yield elements that have fewer or weaker de- pendencies than the original high-dimensional data.
Identifying and removing more redundancy allows the dimensionality reduction algorithm to achieve more compression while discarding less information.
The notion of representation is one of the central themes of deep learning and therefore one of the central themes in this book.
Most of the remaining chapters introduce additional representation learning algorithms that  develop these criteria in different ways or introduce other criteria.
5.8.1 Principal Components Analysis  In section , we saw that the principal components analysis algorithm provides2.12 a means of compressing data.
MACHINE LEARNING BASICS  − −20 10 0 10 20 x1  −20  −10  0  10  20  x 2  − −20 10 0 10 20 z1  −20  −10  0  10  20  z 2  Figure 5.8: PCA learns a linear projection that aligns the direction of greatest variance with the axes of the new space.
This is a first step toward the criterion of learning representations whose elements are statistically independent.
To achieve full independence, a representation learning algorithm must also remove the nonlinear relationships between variables.
PCA learns an orthogonal, linear transformation of the data that projects an input x to a representation z as shown in figure .
In section , we saw that5.8 2.12 we could learn a one-dimensional representation that best reconstructs the original data (in the sense of mean squared error) and that this representation actually corresponds to the first principal component of the data.
Thus we can use PCA as a simple and effective dimensionality reduction method that preserves as much  of the information in the data as possible (again, as measured by least-squares reconstruction error).
In the following, we will study how the PCA representation decorrelates the original data representation .X  Let us consider the m n× -dimensional design matrix X.
If this is not the case, the data can easily be centered by subtracting the mean from all examples in a preprocessing step.
MACHINE LEARNING BASICS  PCA finds a representation (through linear transformation) z = xW where Var[ ]z is diagonal.
In section , we saw that the principal components of a design matrix2.12 X are given by the eigenvectors of XX.
We then recover the original eigenvector equation with as the eigenvector basis:W  XX =  U WΣ    U WΣ  = WΣ2W.
Using the SVD of , we can express the variance of as:X X  Var[ ] =x 1  m− 1X X (5.88)  = 1  m− 1(U WΣ )U WΣ  (5.89)  = 1  m− 1WΣ UU WΣ  (5.90)  = 1  m− 1WΣ 2W, (5.91)  where we use the fact thatUU = I because the U matrix of the singular value decomposition is defined to be orthogonal.
This shows that if we take z = xW , we can ensure that the covariance of is diagonal as required:z  Var[ ] =z 1  m− 1Z Z (5.92)  = 1  m− 1W X XW (5.93)  = 1  m− 1W WΣ2W W (5.94)  = 1  m− 1Σ 2, (5.95)  where this time we use the fact thatW W = I, again from the definition of the SVD.
MACHINE LEARNING BASICS  The above analysis shows that when we project the data x to z, via the linear transformation W , the resulting representation has a diagonal covariance matrix (as given by Σ2) which immediately implies that the individual elements of z are mutually uncorrelated.
This ability of PCA to transform data into a representation where the elements are mutually uncorrelated is a very important property of PCA.
It is a simple example of a representation that attempts to disentangle the unknown factors of variation underlying the data.
In the case of PCA, this disentangling takes the  form of finding a rotation of the input space (described by W ) that aligns the principal axes of variance with the basis of the new representation space associated with .z  While correlation is an important category of dependency between elements of the data, we are also interested in learning representations that disentangle more complicated forms of feature dependencies.
5.8.2 -means Clusteringk  Another example of a simple representation learning algorithm is k -means clustering.
The k-means clustering algorithm divides the training set into k different clusters of examples that are near each other.
We can thus think of the algorithm as providing a k-dimensional one-hot code vector h representing an input x.
The one-hot code provided by k-means clustering is an example of a sparse representation, because the majority of its entries are zero for every input.
Later, we will develop other algorithms that learn more flexible sparse representations, where more than one entry can be non-zero for each input x. One-hot codes  are an extreme example of sparse representations that lose many of the benefits of a distributed representation.
The one-hot code still confers some statistical advantages (it naturally conveys the idea that all examples in the same cluster are similar to each other) and it confers the computational advantage that the entire representation may be captured by a single integer.
In one step, each training example is assigned to cluster i, where i is the index of the nearest centroid µ( )i .
In the other step, each centroid µ( )i is updated to the mean of all training examples x( )j assigned to cluster .i  150    CHAPTER 5.
MACHINE LEARNING BASICS  One difficulty pertaining to clustering is that the clustering problem is inherently ill-posed, in the sense that there is no single criterion that measures how well a clustering of the data corresponds to the real world.
We can measure properties of the clustering such as the average Euclidean distance from a cluster centroid to the members of the cluster.
This allows us to tell how well we are able to reconstruct the training data from the cluster assignments.
Moreover, there may be many different clusterings that all correspond well to some property of  the real world.
We may hope to find a clustering that relates to one feature but obtain a different, equally valid clustering that is not relevant to our task.
For example, suppose that we run two clustering algorithms on a dataset consisting of images of red trucks, images of red cars, images of gray trucks, and images of gray cars.
If we ask each clustering algorithm to find two clusters, one algorithm may find a cluster of cars and a cluster of trucks, while another may find a cluster of red vehicles and a cluster of gray vehicles.
Suppose we also run a third clustering algorithm, which is allowed to determine the number of clusters.
This new clustering now at least captures information about both attributes, but it has lost information about similarity.
Red cars are in a different cluster from gray cars, just as they are in a different cluster from gray trucks.
The output of the  clustering algorithm does not tell us that red cars are more similar to gray cars than they are to gray trucks.
These issues illustrate some of the reasons that we may prefer a distributed representation to a one-hot representation.
A distributed representation could have two attributes for each vehicle—one representing its color and one representing whether it is a car or a truck.
It is still not entirely clear what the optimal distributed representation is (how can the learning algorithm know whether the two attributes we are interested in are color and car-versus-truck rather than manufacturer and age?)
but having many attributes reduces the burden on the algorithm to guess which single attribute we care about, and allows us to measure  similarity between objects in a fine-grained way by comparing many attributes instead of just testing whether one attribute matches.
5.9 Stochastic Gradient Descent  Nearly all of deep learning is powered by one very important algorithm: stochastic gradient descent or SGD.
MACHINE LEARNING BASICS  gradient descent algorithm introduced in section .4.3  A recurring problem in machine learning is that large training sets are necessary for good generalization, but large training sets are also more computationally expensive.
The cost function used by a machine learning algorithm often decomposes as a sum over training examples of some per-example loss function.
For example, the negative conditional log-likelihood of the training data can be written as  J( ) = θ Ex,y∼p̂dataL , y,(x θ) = 1  m  m  i=1  L(x( )i , y( )i ,θ) (5.96)  where is the per-example lossL L , y, p y .
(x θ) = log− ( | x θ; ) For these additive cost functions, gradient descent requires computing  ∇θJ( ) =θ 1  m  m  i=1  ∇θL(x( )i , y( )i , .θ) (5.97)  The computational cost of this operation isO(m).
As the training set size grows to billions of examples, the time to take a single gradient step becomes prohibitively long.
The minibatch size m is typically chosen to be a relatively small number of examples, ranging from 1 to a few hundred.
We may fit a training set with billions of examples using updates computed on only a hundred examples.
The estimate of the gradient is formed as  g = 1  m ∇θ  m  i=1  L(x( )i , y( )i , .θ) (5.98)  using examples from the minibatch .
The stochastic gradient descent algorithmB then follows the estimated gradient downhill:  θ θ g← −  , (5.99)  where is the learning rate.  152    CHAPTER 5.
In the past, the application of gradient descent to non-convex optimization problems was regarded as foolhardy or unprincipled.
Today, we know that the machine learning models described in part work very well when trained with gradientII descent.
The optimization algorithm may not be guaranteed to arrive at even a local minimum in a reasonable amount of time, but it often finds a very low value of the cost function quickly enough to be useful.
For a fixed model size, the cost per SGD update does not depend on the training set size m. In practice, we often use a larger model as the training set size increases, but we are not forced to do so.
However, as m approaches infinity, the model will eventually converge to its best possible test error before SGD has sampled every example in the training set.
Increasing m further will not extend the amount of training time needed to reach the model’s best possible test error.
From this point of view, one can argue that the asymptotic cost of training a model with SGD is as a function of .O(1) m  Prior to the advent of deep learning, the main way to learn nonlinear models  was to use the kernel trick in combination with a linear model.
Constructing this matrix has computational cost O(m2), which is clearly undesirable for datasets with billions of examples.
In academia, starting in 2006, deep learning was initially interesting because it was able to generalize to new examples better than competing algorithms when trained on medium-sized datasets with tens of thousands of examples.
Soon after, deep learning garnered additional interest in industry, because it provided a scalable way of training nonlinear models on large datasets.
Stochastic gradient descent and many enhancements to it are described further in chapter .8  5.10 Building a Machine Learning Algorithm  Nearly all deep learning algorithms can be described as particular instances of a fairly simple recipe: combine a specification of a dataset, a cost function, an optimization procedure and a model.
MACHINE LEARNING BASICS  X yand , the cost function  J , b(w ) = −Ex,y∼p̂data log pmodel ( )y | x , (5.100)  the model specification pmodel(y | x) = N (y;xw+ b, 1), and, in most cases, the optimization algorithm defined by solving for where the gradient of the cost is zero using the normal equations.
By realizing that we can replace any of these components mostly independently from the others, we can obtain a very wide variety of algorithms.
The cost function typically includes at least one term that causes the learning  process to perform statistical estimation.
The most common cost function is the negative log-likelihood, so that minimizing the cost function causes maximum likelihood estimation.
For example, we can add weight decay to the linear regression cost function to obtain  J , b λ(w ) = || ||w 22 − Ex,y∼p̂data log pmodel ( )y | x .
If we change the model to be nonlinear, then most cost functions can no longer be optimized in closed form.
The recipe for constructing a learning algorithm by combining models, costs, and optimization algorithms supports both supervised and unsupervised learning.
Unsupervised learning can be supported by defining a dataset that contains onlyX and providing an appropriate unsupervised cost and model.
For example, we can obtain the first  PCA vector by specifying that our loss function is  J( ) = w Ex∼p̂data || − ||x r( ; )x w 22 (5.102)  while our model is defined to have w with norm one and reconstruction function r( ) = x wxw.
In some cases, the cost function may be a function that we cannot actually evaluate, for computational reasons.
In these cases, we can still approximately minimize it using iterative numerical optimization so long as we have some way of approximating its gradients.
MACHINE LEARNING BASICS  hand-designed, it can usually be understood as using a special-case optimizer.
Some models such as decision trees or k-means require special-case optimizers because their cost functions have flat regions that make them inappropriate for minimization by gradient-based optimizers.
Recognizing that most machine learning algorithms can be described using this recipe helps to see the different algorithms as part of a taxonomy of methods for doing related tasks that work for similar reasons, rather than as a long list of algorithms that each have separate justifications.
5.11 Challenges Motivating Deep Learning  The simple machine learning algorithms described in this chapter work very well on a wide variety of important problems.
However, they have not succeeded in solving the central problems in AI, such as recognizing speech or recognizing objects.
The development of deep learning was motivated in part by the failure of traditional algorithms to generalize well on such AI tasks.
This section is about how the challenge of generalizing to new examples becomes exponentially more difficult when working with high-dimensional data, and how the mechanisms used to achieve generalization in traditional machine learning  are insufficient to learn complicated functions in high-dimensional spaces.
5.11.1 The Curse of Dimensionality  Many machine learning problems become exceedingly difficult when the number of dimensions in the data is high.
Of particular concern is that the number of possible distinct  configurations of a set of variables increases exponentially as the number of variables increases.
MACHINE LEARNING BASICS  Figure 5.9: As the number of relevant dimensions of the data increases (from left to right), the number of configurations of interest may grow exponentially.
(Left)In this one-dimensional example, we have one variable for which we only care to distinguish 10 regions of interest.
With enough examples falling within each of these regions (each region corresponds to a cell in the illustration), learning algorithms can easily generalize correctly.
A straightforward way to generalize is to estimate the value of the target function within each region (and possibly interpolate between neighboring regions).
We need to keep track of up to 10×10=100 regions, and we need at least that many examples to cover all those regions.
For d dimensions and v values to be distinguished along each axis, we seem to need O(vd ) regions and examples.
The curse of dimensionality arises in many places in computer science, and especially so in machine learning.
As illustrated in figure , a statistical challenge arises because the number of5.9 possible configurations of x is much larger than the number of training examples.
To understand the issue, let us consider that the input space is organized into a grid, like in the figure.
We can describe low-dimensional space with a low number  of grid cells that are mostly occupied by the data.
When generalizing to a new data point, we can usually tell what to do simply by inspecting the training examples that lie in the same cell as the new input.
For example, if estimating the probability density at some point x, we can just return the number of training examples in the same unit volume cell as x, divided by the total number of training examples.
If we wish to classify an example, we can return the most common class of training examples in the same cell.
Because in high-dimensional spaces the number of configurations is huge, much larger than our number of examples, a typical grid cell has no training example associated with it.
Many traditional machine learning algorithms simply assume that the output at a new point should be approximately the same as the output at the nearest training point.
5.11.2 Local Constancy and Smoothness Regularization  In order to generalize well, machine learning algorithms need to be guided by prior  beliefs about what kind of function they should learn.
Previously, we have seen these priors incorporated as explicit beliefs in the form of probability distributions over parameters of the model.
More informally, we may also discuss prior beliefs as directly influencing the itself and only indirectly acting on the parametersfunction via their effect on the function.
Additionally, we informally discuss prior beliefs as being expressed implicitly, by choosing algorithms that are biased toward choosing some class of functions over another, even though these biases may not be expressed (or even possible to express) in terms of a probability distribution representing our degree of belief in various functions.
Among the most widely used of these implicit “priors” is the smoothness prior or local constancy prior.
Many simpler algorithms rely exclusively on this prior to generalize well, and as a result they fail to scale to the statistical challenges involved in solving AI- level tasks.
Throughout this book, we will describe how deep learning introduces additional (explicit and implicit) priors in order to reduce the generalization error on sophisticated tasks.
There are many different ways to implicitly or explicitly express a prior belief that the learned function should be smooth or locally constant.
All of these different methods are designed to encourage the learning process to learn a function f∗ that satisfies the condition  f∗( ) x ≈ f ∗( + )x  (5.103) for most configurations x and small change .
In other words, if we know a good answer for an input x (for example, if x is a labeled training example) then that answer is probably good in the neighborhood of x.
If we have several good answers in some neighborhood we would combine them (by some form of averaging or interpolation) to produce an answer that agrees with as many of them as much as possible.
An extreme example of the local constancy approach is the k-nearest neighbors family of learning algorithms.
MACHINE LEARNING BASICS  region containing all the points x that have the same set of k nearest neighbors in the training set.
For k = 1, the number of distinguishable regions cannot be more than the number of training examples.
While the k-nearest neighbors algorithm copies the output from nearby training examples, most kernel machines interpolate between training set outputs associated with nearby training examples.
An important class of kernels is the family of local kernels where k(u v, ) is large when u = v and decreases as u and v grow farther apart from each other.
A local kernel can be thought of as a similarity function  that performs template matching, by measuring how closely a test example x resembles each training example x ( )i .
Much of the modern motivation for deep learning is derived from studying the limitations of local template matching and how deep models are able to succeed in cases where local template matching fails ( , ).Bengio et al.
2006b  Decision trees also suffer from the limitations of exclusively smoothness-based learning because they break the input space into as many regions as there are leaves and use a separate parameter (or sometimes many parameters for extensions of decision trees) in each region.
If the target function requires a tree with at least n leaves to be represented accurately, then at least n training examples are required to fit the tree.
The case of a nearest neighbor scenario, where each training example can be used to define at most one region, is illustrated in figure .5.10  Is there a way to represent a complex function that has many more regions to be distinguished than the number of training examples?
Imagine what happens when the number of training examples is substantially smaller than the number of black and white squares on the checkerboard.
Based on only local generalization and the smoothness or local constancy prior, we would be guaranteed to correctly guess the color of a new point if it lies within the same checkerboard square as a training example.
There is no guarantee that the learner could correctly extend the checkerboard pattern to points lying in squares that do not contain training examples.
With this prior alone, the only information that an example tells us is the color of its square, and the only way to get the colors of the  158    CHAPTER 5.
MACHINE LEARNING BASICS  Figure 5.10: Illustration of how the nearest neighbor algorithm breaks up the input space into regions.
An example (represented here by a circle) within each region defines the region boundary (represented here by the lines).
The y value associated with each example defines what the output should be for all points within the corresponding region.
While this figure illustrates the behavior of the nearest neighbor algorithm specifically, other machine learning algorithms that rely exclusively on the local smoothness prior for generalization exhibit similar behaviors: each training example only informs the learner about how to generalize in some neighborhood immediately surrounding that example.
MACHINE LEARNING BASICS  entire checkerboard right is to cover each of its cells with at least one example.
The smoothness assumption and the associated non-parametric learning algo- rithms work extremely well so long as there are enough examples for the learning algorithm to observe high points on most peaks and low points on most valleys of the true underlying function to be learned.
This is generally true when the function to be learned is smooth enough and varies in few enough dimensions.
In high dimensions, even a very smooth function can change smoothly but in a different way along each dimension.
If the function additionally behaves differently  in different regions, it can become extremely complicated to describe with a set of training examples.
If the function is complicated (we want to distinguish a huge number of regions compared to the number of examples), is there any hope to generalize well?
The answer to both of these questions—whether it is possible to represent a complicated function efficiently, and whether it is possible for the estimated function to generalize well to new inputs—is yes.
The key insight is that a very large number of regions, e.g., O(2k), can be defined with O(k) examples, so long as we introduce some dependencies between the regions via additional assumptions about the underlying data generating distribution.
2006c  different deep learning algorithms provide implicit or explicit assumptions that are reasonable for a broad range of AI tasks in order to capture these advantages.
For example, we could easily solve the checkerboard task by providing the assumption that the target function is periodic.
Usually we do not include such strong, task-specific assumptions into neural networks so that they can generalize to a much wider variety of structures.
AI tasks have structure that is much too complex to be limited to simple, manually specified properties such as periodicity, so we want learning algorithms that embody more general-purpose assumptions.
The core idea in deep learning is that we assume that the data was generated by the composition of factors or features, potentially at multiple levels in a hierarchy.
These apparently mild assumptions allow an exponential gain in the relationship between the number of examples and the number of regions that can be distinguished.
The exponential advantages conferred by the use of deep, distributed representations counter the exponential challenges posed by the curse of dimensionality.
MACHINE LEARNING BASICS  5.11.3 Manifold Learning  An important concept underlying many ideas in machine learning is that of a  manifold.
In everyday life, we experience the surface of the world as a 2-D plane, but it is in fact a spherical manifold in 3-D space.
The definition of a neighborhood surrounding each point implies the existence of transformations that can be applied to move on the manifold from one position to a neighboring one.
Although there is a formal mathematical meaning to the term “manifold,” in  machine learning it tends to be used more loosely to designate a connected set of points that can be approximated well by considering only a small number of degrees of freedom, or dimensions, embedded in a higher-dimensional space.
See figure for an5.11 example of training data lying near a one-dimensional manifold embedded in two- dimensional space.
In the context of machine learning, we allow the dimensionality of the manifold to vary from one point to another.
For example, a figure eight is a manifold that has a single dimension in most places but two dimensions at the intersection at the center.
Figure 5.11: Data sampled from a distribution in a two-dimensional space that is actually concentrated near a one-dimensional manifold, like a twisted string.
MACHINE LEARNING BASICS  Many machine learning problems seem hopeless if we expect the machine learning algorithm to learn functions with interesting variations across all of Rn.
Manifold learning algorithms surmount this obstacle by assuming that most of Rn consists of invalid inputs, and that interesting inputs occur only along a collection of manifolds containing a small subset of points, with interesting variations in the output of the learned function occurring only along directions that lie on the manifold, or with interesting variations happening only when we move from one manifold to another.
Manifold learning was introduced in the case  of continuous-valued data and the unsupervised learning setting, although this probability concentration idea can be generalized to both discrete data and the supervised learning setting: the key assumption remains that probability mass is highly concentrated.
The assumption that the data lies along a low-dimensional manifold may not always be correct or useful.
We argue that in the context of AI tasks, such as those that involve processing images, sounds, or text, the manifold assumption is at least approximately correct.
The first observation in favor of the manifold hypothesis is that the proba- bility distribution over images, text strings, and sounds that occur in real life is  highly concentrated.
Figure shows how, instead, uniformly sampled points5.12 look like the patterns of static that appear on analog television sets when no signal is available.
Similarly, if you generate a document by picking letters uniformly at random, what is the probability that you will get a meaningful English-language text?
Almost zero, again, because most of the long sequences of letters do not correspond to a natural language sequence: the distribution of natural language sequences occupies a very small volume in the total space of sequences of letters.
MACHINE LEARNING BASICS  Figure 5.12: Sampling images uniformly at random (by randomly picking each pixel according to a uniform distribution) gives rise to noisy images.
Although there is a non- zero probability to generate an image of a face or any other object frequently encountered in AI applications, we never actually observe this happening in practice.
This suggests that the images encountered in AI applications occupy a negligible proportion of the volume of image space.
Of course, concentrated probability distributions are not sufficient to show that the data lies on a reasonably small number of manifolds.
We must also  establish that the examples we encounter are connected to each other by other  163    CHAPTER 5.
MACHINE LEARNING BASICS  examples, with each example surrounded by other highly similar examples that may be reached by applying transformations to traverse the manifold.
The second argument in favor of the manifold hypothesis is that we can also imagine such neighborhoods and transformations, at least informally.
In the case of images, we can certainly think of many possible transformations that allow us to trace out a manifold in image space: we can gradually dim or brighten the lights, gradually move or rotate objects in the image, gradually alter the colors on the surfaces of objects, etc.
For example, the manifold of images of human faces may not be connected to the manifold of images of cat faces.
These thought experiments supporting the manifold hypotheses convey some in- tuitive reasons supporting it.
More rigorous experiments (Cayton 2005 Narayanan, ; and Mitter 2010 Schölkopf 1998 Roweis and Saul 2000 Tenenbaum, ; et al., ; , ; et al., 2000 Brand 2003 Belkin and Niyogi 2003 Donoho and Grimes 2003 Weinberger; , ; , ; , ; and Saul 2004, ) clearly support the hypothesis for a large class of datasets of interest in AI.
When the data lies on a low-dimensional manifold, it can be most natural for machine learning algorithms to represent the data in terms of coordinates on the manifold, rather than in terms of coordinates in Rn.
We give directions to specific addresses in terms of address numbers along these 1-D roads, not in terms of coordinates in 3-D space.
Extracting these manifold coordinates is challenging, but holds the promise to improve many machine learning algorithms.
By the end of this book, we will have developed the methods necessary to learn such a manifold structure.
This concludes part , which has provided the basic concepts in mathematicsI and machine learning which are employed throughout the remaining parts of the book.
MACHINE LEARNING BASICS  Figure 5.13: Training examples from the QMUL Multiview Face Dataset ( , )Gong et al.
2000 for which the subjects were asked to move in such a way as to cover the two-dimensional manifold corresponding to two angles of rotation.
